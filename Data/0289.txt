제가 굉장히 자주 저 수준의 중요성에 대해서 말을 했어요. 그래서 오늘도
또 말하려고 그래요. 이거는 조금 다른 방식으로 설명을 해보려고
제가 예전부터 그랬어요. 훌륭한 프로그래머가 되려면 하드웨어를
알아야 된다. 뭐 타 프로그래머라면 하드웨어쯤은 이런 얘기도 만들었
었고 라이브로 했던 방송 중에도 자주 그런 얘기를 했어요. 그러면
이제 그 뭐라 그럴까 한 2000년도 였나 닷컴 버블이 있을 때 북미 쪽에서
그때 한참 이제 자바가 되게 유행 을 했었죠. 뭐 가비지 컬렉터가
있는 뭐 좀 메모리 관리 트레이드 되는 하드웨어를 몰라도 할 수 있는
그래서 정말 oop 진영에서 object oriented 프로그래밍이죠. 그래서 얘네 개념
은 우리가 왜 굳이 하드웨어의 뭐 그런 메모리까지 알아야 되냐 우리는
는 현실에 존재하는 object의 개념 에서 모든 걸 할 수가 있다. 그래서
굉장히 어찌 보면 되게 추상적이고 어찌 보면 되게 원론적인 얘기들이
oop였어요. 그래서 저도 oop는 물론 좋아하지만 그렇게 원론적인 얘기는
솔직히 잘못된 거라고 봐요. 그래서 그거에 이제 기초를 해서 이제
자바라는 언어가 또 그때 굉장히 핫했고 그걸로 열심히 해갖고 모든
프로그램이 그대로 돌다가 그때는 또 이제 닷컴 버블이 있었기 때문에
말도 안 되는
그런 소리로 창업도 가능했고 돈도 들어왔던 때예요. 그러다가 그게
망가지고 나서 이제 그 뭐라 그럴까 학교들이 되게 힘들어졌고 학교들이
이제 그런 저수준 언어를 안 가르키 다가 자바 언어만 가르키다가 닷컴
버블 무너지니까 애들이 취업을 못하는 거야 졸업해도. 그래서 왜냐하면
졸업해서 취업할 수 있는 데는 말 그대로 그런 원론적인 얘기를 하는
데가 아니라 실제 제품을 만드는 데거든요. 그럼 실제 제품을 만드는
데면은 생각보다
저수준을 되게 중요시하는 데가 되게 많았어요. 지금도 그렇고 제가
볼 때는.
그래서 그럼 저수준을 왜 자꾸 저는 알라 그러냐. 아니 뭐 물론
저수준 어셈블리까지 가려면 갈 수도 있어요. 근데 그거는 좀 오버
라고 생각을 하고 예전에 이제 어셈블리를 짜갖고 성능을 성능
때문에 어셈블리를 짜야 했던 시절 은 많이 줄어들었죠. 이제 그 다음에
이제 똑같은 논리로 사람들이 아 저수준을 몰라도 뭐라 그럴까 그
오오피만 순수 오오피만 지원하는 언어만으로도 충분히 제품을 만들
수 있다라는 걸로 밀고 나갔고 앞으로 컴퓨터가 발전하면 더더욱 그럴 거다
라고 밀고 나갔지만 일단 저희는 cpu 속도의 한계를 받았고요. 지금
무호해로운가. 그래서 일단 cpu가 8년 전에 산 것도 지금도 아무 무리
없이 돌 정도로 cpu 속도 향상이 안 되고 있고 그 단순하게 그냥 cpu
가 빨라짐으로 인해서 더 이상 신경 안 쓸 정도로 빨라진다라는 거는
이제 불가능해요. 오지 않아요 . 물리적인 법칙에 의해. 그죠
그러면 지금 도는 컴퓨터에서 충분히 빠른 프로그램을 돌려야 되는 거
에요. 근데 현존하고 있는 그런 뭐라 그럴까 가비지 컬렉터 기반
버추얼 머신 기반의 언어들은 그 정도로 빠르진 못해요. 뭐 정말
속도가 필요 없는 데에서는 충분히 빠를 수도 있지만 특히 이제 게임
쪽이라던가 아니면은 이제 요즘 머신러닝 쪽도 많이 돌려야 되는데
그런 쪽이라던가. 이제 뭔가 대량 연산이 필요하면 필요할수록 이제
컴퓨터의 속도를 쥐어짜기가 어려운 거죠 그런 언어로는. 그래서 재밌는
거는 지금 쿠다도 나왔잖아요 쿠 다. 엔비디아에서 gpu 돌려서 대량
연산하는 거. 거기서 누가 버추얼 머신 써요. 아니 버추얼 머신 dm
맞죠. 거기서 누가 써요. 다 c로 쓰잖아요. c 개념에 있는 그런 하드웨어
에 직접 접근할 수 있는 가장
빠른 언어들 어셈블리는 아닌. 그래서 일단 그런 거에서 그냥
가만히 있으면 지금 이렇게 뭐라 그럴까 오버헤드가 굉장히 큰
언어 자바 c샵 이런 무류 그게 충분히 빨라져서 모든 걸 할 수가 있다
라는 거에선 조금은 의심스러운 거예요 조금은. 그래서 그럼 성능을
위해 저순이 중요하다. 참 좋은 얘기죠. 성능 뿐만 아니라 성능뿐만
이 아니에요. 자기가 이해 못하는 버그를 이해할 때도 도움이 돼요
. 제가 한때 이제 주니어들한테 한 얘기가 있어요. 요즘은 제가
저순을 느낀 건데 컴퓨터에 버그 가 생기면 애들이 제가 잘 잡거든
요. 되게 이상한 데 버그 나도 프로그램에 버그 나는 거 그럼 애들이 물어봐요
어떻게 잡았냐고 그러면 설명을 해줘요. 아니 이런 이런 문제가
있으면 이거는 컴퓨터 개념에서는 절대 이렇게 이해할 수가 없는 부분이고
돌 수가 없기 때문에 이게 뻑이 나려면 이런 문제가 있어야 되고
그리고 그니까 컴퓨터가 도는 원리를 알면은 그런 게 되는 거예요
컴퓨터가 도는 원칙상 이거는 말이 안 되고 이거는 말이 되고
그러면 이런 현상이 나려면 이런 이런 문제가 있을 거고
그럼 여길 봐야 된다 이런 게 나오는 거예요
근데 걔네들은 들으면서 그런 거 어떻게 아니에요
그러면 아니 컴퓨터가 내부에서 뭐 레지스터가 이렇게 돌고
뭐 메모리가 이렇게 돌고 막 이런 것도 있잖아요
그래서 뭐 이렇게 되면 이렇게 되는 거다
메모리가 여기서 이렇게 덮었으면 이 부분이 날라갈 수도 있고
막 이런 얘기들 근데 그런 것들을 잘 몰라요 지금 많은 사람들이
근데 결과적으로 그런 버그가 때문에 제품이 못 나가고
그런 버그 때문에 몇 달을 낭비하고 이런 경우도 많았거든요
물론 어셈블리어로 모드를 짠다는 건 말이 안 되는 이유가
요즘은 가면 갈수록 싸는데 시간이 많이 든다는 거죠
근데 지금 요즘 사람들이 생각하는 거만큼
C#이나 자바가
C++에 비해 그렇게 시간이 개발 시간이 광창 줄어들지도 않아요 이제는
왜냐하면 C++도 많이 모던화됐고 라이브러리도 많이 좋은 게 있기 때문에
그래서 결과적으로는 개발 속도 단축은 역시 자바나 C#이 약간은 빠르지만
그렇다고 그게 엄청나게 빠른 게 아니라는 거죠
그래서 또 다른 얘기로는 이제 그렇게 하드웨어를 잘 이해하는 사람들이 없기 때문에
그런 사람들이 이제 메모리 같은 거
뻑내기가 있으니까 그거를 막으려고 C#이나 자바를 쓴다는 얘기도 있어요
그건 어느 정도 동감은 하는데
근데 결과적으로 저는 그냥 모든 사람의 실력이 좀 더 좋아졌으면 좋겠거든요
그런 의미에서 다시 본론으로 돌아가면
아잇 C#이 얘기가 너무 많아
이렇게 생각을 하면 돼요
옛날에 한참 유명했던 책 중에 '화성에서 온 남자, 금성에서 온 여자인가 그 반대인가' 이게 있어요
한마디로 남자와 여자의 차이를 얘기하는 거예요
남자는 이런 언어를 쓰고 여자는 이런 언어를 쓴다
서로 다른 언어를 쓰기 때문에 서로 이해를 못하고 거기서 갈등이 생긴다
프로그래머도 마찬가지예요
저희는 결과적으로는 컴퓨터에서 도는 프로그램을 만드는 거예요
컴퓨터 아키텍처는 좀 나아지고는 있지만
기본적으로 프로그램이 도는 방법은 차이가 없어요
언제나 메모리에 뭔가를 쳐박고 메모리 일부분을 명령으로 인식하게 하고
메모리 어느 부분에 값을 대입하고
그 값을 대입하는 메모리 영역을 동적으로 할당할 수도 있고 지울 수도 있고 기타 등등
컴퓨터는 그걸로 도는 거예요 다른 게 없어요
그냥 컴퓨터는 모든 게 메모리에 있는 숫자일 뿐이고
그 메모리에 있는 그 숫자를 어떻게 이해하느냐
이게 명령어냐 이게 데이터냐
그것에 따라 컴퓨터가 도는 게 전부예요
그리고 그거를 만들기 위해서 온갖 뛰어난 엔지니어링 에포트가 들어가고
뭐 지금은 옵티마이제이션까지 들어가고 최적화까지
CPU 최적화까지
들어가서 온갖 미친 짓을 하고 있죠
근데 그거를 어느 정도 이해를 못하면 우리는 그냥
아 그래 C# 자바는 이런 거고
아 뭐 메모리 관리 알아서 해준다고
이렇게 하면은 알아서 놀겠지 이거예요
한마디로 어딘가에선 갈등이 생긴다는 거죠
어딘가에서 충돌이 생긴다는 거죠
그리고 이거를 저희가 지금 말해 놓은 거를
이 컴퓨터 언어로 옮기기 위해서는
컴퓨터가 이해하는 진짜 인스트럭션으로 옮기기 위해서는
중간에 어떤 과정이 있다는 거 아니에요
근데 C나 C++ 아니면 Rust 같은 언어는
이거를 직접 컴파일 도중에 시간을 많이 쳐부어서
완벽히 컴파일을 해서 어셈블리 수준으로 바꿔준다는 거고
그러면 이 개념은 뭐냐면
금성 남자 뭐 남자라고 하죠
그리고 화성 여자가 있다면 중간에 톤 효과가 있는 거야
그래서 이 사람이 책을 쓴 거야 금성 남자
책을 쓰면은 옆에서 번역가 번역을 다 해요
정말 잘하는 번역가가
그래서 딱 번역을 해서 이 화성 여자가 이해할 수 있는 책을 딱 준 거예요
그럼 화성 여자는 책만 읽을 수 있어요
책만 읽으면 돼 이 개념이에요
그런데 자바나 C#의 개념은 뭐냐면
실시간 통역이요
그 실시간 통역 해봤죠
들어봤죠 어디 가서도
미리 그 통역자한테 원문 안 주고
그냥 말을 하는 거예요 마구
그럼 말할 동안 실시간 통역 아무리 잘해봐야
중간에 어 더 음 멈추고
중간에 감정 약간 잃고 하면서
들으면서 좀 맘에 안 들잖아요
그 개념이에요
그래서
그 실시간을 도는 게 그렇게 뛰어날 수 있다?
없다고 봐요
왜냐하면은 일단 이 화성 아까 금성에서 화성에 있어
뭐 금성 남자가 쓰는 이 언어가 굉장히 다양하고 단순한 언어가 아니야
단어 10개가 아니라 단어 한 5만 개를 쓰는 거예요
그럼 그거를 어떻게 화성 여자가 이해하는 이 사람은 단어 2개만 쓰는데
10개라고 하자
그 10개 단어를 어떻게든 설명을 하고 있는 거예요
그래서 힘들다는 거죠
근데 중간에 누군가가 정말 뭐 잘하는 번역가가 있는 거예요

단어 10개가 아니라 단어 10개는 말 그대로
딱 시간을 엄청나게 퍼부어서 딱 그 사람이 이해할 수 있는 수준으로
언어로 딱 만들어 주면 이해할 수 있게 쉽다는 거지
그 개념이에요
그래서 결과적으로는 아무리 뭐
아 그 정도의 성능이 문제가 안 돼
라는 그런 세상이 오기를 우린 다 바랬어요 사실은
왜냐면 어셈블리가 그랬으니까
그러나 재밌는 거는 그 어셈블리에서 C++ 넘어올 때 그
뭐라 그럴까
그런 과정이 있었다고 그 똑같은 역사가 다른 거에도 반복이 되진
않았던 거 같아요 그래서 그게 좀 아쉬운 단점이에요 사실은 저도
이제 씨샵을 되게 좋아하는 사람 으로서 좀 아직도 c++를 써야 될
때가 있다는 건 좀 아쉬운데 이거는 어떻게 될 것 같지가 않아요 그리고
그리고 똑같은 얘기로 이제 특히나 이제 다른 회사 라이브러리를 갖다
쓰는 경우가 있잖아요 오픈소스면 좀 더 문제가 심각하고 그런 데에서
는 또 그 라이브러리 안에서 버기 나기 시작할 때 과연 이거를 잡을
수 있는 사람들이 점점 줄어들고 있지 않나 생각이 들어요 왜냐면
뭔가 났어 그러면 내 코드가 아닌데 잘 모르겠는 거야 그럼 그 문제를
다 해결하려면 결과적으로 저 수준 을 알아야 되거든요 왜냐면 컴퓨터
가 어떻게 도는지 알아야 뭘 할 거 아니에요 똑같은 거예요 또 이제
뭐 어디 나라에 있는지 모르겠는 거에요.
아 이 여행을 갔을 때도 똑같아 통역을 끼고 여행을 갈 수 있어요
뭐 돈도 좀 더 들고 시간 더 들고 그렇죠 근데 그 나라 언어를 되게
자유롭게 할 수 있으면 그 나라 가서 굉장히 편해요 뭐 어디 가기도
편하고 뭐 중간에 lost in translation이라고 하죠 통역하는 중간에 음이 바뀌는
거 그런 것도 없고 그래서 저는 정말 개발자라면 내가 뭔가를 돌리려고
하는 기계를 굉장히 잘 이해해야 된다고 생각을 해요.
그거는 당연한 게 아닌가 싶어요 예를 들어서 내가 어떤 사람을 만나서
결혼하려고 해도 그 사람을 잘 이해할 거 아니에요 이 사람이 어떤 사람
인지 그게 아니라 그냥 아유 뭐 대충 맞을 거야 추상적으로 이건
또 말이 안 되잖아요.
그래서 뭐라 그럴까 뭐 또 카메라 좋아하시는 분들 사진찍기 좋아하시는
분들은 엄청 잘 아시잖아요 막 이렇게 막 이거 뭐 포커스는 뭐고 노출은
뭐고 조리개가 뭐 이런 거 다 아시 잖아요 그런 사람들이 정말 프로가
될 수 있는 거고.
뭐 아마추어는 뭐.
뭐 아마추어들은 그냥 가서 대충 찍죠 아 자동차 찍어준대 아 찍으니까
예뻐 괜찮아 그러나 딱 프로가 찍은 거보단 확실히 다르잖아요
저는 개발도 그런 거라고 봐요 정말 프로가 되려면 내가 쓰는 기기
에 이게 어떻게 되고 심지어는 어느 순간에는 하드웨어의 문제가 있어서
컴퓨터가 뻑이 날 수도 있어요 그러면 이거를 모든 걸 제외하고
아 이거는 여기서 전류가 과도하게 흐르면서 뻑이 난 거 까지 판단이
가능할 정도가 되는 사람들이 좀 프로인 거 같아요 정말로 근데 뭐
이거를 어느 순간 막무가내.
아 그래 하드웨어는 하드웨어고 프로그래머는 전혀 다른 관계야
전혀 이거 분리시키는 거 제가 말이 안 되죠 자동차 운전하는 사람들
도 레이싱하는 사람들 토크가 뭐고 뭐고 이거 엄청 잘 알아요 그냥 감
으로 이게 된다는 게 아니라 자동차 가 도는 원리까지 알거든요 그래서
저는 모든 분야에 진짜 프로고 마스터 라는 사람들이 자기가 운전하는
자동차 자기가 쓰는 카메라 자기가 사용하는 도구에 어떻게 돌고 어떻게
하면 이게 효율적으로.
되는지를 다 이해하는데 왜 굳이 프로그래머들 그리고 이제 우리는
소프트웨어 엔지니어라고 우기 고 싶잖아요 자칭 엔지니어라고
우기는데 그 엔지니어가 되고 싶은 사람들이 어디서 그런 말도 안 되는
책임 회피를 하고 있는지 정말 이해가 안 돼요 그래서 정말 하드웨어
를 모르고 무슨 이 아키텍처만 잘 이해하고 무슨 이거만 잘하면 된다
절대 아니라고 봐요 그건 불가능 해요 실제로 이제 이거는 0.2만
uo에 있는 것도 아니고 이게 알 수 있어요 그래서 유영천님이 유영천
씨 페이스북에도 몇 번 올리셨던 얘기인데 마이크로소프트한테 보면
애즈워 만들고 윈도우스 커널 만들고 이런 사람들 있잖아요 그
사람들 다 로우 레벨 개발자예요 그 사람들이 무슨 oop의 개념을 열심히
공부해서 이거를 한 사람들이 아니라 정말 하드웨어부터 시작을 해서
그 하드웨어가 어떻게 도는지를 이해를 하고 그걸 이해했기 때문에
그 나중에 어떤 oop 기반을 올려도 어떤 아키텍처를 올려도 돌 수 있는
는 os도 만드는 거고 그리고 막 그 뭐죠 그 버추얼 머신 돌리려면
이제 하이퍼비 같은 거 만들잖아요 슉 하이퍼바이저인가 그런 거 만드는
거 심지어는 그 지금 애져도는 게 완벽히 하이퍼바이저 개념일 거
아니에요 그런 거를 몇 천대 몇 만 대 몇 십만 대를 돌리 쓰는 정도의
구조로 만드는 사람들은 결과적으로 는 하드웨어를 정말 잘하는 사람들
이더라고요 그래서 저희는 좀 뭐라 그럴까 변명을 좀 그만했으면 좋겠어요
개발자인데 아는 훌륭한 개발자가 될 거야 어떻게 될 건데 답이 없어
그러고 아 이거 이렇게 로우 레벨 을 좀 더 해야 된다 저 수준으로
그걸 왜 해요 필요없지 않잖아요 이 얘기를 하는 거예요 저는 그게
좀 안쓰러워요 그러니까 자꾸만 분명히 가야 되는 길이 정해져 있다고
보는데 저는
훌륭한 개발자가 될 거야 어떻게 될 건데 답이 없어 그러고 아 이거
훌륭한 개발자가 되기 위해서는 그 중요한 거 정말 기본에는 핵심
을 보지 않고 자꾸만 뭐라 그러 죠 이거 장기술만 계속 늘려가는
거 같아서 되게 아쉬워요 사람들이 이 장기술은 코어만 잡히면 굉장히
쉽게 배울 수 있는 거거든요 그렇기 때문에 우리가 정말 뛰어나다고
생각하는 그런 개발자들이 전부 다 다 코어가 있고 장기술을 위해
배운 사람들이지 실제 장기술만 해갖고 그렇게 유명한 개발자가 된 사람은
없잖아요 사실은 그러니까 뭐 제품을 반짝 해서 벌어서 그 개발자 말고
정말 개발자 유명한 개발자 프로그래머 그래서 저 수준의 중요성을 한 번
더 강조를 하고 싶었어요 그냥 새로운 비유로 아까 화성남자 금성남자
여자 그리고 자동차 운전 카메라 찍는 사람들 이런 걸로 포프였습니다
.
