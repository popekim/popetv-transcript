예 안녕하세요 포프입니다
최근에 버그 이야기 했던게 되게 인기가 많았어요
게임쪽 버그도 그랬지만
무슨 하드웨어제조사 버그 이런것도
보시면서 사람들이
아 이런 심팍한 일들을 하는구나
그러면 그거를 정말 고치기 위해
개발자들은 이런 고생을 했구나
개고생을 했구나
이런 생각을 하셨던 것 같아요
원래 그 당연히 하드웨어제조사는
이제 왕님이시기 때문에
그분이 만들어 놓으면
어떻게든 맞춰가야 되는게 저희의 일이죠
예를 들어서 최근에 있던
인텔의 스펙트라
그런것도 하드웨어 자체의 문제를
현재 이제 OS단에서
열심히 패치하고 있잖아요
뭐 그런 문제
뭐 그분들이 이제
왕이고 저희가 따라가는 걸 수도 있고
아니면은 우리는
이런 문제를 아무리
그 사람들 때문에 문제가 생겼어도
우리는 착한 사람들이니까
서로서로 돕고 살아야 돼
이런 개념일 수도 있겠지만
솔직히 얘기하면
제가 욕 안 먹기 위해서 하는 거죠
제가 만든 게임이 어떤 콘솔에서
더럽게 느리게 돌아가면은
콘솔 욕을 하는 사람보다는
제 욕을 하는 사람이 많을 거고
뭐 그러면 저도 이제 뭐
돈을 못 벌거고
그래서 그런 거라고 생각을 해요
그런 의미에서 이제
제가 거기에 최근에 달렸던
이제 개발자의 거짓말 버그 이야기
거기서 특 어떤 이제 하드웨어 제조사 얘기를 하면서
이렇게 얘기를 쭉쭉 했었어요
그럼 이제 그 하드웨어 제조사 이제 얘기를 보고
사람들이 와 대단하다 학 뛴다
뭐 고소 안 당했냐 이런 얘기 하는데
무슨 고소는 뭘 고소를 당해요
우리 다 비밀이지
근데 그 하드웨어 제조사의 그때 얘기는
사실은 컨퍼런스 여기저기서 나왔던 걸로
기억을 하기 때문에
공개돼 있는 얘기일 수도 있어요
뭐 그건 뭐 중요하지 않고
그래서 그런 오늘은 또 이제
그런 약간 하드웨어 제조사의 삽질이라는 거에 대해서
조금 얘기를 해봤는데
해보려고 해요
아 뭐 이미 알고 있는 얘기들은 좀 많이 빼고
이제 비디오가 요즘 너무 길어지는 거 같으니까
좀 짧게 한 두 가지만 얘기를 할게요
이 두 제조회사는 같은 회사일 수도 있고 아닐 수도 있어요
아 제가 이름을 곧바로 밝히기엔 되게 애매한 거 같아요
근데 이제 이 두 제조회사는 유명한 회사일 수도 있고
아닐 수도 있어요
그래서 이제 쉴드를 쳐야지
어떤 일이 있었냐면은
둘 다 이제
핸드헬드 기기예요
핸드헬드 게임기
그래서 제가 둘 다 작업을 해 봤고
그래서 얼마 전에
코멘트에서도
아 새로운 거 하고 싶으시다는데
인베디드 시스템해 보세요
라고 하지만
저는 그거 다 인베디드 해 본 사람이에요
콘솔은 다 인베디드이기 때문에
그래서 한 콘솔은 되게 재밌었던 게 뭐냐하면
이제 이 콘솔에
하드웨어 자체로 지원하는 기능들이 있어야 돼요
그래픽을 할 때
그래야만 하드웨어 가속을 받아서 빨라지니까
이 하드웨어는
그래서 이제 삼각형 같은 걸
화면이 이렇게 있다고 생각을 해봐요
그러면 삼각형을 그릴 때
삼각형이
이 경계 밖으로 나가는 경우가 있잖아요
그러면 하드웨어적으로
삼각형을 잘라주는 기능들이 있어요
사실은 그걸 이제
클리퍼라고 해요
그럼 이제 삼각형이 아까 이렇게
경계가 이렇게 있고
삼각형이 이렇게 나갔다던가 이렇게 되면은
이걸 잘라서 얘네를
없애버리고 여기서 새로운
지오메티를 만들어갖고 그 지오메티를
보여줘야 돼요 저희한테
그러지 않으면 삼각형을 이제
화면에 그리려고 레스토라이즈 할 때
메모리 이상으로 밖으로 넘어가서
이거 억세스하는 순간
하드웨어 자체가 뻑이 나요
이걸 막으려고 삼각형 클리퍼를 만들어놨어요
근데
작동을 안해
버그가 있던 거 작동을 안한다
둘 중에 제가 정확히 뭐였는지 기억이 안나는데
작동을 안해
그래서
삼각형이 나가서 그려지면 무조건
뻑이 났어요
그래서
아
그래
또 하드웨어 뻑을 냈구나
출시가 바빴구나
이제 뭐 어쨌든간에 고객들은 나를 욕할테니
내가 고쳐야지
그래서 그 하드웨어 클리퍼를
저희가 만들었어요 직접
근데 재미있었던 건
이게 이제 핸들드 기기잖아요
그러면 cpu 성능이 그렇게 좋지가 않아요
그래서 이제
하드웨어 클리퍼를 만들었는데
소프트웨어 클리퍼죠
삼각형 클리퍼를 이제 소프트웨어에서 만들었는데
삼각형 어딘지 보고
이제 삼각형이 경계밖으로 나가면
새로 이제 지오메트리 만들어서 새로 만들고 이런식으로
만들었는데
너무 느렸어요
아니 cpu가 딸리는데
그 하드웨어에서 가속해 줘야 되는 기능을
그걸로 만들면 얼마나 느리겠어
너무 느렸어요
특히 느려지는 이제 이유가 두 가지가 있었지만
두어 가지가 있죠
그냥 뭐 c 코드를 썼는데
어셈블리가 제대로 안 나왔거나
아니면 이게 메모리를 계속 접근해야 되는 건데
메모리를 접근할 때마다
메모리 캐쉬에 자꾸만 들어가요
근데 이건 한번 쓰고 버릴건데
캐쉬에 집어넣고 뭐 하는 연산이 너무 느린거야
아 그러면
이 캐쉬를
그리고 이제 뭐 곱셈 이런거 할 때
일반적인 cpu로 곱셈을 하면은
뭐 한번에 플롯 하나만
뭐 뭐 곱하거나
이런게 되지만
그 하드웨어에는 한번에
이제 뭐 플롯 값을
소수점 값을 곱셈을
정확히 몇개인지 기억이 안나지만
뭐 한
16개를 한꺼번에 할 수 있다던가
이런 하드웨어가 달려있었어요
그리고 그걸 쓰려면 어셈블리를 써야되고
그래서 결국 어셈블리 썼어요
어셈블리 쓰는데
또 이 하드웨어의
레지스터가 엄청 많아요
뭐 저희 지금 윈 30이 쓰는것처럼
뭐
레지스터 32개 이런게 아니라
레지스터가 100몇개가 있었어요
그러면 코드를 한 줄 아줌마 딸때마다
아 이 레지스터에는 이거 옮기고 저거 이거 옮기고
아 이 벡터프로세서에 이렇게
항문을 곱하고
그럼 캐쉬는 이제 안 들어가니까
캐쉬에서 빨라졌고
어셈블리 최적으로 짜고있고
그럼 이제 그
100몇개 되는 레지스터
레지스터 하나당 32비트도 아니고
막 벡터 레지스터 해갖고
막 4줄짜리 이렇거든요 32비트
그럼 그걸 이렇게 우리 표로
만들어두고 아 이거는 지금 여기서
1번에서 썼고 쭉 긋고
2번에 썼고 3번에 썼고
이렇게 아 그 이제 다시
재활용하니까 4번에서 다시
재활용하고 있고
이거를 진짜 손으로 다 트래킹하면서
클리퍼를 짰던 기억이 있어요
이제
그래서
결과적으로는 하드웨어 자체가
뻑이 나는 문제를 소프트웨어로 고쳤고
성공적으로 게임을 냈죠
그리고 재밌는거는
이게 저희만의 문제는 아니었을거라고 생각을 해요
그 하드웨어여서
이제 릴리스하는 모든
게임은 다 이 짓을 했겠죠
하드웨어 제조사가 라이브를 주진 않았고
나중에 나왈수도 있지만
저희가 이제 초창기에 만들 때는 없었어요
그래서 그런걸 했던 기억이 있어요
그래서 아 이제
아 게임 개발자가 무슨
어셈블리 코딩할 이유가 있나요
라고 얘기할때
있더라구요 있더라구요
PC에서 도는거면은 당연히 좀 덜하겠지만
있더라구요
그래서 그때
약간만 알고 있던 어셈블리를
제대로 이제
해보게 된 계기이기도 한데
재밌는거는 어셈블리 워낙
명령어 자체는 간단하기 때문에
그거를 만드는건 어렵지 않아요
그
원래 한줄 갖고 되야되는 그 코드를 이제
어셈블리하면 50줄이 될수도 있거든요
그럼 그 50줄짜리 코드를 이제
만들면서 중간에 길을 잃지 않게
조심하는게
중요한거죠
그래서 그런 일을 했었고
첫번째 이야기
저번편에 얘기했던
하드웨어 삽질보다는 조금
임팩트가 덜하죠
두번째 이야기
이거는 또
역시
핸드헬드기기 휴대용기기인데
이건 되게
신박했던게 뭐냐면
이때 이 게임을
만들때
어.. 플랫폼
6개용으로 제가 렌더링 엔진을
포팅해줬나 그렇구요 4개인가?
4개에서 6개 사이인데 기억이 잘 안나요
포팅해줄때인데
포팅해줄때인데
포팅해줄때인데
오 이거는
딴거를 먼저 하고
이 기기를 제일 마지막에 받았어요
딱 받았는데
렌더링을 다 준비하고
렌더링 코드 다 만들고 뭐하는데
시간이 걸릴거 아니에요 그러면 막
하고하고 삼각형을 딱 띄웠어
삼각형도 뭐 괜찮아보여 괜찮구나
그리고 이제
정삼각형을 띄웠었거든요
그게 왜 중요한지는
나중에
사각형을 띄웠던거다
사각형을 띄워서 정사각형을 아 괜찮아
좋아좋아 그래서 이제 메쉬 만드는거
다 하고 딱 띄웠어요
띄웠는데
정사각형을 띄울 때는
멀쩡해 보이던게
메쉬를 찍어서 띄우니까 화면이
옆으로 누워있어
옆으로 누워있어
뭐야 이건 내가 뭘 또 잘못한건지
열심히 고민하다가 삼각형을
그려보자
삼각형이 정삼각형이면 이렇게 그려야되잖아요
화면에 찍고 나니까
실제 삼각형으로 바꾸니까
옆으로 누워있어 옆으로
이것도 이게 뭐지
게임은 이렇게 잡고 하는건데
이렇게 보고 하라는건가
이런 고민을 하다가 문서를 좀 더 자세히
뒤졌어요 정확히 얘네가 어떻게 되는건지
어 근데
이유를 찾았는데
이유가 정말 신박했어요
이유가 보통
기기를 이렇게 들고 있으면 X가
좌우로 가죠 Y가 위아래로
가죠 이 기기는
X가 위아래로 가
Y가 좌우로 가
보면서
얘네들은 뭐한거지
왜 이딴걸 만든거지라고 고민을 할 수 밖에
없었죠
그래서 그냥 열심히
고민하다가 든 생각은 원래는 얘네가
오락기를 길게
만들려고 했던게 아닐까라는 생각을 했어요
그러면 XY가 되고
이렇게 오락을 하려고 했는데
나중에 무슨 이유에선지
아 옆으로 가는게 훨씬 좋은거 같애
옆으로 바꿨던거 같아요
그런데 그 상황에서
이제 하드웨어 자체는 이미 XY로
스펙이 나왔을거 아니에요 화면 크기가
뭐 아니면 API나
SDK를 그렇게 만들었거나
그거를 유지하는걸로 그냥 갔던거 같아요
그래서 이미 다른
플랫폼에서는 모두 다 간단하게
이제 X가 좌우
Y가 위아래 이렇게 해갖고 모든걸
그리고 있었는데 이 플랫폼 하나 때문에
X를 여기 Y를
이렇게 할 수는 없잖아요
그래서 마지막에 모든거 다
그려두고
화면을 그리기 전에 한번 회전을 시키는
코드를 넣었어요
풀 이미지 갔다가 다시 한번 그리는
그런 패스를 넣을 수 밖에 없었죠
이 기계가 그때
작업했던 기계중에 가장 느린 기계였어요
GPU도 가장
딸리는 기계였고 그럼에도 불구하고
그 하드웨어에
삽질을 막기위해 그럴 수 밖에
없었고
그 뒤에 이제
그래서
시간상으로 제가 볼때는 한 1밀리
2밀리 정도의
1밀리 세컨드 2밀리 세컨드
정도의 이제 성능 저하는
있었지만 뭐 어쩔 수 없죠 뭐
그렇지 않고
이거 기준으로 만들고 다른거를 고치기엔
너무 일이 많아지고 그것도 올바른 방법도
아닌거 같고
그래서
그랬던 기억이 있어요
뭐 이외에 또
지금 말한 하드웨어
자체에 이제 또
다른 문제도 있었어요 사실은
이 하드웨어는 제가 보면서
아 이거 참
주먹국으로
만들었구나라는 생각을 한 하드웨어였는데
그걸 이제 뭐라고 어떤건지
말할 수는 없고
그럼 이제 자꾸만 이렇게 하드웨어가
왜 이 꼴이 나느냐
이제 라는 얘기를 해야되요
사실은 그죠
그럼 일단
이 꼴이 안나는 하드웨어가 어떤건지는
말씀을 드릴수 있어요 이제 게임
하드웨어 중에
마소의 엑스박스는 제가 말했던
그중에 아무것도 없었어요 여태까지
그럼 이 차이가 뭐냐를
저는 되게 열심히 고민을 했거든요
뭐 cpu 아키텍처가
틀리냐 뭐 틀릴수도 있고
같을수도 있죠
근데 결과적으로 차이는
뭐였냐면은
제가 이제 동료한테 들은 얘긴데
마이크로소프트는
기반 자체가 소프트웨어 개발로
시작한 회사에요
그래서 무슨 짓을 하고 무슨
이제 하드웨어를 만들던간에
다른 하드웨어 제조사에 비해
소프트웨어 이제 지원이 굉장히
잘되있어요 그리고 개발자들이
어떻게 개발을 하고
어떤 이제 일반적인 컨벤션이고
상식이고 개발자들한테
그런걸 이해를 잘해요
그래서 뭐 xy 좌표를
잡는거라던가 예전에
제가 말했던 3d 좌표 잡는거라던가
이런거에서 고민을 많이하고
잘하는거 같고 실제
라이브러리 서포트도 좋고 디버그 툴도
보통 게임이래 처음
콘솔이 나올 때 같이 나와요
다른 하드웨어 제조사는 콘솔이
처음 나올 때 디버그 툴 같은거 잘 없구요
한 6개월 뒤부터 나오기 시작을 해요
그래서 마소는
확실하게 그게 잘되있는
회사고 그 외에
다른 이제 콘솔 개발사 중에서
아니면 게임
하드웨어 개발사 중에서
정작 소프트웨어 개발 자체가
중심이 되고 있는 회사는 많지 않아요
이 사람들은 예전부터 이제
하드웨어를 열심히 잘 만든
사람들이에요 그러면 하드웨어를
만들 때 하드웨어 이제 성능을 높일
수 있는 굉장히 많은 노하우가
있고 그걸 이제 하드웨어를 잘
제작을 할 수 있고 하드웨어 엔지니어죠
사실은 소프트웨어 엔지니어가
아니라 그리고 소프트웨어 엔지니어들도
별로 없고 그 회사에서
그럼 걔네들이 주는 API는
일단 되게
C 스타일의
API를 훨씬 많이 줘요
마이크로소프트는 C 스타일도
있지만 C++ 스타일도 되게
많이 주고 이런 반면에
그냥 다른 하드웨어
제조사들은 보통 그냥
C 스타일의 무조건 포인터로
바르는 그런 이제
API를 많이 주기도 하고
하드웨어에서 정말 막
내가 알지 않아도 되는 하드웨어들
충분히 중간 단계에서 성능
저하 안하고 API로
함수 이제 시그네처로 멋있게
만들 수 있는 함수조차도 하드웨어를
던져줘요 그냥 디버거
툴도 잘 없고 디버거 툴에도
쓸데없는 것들 이제 한눈에 딱 보일 수 있게
리포트를 뽑아주는 게 아니라 자 이게
모든 시그널이야 그리고 시그널
천 개 주고 아니 천 개 내가 보면서
야 이거 뭐 해야 되지 이런 고민하고
그래서
그런 차이인 것 같아요 그래서 뭐
소프트웨어 개발자
입장에선 당연히 개발하기 쉬운
플랫폼이 저야 좋죠
근데
뭐 요즘은 그렇진 않지만
예전처럼 어느 하드웨어로
가느냐에 따라 성능 차이가 뭐
엄청나고 그 성능 차이 저하되는 게
게임을 못할 정도의 문제였다면
뭐 하드웨어 제조사님들한테
맞습니다 하고 가야 되는 게 맞고
그리고
이제는 이제 마소가
사실은 게임 업계를 뛰어들고 게임
콘솔기를 뛰어들고 이 많은 걸 되게
많이 바꿔놨어요 그래서
마소가 정말 게임 업계에서 바꾼 게 뭐가
있냐면 예전에는
사람들이 말도 안 되는 그런
아이디 썼어요 막 정말
사용하기 불편하고 디버깅 되게 구리고
이런 것들 썼는데 이제는
이제 마소가
비주얼 스튜디오로 완벽하게 밀기 시작했고
게임 쪽에서 나중에
원래 코드모 에디팅은
비주얼 스튜디오에서 해도
이제 디버거
디버깅 자체는 다른 아이디에서 했던 경우도 많은데
이제는 웬만한 콘솔 회사들이
다 비주얼 스튜디오에서
디버깅이 되게 바꿔버렸어요
그만큼 이제
아 이런 개발 툴에 조음이 얼마
아니 개발 툴에 따라 얼마나 성능
퍼포먼스라고 하죠 성능이 아니라
저희들 퍼포먼스가 차이가 나고
얼마나 게임을 빠르게 만들 수 있는지가
증명이 됐기 때문에
그리고 뭐 게임도 더 복잡해졌고
이제 많이 따라갔어요 그런 식으로
그리고 예전에는 뭐 GPU 툴이라던가
이런 것도 거의 없던 콘솔들에서
쓸 수 있는 툴들이 나오고 있고
그거 이제 처음 나올 때부터 만들려고
노력을 좀 더 하고
그런 것들을 보면서
아 그리고 또 이제
예전 같은 경우는
콘솔용으로 게임이 개발을 하면은
PC에서는 못 돌렸거든요
요즘은 다 이제 PC에서 돌릴 수 있게
점점 나오고 있죠
예를 들어서 개발을 뭐 예를 들죠
닌텐도 스위치용으로 개발을 하고 있다
그러면 닌텐도 스위치
콘솔에서 당연히 돌려야 되지만
개발 킷에서 PC에서
돌려보면서 테스트 가능하게
뭐 이런 식의 개념도 많이 나오고 있고요
그래서 뭐 마소가 이제
들어와서 이제 생태계를 많이
변화시켜준 것도 좋고
그리고 마소는 아니지만
CLANG 있죠 CLANG이라고 하는 그
LLVM 기반의 컴파일러
그것도 이제 많이 들어와서
그게 들어왔기 때문에
사실은 또 비주얼 스튜디오 쪽으로
옮길 수 있는 것도 있었어요
다른 플랫폼들도
뭐 오늘은 또 버그
이야기의 일환으로 삽질했던 거를
또 얘기를 했네요
특정 지조사를 얘기 안 했으니까
욕먹을 일은 없겠지
이런 일도 많아요 새로운 콘솔 잡을 때마다
굉장히 신기한 것들 많아요
예 포프였습니다
