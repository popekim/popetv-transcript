예 안녕하세요 포프입니다
오늘은 그..
뭐라하지?
이넘이라고 그러나요?
열거형?
이뉴머레이터?
이넘?
이뉴머레이터는 아니고
프로그래밍 언어 중에
이넘이라는 타입이 있는게 있어요
이넘 그넘 이넘이 아니라
뭐라그러지?
열거형이 맞을거에요
열거형이 있는 타입이 있는 언어가 있고
그 타입이 없는 언어가 있죠
그래서
굉장히 많은 스크립트 언어들이 없는 것 같고
사실은 형이 있는 언어들은 꽤 많은 것 같고
이런 생각이 들어요
뭐 이넘이 뭔지는 다들 알테니까
제가 자세히 설명할 필요는 없을 것 같고
뭐 그냥
아주 간단하게 설명하면 이넘은
정수인데 사실은
프로그래밍 중에 이제
보통
매직넘버 쓰지 말라 그러잖아요
그래서 그런식으로 이름을 대입할 수 있는
방식이 되기도 하고
그거보다 더 중요한거는
몇가지 선택할 수 있는 옵션이 있는 경우가 있잖아요
예를 들면 뭐 방향이라고 그러면
동서남북 4개밖에 없다고 가정하면은
North, South, East, West
이거 4개잖아요
그럼 그거를
이넘이란 형식에 정해주고
그 넷 중에 하나만 쓸게 강제하는
그런 뭐라그럴까
그런
역할을 하는거죠
선택할 수 있는 옵션 중에 하나
이런 개념으로 이넘을 쓰는게
정상적인 사용법이고
그런게 생각보다 프로그래밍에서 쓸 경우가 꽤 많아요
근데 이제
그걸 한 단계 더 넘어가서
이넘을
어차피 숫자형이니까
비트플렉으로 써가지고
비트플렉 이넘을 쓰게 해주는 언어들도 있어요
그리고 실제 그런 언어에서
지원하는거 보면은
이넘에서 해갖고
이넘이 플렉에 설정이 됐냐
라고 볼 수 있게까지 해주는 것도 있죠
C#쪽이 좀 그런거에 가까운데
뭐
어찌 보면
되게 편한게 있는거고 어찌 보면은
코드만 보고서는
이넘 타입형만 보고서는
약간 실수를 할 수 있는 부분이라서
이런 코딩 스탠다드가 좀 잘 들어와야만
가능한 부분이고
근데
그게 아니라
이넘은 좋은거에요
전 되게 좋다고 생각을 해요
근데 이넘이 없는 언어들이 있어요
저는 왜 굳이 안 넣었을까 하는 생각을 많이 하는데
대표적인 예를 내가 언어를 하나 찍어서 얘기하면 그렇고
스크립트 언어 중에 그런게 있는데
이넘이 없을 경우에
얘네들은 어떻게 아냐
그러면 그냥 숫자로 써서 쓴다거나 01234
아니면은
스크립트를 써서 써요
스트링하면 아까 말했듯이
이스트, 웨스트, 노스, 사우스 이런식으로
근데 이게 좀 되게 애매한게
이런 스트링으로 써서 하는 것 자체가
컴파일 시에 강제가 안되잖아요
제가 예를 들어서 웨스트를 썼는데
한쪽에서는 소문자로 떠벌려 쓰고
한쪽에서는 대문자로 떠벌려 쓴다거나
아니면
타이포를 만들어서 오타를 만들어서
캐릭터 하나가 틀려진다거나
하면은 솔직히 컴파일 도중에
이넘이 있었다면 잡아줄 수 있는
그런 여러가지 문제점들이잖아요
이상하더라고
근데 그게 없기 때문에 스트링 비교를 하다가
나는 웨스트하고 웨스트를 비교했는데 달라
왜냐면 하나는 대문자고 하나는 소문자니까
이러고 넘어가게 되거나 이런 단점들이 있죠
그래서 저는
똑같은 얘기가 이넘이 있는
언어에서도 나오는 문제에요
특히 사람들이 스트링을
패스하기 시작하면서 이걸로 어떤
아이덴티파이어 같이 쓰려고 한다거나
그런 경우에는
문제가 생기죠
그런 경우에는 반드시
이넘을 쓰라고 권해주고 싶고요
이넘은 스트링보다 당연히
먼저 써야 되는 거고
이넘이 여기서 얘기가 끝나면
비디오가 짧아지니까
이 이넘이 이제
제이썬으로 갈 때 어떻게 되냐
이런 문제도 있어요
왜냐면 제가 아까 말했듯이 이넘은
웬만한 언어에서는 기본적으로
숫자에요 인테리어기 때문에
그래서 예를 들어서 C#에서
이넘 타입으로
프로퍼티를 하나 만들어두고
그거를 제이썬 닷넷으로
시리얼라이즈를 해버리면은
기본 동작이
그거를 인테리어로 처리해서
그냥
제이썬 파일에는 숫자로 넣어버려요
그러니까 아까 예를 든
방향에서
north가 0번이었다면은
north를 코드에 썼는데
제이썬 파일로 시리얼라이즈를 해버리면
0이 되버려요 그럼 뭐 저쪽에서도
제이썬을 받아오는 애가
0이 north로 지정이 되어있으면
이게 north로 올라가겠지만
여기에 단점은 이제
제이썬 파일 하나만 보는 것만으로는
이게 뭔 짓인지 알 수가 없다는 거죠
그래서 음
제이썬 닷넷 같은 경우
시리얼라이저 세팅을 바꿀 수가 있어요
이넘을 어떻게 처리할 거냐
그래서 저는 이제
제가 아는
ASP 닷넷 코어
ASP 닷넷
이런 프로젝트에서는
글로벌하게 세팅을 아이젠 오버라이드를 해버려요
이넘은 무조건 스트링으로
쓰고 읽어라 라고
그래서 이넘은 언제나 스트링으로
하고 아니면은 그게 아니라
그 프로퍼티 하나마다
그거를 스트링으로 바꾸고 싶어 하는 사람도 있잖아요
어떤 건 숫자로 놔두고 싶고 이거는
아 뭐 스트링으로 바꾸고 싶다
특정 이넘만
그런 경우에는 그 프로퍼티가 있는 데다가
위에 애트리뷰트로 붙여줘도 돼요
이름이 정확히 뭐였더라
스트링 이넘 컨버터였나 이넘 스트링 컨버터였나
그런 애트리뷰트인데
그걸 달아주면 되죠
그래서 그런
뭐 또 있는데
뭐 콘솔 프로그램이라던가
애플리케이션 프로그램에서
json.net을 써야 된다면
그걸 글로벌하게 세팅을 오버라이드 하는 방법이
있나 모르겠어요 없지 않나 싶은데
.NET이나 .NET Core에서 이렇게
ASP.NET Core에서 하는 분은
이제 자체 저는 웹서버 자체가
json.net을 쓰잖아요
json.serialize, deserialize 할 때
그거 세팅을 바꿔주는 법이 있다는 거죠
그러면 그거를 저는 무조건 바꿔주고요
이 스트링 이넘 컨버터로
그리고 예전에 한번
뭐라 그럴까
에포크 타임
그 UTC를 쓰자라고 했을 때
이제 에포크 타임
그때 제가 에포치라고 얘기했는데
올바른 발음은 에포크래요
에포크 타임을 쓰는 경우에도
이제 json으로 갈 때 어떻게 되는지 얘기한 적이 있었죠
이거는 뭐 어떻게
딱히 표준이라고 할 순 있지만
왜 굳이 이걸 쓸까
제대로 읽기도 어렵고
계산하지 않으면 알 수도 없고
그래서 오히려
국제표준 타입 이소 타입으로 해갖고
쓰는 옵션이 있다고 했죠
그래서 그것도 이제 json 내에서
제가 또 키는 옵션 중에 하나예요
무조건 데이트 타임을 처리하는 거는
이소 타입으로 처리해라
그게 하나
그리고 두 번째가 스트링은 반드시
이넘은 반드시 스트링으로 해라
아 그리고 세 번째가 하나 또 있는 게
null 값이 있을 경우
이 null 값을 이제
json 오브젝트 자체에서 null이라고 쓰게 해주는 옵션이 있고
아니면은 그거를
아예 프로퍼티 자체를 없애버리는 옵션이 있고
저는 프로퍼티 자체를 없애버리는 옵션을 써요
왜냐면 json 파일 중에
자체가 뭐 스키마가 있거나
그런 스트럭처가 있는 언어가
뭐랄까 포맷이라고 할 수가 없잖아요
그럼 없는 거는
없는 게 당연한 거고 있는 건 있는 게 당연한 거고
나중에 스키마가 바뀔 때도
자유자재로 추가하고 삭제하기 위해 있는 거라
저는 생각을 하기 때문에
없는 거면 그냥 없어도 상관없다는 생각으로
저는 너를 빼버리고
그 다음에 오는 문제는
참 이거는 참 중구난방인데
케이싱 문제가 있죠
대소문자 문제
그래서 흔히 이제
옛날에 가장 많이 썼던 케이싱이 보통
언더스코어 넣는 거 있잖아요 밑줄 넣는 거
그게 이제 스네이크처럼 생겼다고 해서
스네이크 케이싱이라고 많이 해요
그러면 이제 뭐
두 워드면
두 단어면 첫 단어 다 소문자로 쓰고
밑줄 긋고 두 번째 단어 소문자로 쓰고
이걸 이제 이름으로 썼었죠
그게 이제 스네이크 케이싱이고
그게 최근에 지원하기 시작했어요
json.net에서도 예전에 뭐 json에서도
흔히 썼던 거고 아니면은 이제
이거 언제나 제가 헷갈리는 건데
파스칼 케이싱이
파스칼 케이싱과
카멜 케이싱이 있을 거예요
카멜 케이싱은 아마
첫 워드는 소문자로 시작하고
두 번째 워드는 대문자로 시작하는데
중간에 뭐 다른 특수기호가 없어요
두 워드 사이에 그냥 두 워드가 딱 붙어있고
빈칸도 없고 밑줄도 없이
단 두 번째 워드만 대문자로 시작을 한다고
파스칼 케이싱은
첫 번째 모든 언어가 다 대문자로
시작하는 거죠
그래서 c#쪽을 많이 쓰는 사람은
당연히 파스칼 케이싱을 선호할 거고
그래서 json.net 기본도
파스칼 케이싱이에요
근데 이제 구글 쪽을
이제 그쪽에 이제
레코멘데이션을 따라하시는 분들은
분명히
제 생각에는 카멜 케이싱 쪽이 가까울 거 같고
그리고 이제 제가 어디서
왔는지는 잘 모르겠지만 스네이크 케이싱을
쓴 사람도 있고
그래서 가장 많이 쓰는 게 현재 카멜 케이싱이 아닌가 싶은데
근데 json.net은
카멜 케이싱하고 파스칼 케이싱을
읽어올 때는
어차피 대소문자 차이기 때문에
같이 잘 읽어봐요
아무 문제 없이 읽어봐요
단 이제 이 오브젝트를 json으로 쓸 때
파스칼로 쓰냐
카멜 케이싱 쓰냐 그 문제겠죠
그래서 제가 지금 한 가지 딱 마음에 안 드는 거는
json.net 구현 중에
어차피
이 세 가지 케이싱이 있으면
읽어올 때만큼은
셋 다 다 읽을 수 있게 해주면 되지 않을까
라는 생각을 해요 사실은
카멜이든 파스칼이든 중간에
언더스코가 있든
언더스콘은 그냥 리무브하고
되는 거잖아요
그러면 카멜 케이싱하고 뭐가 크게 다르겠어요
어차피 카멜 케이싱이나 파스칼 케이싱 읽어올 때
대소문자 무시하고 읽어오는 거일 테니까
그래서 읽어올 때만큼은
셋 다 해줄 수 있지 않을까 생각이 들거든요 자동으로
근데 그거를 아직
안 해주고 있다는 게 좀 아쉬운데
아마 뭐 고쳐지겠죠 조만간
근데 이제 json 파일을 쓸 때는
어떤 케이싱을 써야 되는지에 대해서는
아직 아무런 아무런 아무런 협약이 없어요
저 개인적으로는 그냥
파스칼 케이싱을 좀 더 좋아하고
저는 무조건 대문자로 시작한다는 생각을
되게 강하게 갖고 있기 때문에
왜냐면 프로퍼티는 퍼블릭한 거니까
퍼블릭한 거는 일단 대문자로 시작하는 게
되게 강하거든요 저는
그래서 그런
코딩 스탠다드 때문에 파스칼 케이싱 생각하지만
이건 별로 중요한 문제는 아닌 거 같아요
그래서 오늘 이제
했던 얘기는 뭐 스트링보다는
이넘을 쓰라는 얘기였어요 스트링으로
실수를 할 수가 있으니까
근데 이제 이넘을 쓰면서부터
이제 뭐 json 넘어갈 때
스트링으로 바꾸자
그리고 제가 json을
이제 할 때 특히 json 닷넷을 쓸 때
설정하는 게
아까 이넘을 스트링으로 반드시 바꾸는 거
그리고 데이트 타임 오브젝트는
이것도 표준 전혀 없죠 json 쪽에서
뭐 에포크 쓰는데
그거는 예전에 말했듯이 그냥
무조건 저는 이소 포맷으로 해갖고
시간하고 타임 전 둘 다 나온 걸 좋아하기 때문에
그거를 쓰는 게 좋다고 생각을 하고
또 하나가 있었나 그리고 케이싱 문제들
뭐 그런 거 있었고 그리고
널값 처리하는 거 그리고 이 정도인데
뭐 여기까지가 오늘 내용의 전부고
정말 또
뭐랄까 json 닷넷만의
설정일 것 같긴 한데
정말 웃기고 기괴한 세팅이 하나가 또 있어요
타입
그니까 이제 json 파일에 들어가 있으면
이 json이
있는 데이터가 어떤 형인지 전혀 알 수가 없거든요
그 변수형이
그래서 어떤 경우에는 특히 이제
뭐 array 같은 걸 집어넣는데
그 array 안에 들어가는 오브젝트가
형이 다를 수가 있잖아요 왜냐면
상속을 받았기 때문에
이런 경우에는 json을 만들어 놔봐야
얘를 어떤 형으로 읽어야 될지
손수 어떻게 코딩을 짜주거나
아니면 손수 컨버터를 만들어 주지 않는 이상은
조금 어려워요
그래서
이런 경우에 어떻게 하냐라는 고민도 되게 많은데
제가
저는 개인적으로 안 쓰는 옵션이고
옛날에 썼는데 이제 안 써요 좀
내부의 형이 드러나는 게 싫어서
그 형을 같이 저장할 수 있는 방법이 있어요
json 닷넷에서
serialize 할 때
그러면 실제 그 각 섹션마다
이게 어떤 형인지가 나오거든요
그럼 json 닷이 그거를 읽고
serialize 할 때 그거 형으로
serialize 해갖고 array에 넣어주거나
그래요 그래서 만약에
다형성이 필요한 사람들
중에
그런 내부의 형이 밖으로 드러나는 게
크게 꺼림직하지 않은 사람들은
해도 상관이
없을 것 같은데
저는 개인적으로 내부에 쓰는
형이라던가 내부에 쓰는 데이터 타입
내부에 쓰는 api
내부에 쓰는 id 기타 등등이 외부에
드러나면은 뭐라 그럴까
음
보안에
아주 중요한 문제는 아닌데
보안적으로 안 좋다고
생각을 해요 그게 실제
oasp 예전에 얘기했던
10개 보안
지켜야 되는 거 oasp top 10에
봐도 내부에 있는 데이터의
정보를 알려주지 말라 그러거든요
왜냐하면 그 정보를 보고 나서
여러 가지 방법이 있는데
이 데이터가
이제 어떤지 어떤 형식으로
만들어지는지 guess를 할 수도 있고
아니면은 그런
뭐
뭐랄까 이런
서비스에 만약에 운 좋게 뭐 운 좋게
라는 거 없지만 접근해서 뭔가를
훔쳤을 때 그거를 좀 더 빨리 파악할 수 있는
방법이 될 수도 있고 뭐 기타
여러 가지 이런 추측을 할 수 있는
그런 아이디어를 준다는 거죠 그에 비해
그런 게 전혀 없으면
궁금해하지도 않잖아요 일단 주어진
떡밥이 없으니까 그래서 오히려
떡밥이 더 많은 다른 웹사이트로
가게 해준다는 그런 장점도
있는 거 같은데 그래서 개인적으로는
그런 뭐라 그럴까
타입이 드러나는 걸 좋아하지 않아요
오히려 그것보다는
만약에
json 란드에서
그냥 타입을 직접 노출하는 게 아니라
타입 맵핑을 노출할 수 있다면
그러니까 예를 들어서 내가
이제 실제 이 코드에
쓰는 타입은 이건데 그
타입의 이름을 그대로 가져다 쓰는 게 아니라
그 타입을
뭐 예를 들어서 뭐
뭐 글루와 닷 어쩌구 닷
저쩌구 저쩌구 저쩌구 닷
뭐 유저 이렇게 되어있는
타입이라면 앞에 거 다 띄고
그냥 아 유저라는 거는
유저라고 불렀으면 좋겠어
그니까 이제 제가 이름을 뭐 쇼튼한
그런 이름을 이제 맵핑을 해주는 거죠 그게 이제
클래스 위에다가 애트리뷰트를
달 수도 있을 거고 그런 식으로
달아서 차라리 그 타입이 들어가고 그 타입을
읽어갖고 거기서
추론해갖고 읽어올 수 있다면 그거는 좀
써볼만 할 거 같아요 근데
지금 말하고 나니까 그런 게 이미 있지 않을까
라는 생각도 갑자기 들었어요 그래서 한번
비디오를 녹화를 마치고 뭐 확인을
해봐야겠는데 그게 있다면은
저희가 이제 다형성 때문에
겪었던 그런 제이썬
그 시리얼라이즈 하는 거에 대한 문제를
많이 극복을 할 수 있겠죠 그래서
그렇게 된다면
그냥 뭐 지금처럼
이거 해결하기 위해서 좀 이상한 꼼수를 쓰는데
그런 짓을 안 하고 할 수 있지 않을까
그런 생각도 지금 드네요 음
그래서 비디오 끄고 확인해봐야겠다
그래서 오늘은
한 3분 전까지가
하고 싶었던 말이었던 거 같고
그 뒤에 3분은 또 헛소리 했고
예 보표였습니다
