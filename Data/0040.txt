예, 안녕하세요. 포프입니다.

아, 오늘은 그... 또 그래픽하시는 분들이나 아티스트 분들은 좀 많이 들었을 거예요. 작년 즈음에 그 physically based 랜더링이라고 하나, 그 physically based 쉐이딩이라고 하나... 물리, 한국말로 정확히 뭔진 모르겠어요. 물리학에 기초한 랜더링? 물리기반현상 rendering? 쉐이딩?

이 얘기를 왜 그러냐면은 사실, 이게 어떤 의미에서는 좀 작년, 재작년에 이제 콜오브듀티 팀에서 “좀 더 사실 현상하고 비슷하게 조명 효과를 줘야 하지 않겠냐. 그러려면 각 표면에 물성이라고 하나요, 그런 거에 따라 조명이 달라지게 된다”라는 얘기를 했어요.

근데 결과적으로 physically based rendering에서 얘기하는 거는 두 가지가 돼요.

첫번째는, 여태까지 그 전에 저희가 써오던 조명 효과에서는 에너지 보존 법칙을 좀 무시했었어요. 그 이유가 계산하려면 CPU, GPU 성능이 더 많이 드니까 적당히 무시하고 산 건데, 이제는 CPU, GPU 성능의 향상이 됐으니까 그 정도는 처리할 수 있다.

그래서 이제 에너지 보존 법칙을 적용을 한 게 첫번째고, 제가 physically based lighting에서 가장 중요시하게 여기는 거는 에너지 보존법칙이에요, 사실은.

그 뒤 두번째는, 각 표면마다 성질이 다르잖아요. 그게 뭐가 다른 거냐면 울퉁불퉁한 상질도 다르고, 그 안에 흡수하는 것도 좀 다르고, 흡수했다가 그 밑에... 그니까 사실 물건이라는 게 여러가지 이렇게 layer로 적용이 되는 거거든요. 빛이 투과했다가 밑에서 반사해서 나오는 것도 있고요. 이제 sub-surface scattering이라고 하는데, SSS라고 줄여서 말하기도 하고. 이제 그런 것들을 좀 더 사실적으로 해보자라는 게 전부예요.

그래서 뭐, 그렇다고 예전에 하던 게 물리적으로 올바르지 않은 거냐? 그건 아니죠. 그것도 물리적으로 어느 정도까지는 옳았죠. 근데 이제 그거를 좀 더 옳게 만들자라고 해서 나온 건데, 개인적으로는 뭐 나쁜 방향은 아니라고 생각을 해요.

그런데 이제 그런 용어가 나올 때마다 이게 워낙 좀 마케팅 용어라고 하나요? 그 유행어! 그 유행어가 돼서 이제 “오, 이거 나 해야되나보다” 하고 우르르 몰렸다가, 결국은 우르르 빠지게 되는 경우도 있어서 그런 걸로 좀 걱정을 하는 거죠. 첫번째가 그거 걱정이고, 좀 마케팅용으로 많이 쓴다는 점.

두 번째가, 이제 이런 부분들이 대부분 이제 programmer들, 저희 같은 그래픽 프로그래머가 앞서서 이렇게 주창하는 거기 때문에 아티스트가 따라오기는 좀 문제가 있는 경우도 있어서 그런 것도 좀 걱정이 되는 거고. 해서 일단 아티스트 문제부터 이야기를 좀 먼저 해볼게요.

뭐냐면, 제가 옛날에 우버쉐이더 얘기할 때도 잠깐 말씀을 드렸을 거예요. 우버쉐이더가 개념도 좋고 모든 현상이 좋은데, 결과적으로 아티스트가 그대로 이용하기에는 뭔가 제한점이 있었다.

그 이유가 된 게, 우리는 프로그래머가 볼 때는 “어, 이거는 이렇게 이렇게 작동하는 거고, 그 수학적으로 이렇게 하니까 응, 이게 맞네” 하고 딱 이해를 해요. 근데 아티스트는 실제 그렇게 이해를 잘 못하죠. 이 사람들은 '보고' 이해를 하는 사람들이에요. 그래서 이게 봐서 이해가 되면 이해가 되는 건데.

그런 의미에서 잠깐 다른 얘기지만, 포토샵의 예를 들어볼게요.

이제 포토샾 보면 거기에 블랜딩 모드라고 있잖아요, 혼합모드. 그게 사실은 수학적으로는 그다지 옳지는 않아요. 어떤 의미에서는.

그 이유, 가장 큰 이유는 일단 포토샵 블랜딩 모드를 적용할 때는 감마 space에서 적용을 해요. 사실은 선형스페이스(linier space)에서 적용을 해야만 수학적으로 맞는 계산이 나오는 건데, 이거는 옛날부터 그냥 그렇게 해왔고 아티스트들이 이미 그렇게 기대를 하고 쓰기 때문에 자기가 원하는 결과, 대충 화면에 있는 퍼센트 조절해서 만들 수 있다는 것. 보면서 만들 수 있으면 아티스트는 상관이 없다는 거죠.

포토샵이 과연 그거를 고칠까, 올바르게? 그럴 것 같지는 않아요. 그렇게 고쳤다가는 여태까지 만들어 왔던 게 다 날라가니까.

그래서 그 우버쉐이더도 그런 면이 강했구요. 사실은 UI 쪽에서 아티스트가 이해할 수 있는 UI를 주고, 보면서 곧바로 피드백 받을 수 있는 방법을 주면 아티스트는 어떤 툴이라도 사용을 해요.

근데 지금 현재 physically based rendering 쪽에서 제가 조금 한가지 아쉬운 점은, 언제나 그런 얘기를 해요. 그런 프로그램들을 발표할 때, 아 이게 그런 걸 딱 보여주죠. 왼쪽에는 실제 세상에서 찍은 사진, 오른쪽에는 그거를 모델링해서 실제 physically based rendering을 써서 보여주는 사진. 얼마나 비슷하냐, 이거를 보여주는데.

솔직히 이 값을 가지기까지 조절해야 되는 패러미터가 좀 되게 까다롭게 조금 있어요. 아, 물론 데이터베이스화해서 쓰는 경우도 있긴 하지만. 근데 결과적으로는 이 tweaking을 아티스트가 어떻게 쉽게 할 수 있냐, 그 차이거든요.

이제 그거를 뭐 저희는 흔히들 보통 가장 많이 쓰는 언어가 요즘 뭐, 거칠기. 표면 거칠기, 표면의 거칠음은 이 정도가 되니까 이렇게 조절하면 이렇게 된다. 표면의 거칠기를 뭐 0에서 100%로 얘기를 하면, 0은 뭐고 100%는 뭐야?

뭐 0은 거울이겠죠. 거울이나 뭐 유리 이런 거. 반짝반짝한 거, 스무스한 거. 그건 이해가 돼요. 그럼 100%는 어디까지 100%인가? 그럼 50%는 뭐지? 이런 문제가 생기는 거죠.

이제 그게 최근에 들어서는 데이터베이스화를 시켜서, “이거는 무슨 나무재질, 이거는 무슨 재질” 이렇게 골라 쓸 수 있게 하는 것들을 보긴 봤구요. 근데 아직까지 제가 볼 때는 모든 강연을 봐도 언제나 그런 얘기를 해요. 아티스트들한테 교육을 시킨다. 우리는 그래서 이게 현실하고 비슷하고, 이렇게 했을 때 모든 조명효과에서 정말 원하는 효과가 나올 수 있게 해줄 수가 있다. 이런 얘기들을 하는데.

지금 상황까지 봐서는 결국에는 그 길로 가긴 갈 것 같아요. 왠만한 게임들이 어차피 이미 GPU도 그 정도 성능을 자랑하고, 그렇게 나쁜 건 아니니까. 근데 이게 정말 아티스트가 쉽게 쓸 수 있는 툴이 될 수 있는지는 아직은 의문이에요.

아직 그런 툴을 제가 본 적이 없고, physically based 하는 그런 스튜디오를 벌써 몇 군데를 봤는데 아직까지 아티스트들이 편하게 정말 부담 없이 쓸 수 있는 그런 툴은 제가 못 봤어요. 해서 내부적으로는 올바른 건데, 툴 쪽으로는 아무래도 좀 더 발전해야 되는 것 같고.

이런 얘기는 말 그대로 조명 효과가 계속 바뀌는 게임이라던가, 아... 정말 사실성 추구하는 게임. 이런 쪽에선 정말 physically based rendering 쪽이 주목을 받을 수밖에 없다고 봐요. 가면 갈수록. 근데 툴 작업은 더 필요하다는 게 일단 제 주장이고.

두 번째는, 대부분의 한국 게임들이 사실은 사실적인 게 아니잖아요. 약간 cartoonish한 그런 게임인데, 그런 게임에도 physically based rendering이 도움 되는 건 있어요. 아까 말씀드렸듯이 어느 조명환경이 있어도 대충 추측을 할 수 있다. 왜냐면 현실에서 우리가 봐오던 것이니까.

근데 또 하나의 문제는, 여기서 아티스트가 현실에서 보는 것을 그대로 인지하고 그거를 자기 아트스타일로 만드느냐의 그 차이는 또 있어요. 왜냐면 대부분의 아티스트들이 요즘은 영화를 보고 그거를 현실이라고 믿어요. 사실 영화하고 현실은 전혀 다른 거죠. 실제 비주얼상에서 조명효과도 영화하고 현실은 확실히 다르거든요.

그래서 그거를 이미 현실을 이해하고 있는 사람들도 많아요. 어떤 의미에선 그것도 문제가 되고. 결국엔 연출의 문제라는 건데, 약간 cartoonish한 거에서 과연 physically rendering이 얼마나 적용될지는 음... 100%는 아니죠. 그래도 어느 정도까지는 될 거라고 보는데.

과연 그렇게 사용하기 어려운 툴하고 패러미터를 쓰면서까지 아티스트들의 headache, 두통을 늘리면서까지 과연 그럴 필요가 있는지 아직은 좀 의심스럽고.

그리고 어떤 경우엔 아티스트도 그런 경우 있잖아요. 게임에서 하다가 이거 너무 뭐 emissive light가 너무 약하다, 그냥 곱하기 5로 해버리자. 오, 곱하기로 했는데 잘 보이면 아, 그대로 가자.

가끔 이렇게 그래픽 프로그래머나 저의 입장에서 볼 때는 “아, 그건 말도 안되는 수학이라서 뭐 어쩌구 저쩌구 저쩌구” 이런 얘기를 하죠. 뭐 그런 게 전혀 틀린 말은 아니에요. 근데 정말 아티스트의 확실한 비쥬얼 디렉션이 있으면, 그런 수학을 다 무시하고 나서까지도 게임을 만드는 건 나쁘지 않은 것 같아요.

그 대표적인 예가, 다들 physically rendering 한다고 다 난리쳤을 때, 그리고 실제 SIGGRPAH 강연에서도 막 콜오브듀티팀이 나와서 “우리는 이렇게 했다”라고 했는데, 그 강연에서 한 번 그 that game company라고, Flower하고 Journey 만든 회사 있잖아요.

거기서 이제 Journey에서 들어간 그 모래... 사막? 사막에 있는 모래산 같은 거. 거기서 빛이 반짝반짝하게 들어가는 그 모래 효과가 있거든요. 그거를 자기네들이 랜더링을 어떻게 했는지 설명을 했는데.

아직도 그 어디에 강연자료 있어요. 제가 봐가지고 링크 걸어드릴게요. 그거 보시면 기겁하실 거예요. 수학적으로 아무 대책 없이 말 그대로 “어, 여기에 곱하기 5, 여기에 뭐 이렇게 하니까 우리가 원하는 비쥬얼이 나왔다. 그래서 썼다.” 그게 전부예요.

왜냐면 이 게임이 그게 됐던 이유가, 일단은 다이내믹 라이팅이 없었어요. 조명적으로 이렇게 바뀌는 조명이. 그래서 언제나 이 장면에서는 이렇게 해는 저쪽에 있고, 연출이 이렇게 돼서 언제나 뭐 반사가 이렇게 들어와야 되는 이런 것들.

그런 아티스트적인 디렉션이 뚜렷했기 때문에, 그거를 만들기 위해서 그냥 범용적이고 일반적인 조명 시스템을 만드는 것보다 정말 자기 게임에만 적용되는 그런 조명 시스템을 만든 거죠.

그리고 뭐 다른 얘기까지 해드리면은, 스페이스마린 경우에서도 그런 식으로 무비에서 연출한 듯한 그런 조명 기법, fill light라고 해서 인위적으로 뭐 뒤쪽에서 빛 쏴주는 거랑 위에서 빛 쏴주는 거, 이런 것도 했고요.

저희 게임뿐만이 아니라 뭐 이제 히트맨 같은 경우도 그런 걸 했고, 심지어 툼레이더까지 그런 거 좀 했었어요.

그래서 결과적으로는 아티스트들이 쉽게 사용할 수 있고, 쉽게 연출할 수 있는 툴이 가장 중요한 거예요.

그리고 physically based rendering는 말 그대로, 그러나 아티스트들이 제약이 왔을 때 그거로 좀 더 높게... 어 뭐라 그러죠? 더욱 뛰어난 비주얼을 만들 수 있는 툴이 돼야 되는데.

그런 physically based rendering이 정말 그런 좋은 툴이 되는 게임은 있어요. 근데 대부분은 사실적인 그런 비주얼을 추구하는 게임에서 더 많죠.

근데 현재로서는 정말 필요에 의해서 그거를 쓰는 사람들보다는, 순간적으로 “이게 새로운 거니까, 오 좋다”라고 해서 일찍 뛰어드시는 분들도 아직은 좀 많아서. 그래서 그건 그냥 우려의 마음에서 한 이야기고요.

결과적으로는 누군가는 그런 뛰어난 툴을 만들 거예요. 그거를 정말 제대로 확실하게 이용할 수 있는, 이제 그 데이터베이스 기법도 그런 거였고. 그게 발전이 되면은 다들, 컴퓨터가 또 뛰어나지고, 뭐 모바일도 좀 더 파워가 강해지고 이러면 다들 그쪽으로 넘어가긴 갈 거예요. 가면 갈수록.

그보다는 좀 더 툴 쪽이나 UI 쪽에서 초점을 맞추면 좋겠다는 생각을 하고요. 그러기 위해서는 프로그래머만이 아니라 테크아티스트라던가 실제 아트 만드시는 배경 아티스트분들까지도 포함해서 계속 고민하면서 뭔가 툴로 만들어야겠죠.

제가 아직 그거를 뭐 만들 기회가 없어서 딱히 그런 고민을 해본 적은 없어요. 한동안 만들지도 않을 것 같고.

아, 그리고 마지막으로 또 한 가지 말씀드리고 싶은 거는. 현재 나와있는, 이제 처음에 나왔던 physically based rendering은 보통 “아, 이건 나무니까 이 정도 거칠기에 이 정도 흡수를 합니다. 오늘 콘크리트니까 이 정도 거칠기에 이 정도 흡수를 합니다” 이런 식으로, 그런 패러미터를 한 가지만 줬어요.

근데 사실 현존하는 상당히 많은 물체들이 여러가지 레이어로 이뤄져 있거든요. 심지어는 나무로 된 식탁만 보시더라도, 나무가 있지만 그 밑에는, 그 위에는 그런 코팅 같은 거 입히잖아요. 그래서 거기서 실제 빛이 반사되는 게 있고, 들어갔다가 밑에서만 해서 올라오는 게 있고, 나무에서 아예 흡수되는 게 있고.

그런 식의 개념이 들면서 점점... 아... 즉, 그전에 처음에 만들었던 한 가지 물질의 한 가지 속성만 대입하는 방법으로는 좀 불가능해요.

뭐 또 다른 예로는 이제 그 marble... 대리석! 대리석 같은 경우도 그런 경우예요. 그게 사실은 보면은 대리석은 돌 하나지만, 그 안에 있는 그 뭐라죠, 구성성분은 여러 개라서 반사도 다르고 거칠기도 다르고.

이런 것들이 사실은 조금씩 조금씩 힘들어지는 부분이거든요. 왜냐면은 이미 지금 저희가 쓰려고 했던 physically based writing 공식만으로도 이미 GPU 한계가 오긴 와요. 뭐 하느냐에 따라 조금씩 다르지만.

근데 거기다가 레이어를 몇 개를 겹치려면, 두 개만 거치면 일단은 성능은 두 배로 떨어지는 거라고 보면 맞고요. 거기다가 레이어가 세 개라면은, 여러가지 세 가지 레이어가 있는 물체도 있잖아요. 샌드위치, 아이스크림, 샌드위치... 이런 거... 그건 아닌가? 뭐 그런 거에서 문제가 생기는 거죠.

tri-ace라는 회사인가? 일본의 그런 회사에서는 그런 식으로 하는 SIGGRAPH 발표를 했었어요. 사실은 자기는 레이어를 구성하고 physically based rendering을 전부 완벽히 쓰는 대신에, 약간 그보다 덜 physically based 한 거. 그러니까 좀 옛날 기법들.

oren-nayar도 썼던 것 같아요. 저 스페이스 마린에서 썼던 것들. 제 얘기는 tri-ace에서 oren-nayar로 조명을 했던 것 같아요. 그 이제 제가 스페이스마린 xbox360에서 출시할 때 썼던 거죠.

아, 그래서 제가 생각하는 physically base는, 그것보다는 layer를 겹친 방식으로 좀 더 갈 것 같고. 지금 당장에는 레이어를 겹치는 방법으로 가려면은 physically based rendering을 정말 뭐 저희가 원하는 정도까지, 그 정도 공식으로 못 돌리고요.

그리고 나중에 GPU가 더 발전되면은 당연히 그거는 뭐 그 정도까지 올라가는 거는 사실이고. 제일 중요한 것은 아티스트가 쉽게 쓸 수 있는 툴이 필요하다는 거예요. 그게 없으면은 아티스트들이 쓰기 싫어하는 그런 기법이 되어가면서, 정말 말 그대로 사실적인 것들. 사실적인 게임만 딱 그걸 쓰게 되고, 나머지들은 그냥 아티스트들이 옛날에 쓰던 방식대로 “그냥 곱하기 5 해요” 이런 식으로 갈 수 있다는 이야기에요.

그 정도로 그냥 제 우려 섞인 이야기를 했구요. 뭐, 분명히 반론 가지신 분들도 많을 거예요. 근데 뭐, 제가 physically based rendering 자체가 아예 나쁘다는 이야기보다는, 툴 작업이 좀 더 우선돼야 한다. 지금 그 이야기를 한 것뿐이니까.

악플 달리면 뭐 또 악플을... 뭐 감사히 받아야죠 ^^; 그럴려고 하는 건데.

예... 포프였습니다.
