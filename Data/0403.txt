예 안녕하세요 포프입니다
음 전에 버그 비디오 만들었는데
굉장히 재밌어하고 좋아하셨어..
쒀.. 쒀.. 좋아하신 분들이
많아요
하셨어.. 하셨었더라구요 오늘
오늘 혀가 이상해 뭔가 추운가
집에? 물 좀 마시고
그래서 버그 관련 비디오를 하나 더
만들려 그래요
사실 여태까지 제가
게임 만들면서 고친 버그가 천 개를 넘으면
천 개를 넘었지 그 이하는
아닐 것 같거든요
예전에도 프로그래머는
버그 잡는 실력이 굉장히 중요하다고 말했어요
매우 사실이에요
오늘 할 얘기는 이제
버그..
라기보다는 이제
버그도 버그고 약간 뒷이야기면 뒷이야기인데
제 회사가 아니라
제가 일했던 회사가 아니라
이제 제가
동료들이 예전에 일했던 회사를
이제 얘기를
뒷이야기를 좀 해볼게요 왜냐면은
내가 법적으로 문제가 되기 싫으니까
뭐 동료한테 들은 얘기를
내가 하는 건 내가
그 회사의 문제가 되더라도 저하고 계약 쓰고 비밀유지
이런 거 안 했기 때문에
저는 떳떳하죠 음..
그래서 법대 나오면 좋은 거예요
아 어떤 거부터 해볼까
처음 얘기가 가장 재밌어야
쭉 보겠죠 그럼 처음 얘기부터 해볼게요
1번
예전에
아 이건 회사 이름 좀 말하지 말자 되게 미안하다
그..
벤쿠버에 있는 회사인데
PS2용으로
PS2라고 전 들었어요
이 스노우보드 같은 거 타고 내려오는 게임 있잖아요
그런 게임을 만들던
회사가 있었어요
자체 게임은 아닌 거 같고 이제
어디서 라이센스 있는 거 받아 갖고
이제 만들어서
다시 유통사에 내주면 그 유통사가
출시하는 방식이었겠죠
근데 이제 얘네가
그..
한 가지 문제가 있었대요 스노우보드를 타고
이제 산에서부터 밑으로 쫙
내려와야 되는데
PS2 자체가 메모리가 많지 않기 때문에
그 산 꼭대기부터 바닥까지의
그 메쉬라던가
지형을 전부 다 읽어놓지를 못해요
그 특히 이제 뭐 충돌메쉬
뭐 화면에 보여주는 메쉬만이 아니라
그래서
옛날 스트리밍이라는 거를 하거든요
그래서 비디오 요즘 제 유튜브 보시는
분들 중에 게임 프로그래머가 아닌
분들이 많기 때문에
스트리밍이 뭔지 설명을 하면은
예를 들어서
100미터 달리기를 한다고 생각을 해봐요
0미터부터 100미터까지 달리기를 하는데
화면에 나오는 공간은
한 10미터밖에 안 돼요 그러면
이제 10미터로 보여주고 달리는 동안에
10미터가 가기 전에
이렇게 스크롤을 해야 되니까
10미터에서 20미터 사이를 또 보여줘야 되잖아요
그러면 그거를 디스크에서 막
읽어서 보여줘요
그러면 얘가 만약에
10미터까지 달렸다면은
그 전 거는 볼 필요가 없잖아요
그럼 이걸 메모리에서 떨어트리고
지워버리고 다시
20미터부터 30미터까지를 읽어서 보여줘요
그런 식으로 한마디로
예전에 무슨 그 이집트
이렇게 큰 돌덩어리
날리는 거 이집트 피라미드에
보면은 막 사람들 밑에
나무 깔아놓고 뒤에서 빠진 나무
앞으로 옮기고 옮기고 옮겨서
계속 굴러가게 하는 그런 거 본 적 있죠
그런 식으로 이제
조각조각 조각들을
자잘하게 이렇게 읽어서 보여주고
내리고 보여주고 내리고
하는 게 스트리밍이에요
뮤직 스트리밍도 그런 느낌이에요
요즘 스트리밍 서비스 많잖아요
음악을 다 다운받고 듣는 게 아니라
내가 듣고 싶은 부분부터 쭉쭉쭉쭉
이렇게 듣게 해준다
그리고 이미 들은 부분은
당연히 저장해 놓을 수도 있지만 메모리가 없으면
날려버리겠다
그래서 그런 식으로 지형을 스트리밍
해서 보여줘야 됐어요
PS2가 재밌었던 게 뭐냐면
이제 하드가 없었어요
뭐 메모리가 작고 하드가 없으니까
예전에 이렇게 열고 CD 넣고 닫고
뭐 DVD인지 CD인지 모르겠지만
그걸 막 실행하면은 모든 로딩은
CD에서 되는 거예요
일단 CD가 이제
느리다는 거는 요즘 사람들
모를까? 알았으면 좋겠는데
뭐 요즘은 다
메모리 쓰고 SSD 쓰니까
다 빠르다고 생각하지만 일단
SSD나 메모리는
정기적으로 저장을 하는 거고
하드나 CD는 물리적으로
도는 기계가 있고 거기다 빗을 싸서 읽는 거거든요
그럼 결과적으로는
물리적인 한계 때문에 속도가 느릴 수밖에 없어요
그럼 그것 때문에 되게 느렸어요
하드.. 지금 쓰는 그 SSD
보다도 한 뭐
100배 느렸다고 보면 맞겠죠 더 느릴 수도 있고
그래서 이제 읽을 수 있는 용량이
한계가 있었어요 사실은
그럼 내가 뭐
초속 10m로 달리고 있는데
그 안에 10m짜리
블락이 또 와야 되니까 그러면
1초당 10m 안에 들어오는 그런
비주얼이라던가 메쉬라던가
컬리전 메쉬라는 충돌 메쉬
이거를 다 읽어서 보여줘야 하죠
그러면 만약에
내가 달리는 속도가 그것보다
빨라지면은
이 CD에서 읽는 속도가
못 따라와서 그걸 못 읽는 경우가 생길 수가 있어요
그쵸?
근데 스노우보드란 게임이 어떤 거예요
처음엔 천천히 시작하다가 속도 붙기 시작하면
막 내려가잖아요
이 게임이 그랬어요
그래서 어느 순간 게임을 막 최대 속도로 올리다보면은
이
최대 속도로 올리다보면은 갑자기
그 어느 지형에 구멍이
생기면서 애들이 그냥
뭐 밑에 바닥이 없으니까
떨어지는 버그가 보이기 시작했던 거예요
물론 게임 출시 전이었죠
그래서 걔네들이 열심히 그게 이제
그 버그가 밝혀진 게
출시를 얼마 안
안 놔두고 였대요
그래서 엄청 고민을 한 거예요
야 이걸 어떻게 할까
어떻게 할까
그러다가 이제 무슨 뭐
아 그러면은 달리는
이 뭐 속도의 제한을 어떻게 할 수가 있나
근데 뭐 무슨 이유 때문에
그게 되게 어려웠던 것 같아요
물리 엔진을 만들어서 어떻게 했는데 그걸 추구하기엔 되게 애매했다
라는 걸로 알고 있고
그래서 결과적으로는 얘가 어떻게 해결을 했냐면
어느 정도 일정 속도가
넘어가면은
그냥
아무 이유 없이
플레이어가 넘어져서
그냥 죽어버리게
죽는 게 아니지 뭐 실수했고
넘어져서 다시 시작하거나 이런 거였겠지만
그때 뭐 플레이어 라이프일 수도 있고
그렇게 만들었어요
그래서 구멍 보이기 전에 애가 죽는 거야
그러면 열심히 게임하던 애들은
막 달리다가
탁 쓰러지는 거예요 아 내가 뭘 못 봤구나
그럼 이제 게이머들은 아 내가 뭘 못 봤구나
라고 믿고 넘어갔고
그리고 아무도
포럼에서 이게 버그다 라고 말한 사람이
아직도 없다고 알고 있어요
그만큼 빨리빨리 지나갔으니까
못 봤구나 라고 생각을 한 거야
근데 이제 사실은
그냥 어 그래
요번에 속도가 뭐 초속 50초 초속 50미터를 넘어
어 너 죽었음
이 느낌이었죠 그래서
그렇게 버그를 하나 처리했다는 얘기를
들은 적이 있어요
이게 밝혀지면 굉장히 욕을 처먹겠죠
이미 뭐 10년 넘게 지난
게임이니까 별로 신경 쓸 사람은
없을 것 같고
저희 프로그래머들이 그래요 별로 이렇게
열심히 하지 않고 귀찮으면 그냥
너 죽었음 이래요
두 번째 게임은
예전에
일단 음
이거는 어떤 또 야구 게임이에요
제가 야구 게임 이제 회사들하고 좀 일을
많이 했으니까
여기서는 문제가 뭐였냐면은
사실은 이건 문제라고 보긴 되게 어렵고
음
그 엔지니어링 퍼펙트라고 하죠
그냥 그 프로그래머에 꼬장꼬장하게
나 완벽한 걸 만들겠어
라고 만들었는데 이제 못 만들어서 그냥
넘어간 케이스에요 뭐냐면
이 게임은
요즘 요즘 게임하는 사람들은
그걸 잘 모를 텐데
그때도 그랬지만 이 게임은
이제 게임을
예를 들어 1000시간을 플레이를 해도
절대 버그 나지 않는 게임이었어요
그만큼 메모리 관리를 엄청나게 빡세게 했고
아 일단 게임에 들어갔다가
음
게임에서 나와서 이제 메인 메뉴로 나오면
메모리에
할당되어 있는 그 구조가 있잖아요
몇 바이트에 뭐가 들어가 있고 뭐가 들어가 있고
이런 모양 자체가 구조가
완벽히 똑같이 나와요
즉 게임 시작할 때 메모리를
이만큼 잡아요
메인 메뉴 올릴 때 메모리를 이렇게 잡고
게임에 들어가면 이만큼 메모리를 추가를 해요
그리고 게임이 끝나고 나오면은
이 메모리가 원래 상태로 딱 돌아오게끔
모든 구조를 만들어 놨고
언제나 그랬어요
그래서 이제 절대 그 메모리 이슈 때문에
메모리에 구멍이 나기 시작해서
프레그멘테이션 때문에
버그가 나는 적이 절대 없는 게임이었고
실제 소킹이라고 해서 게임을 계속
몇천 시간을 돌려도
문제가 없던 게임이었어요
그래서 아 이 게임 출시해도 되겠구나
디스크 다 찍고 나갔어
나갔는데
그니까
나간 게 아니라 허가를 받는 과정
있어요 MS나 소니에서
그럼 걔네가 이제 허가를 하려고
테스트를 하고 있는데 그 한 달 테스트하는
도중에 이제 내부에서
그 메모리 아까 갔다가
돌아와야 되는데 돌아올 때
4바이트 릭이 나는 걸 찾은 거예요 메모리 누수가
그럼 메모리 누수가
나면서부터 점점 구멍이 생길 거고
게임을 천 시간 하다보면 어느 순간에는
메모리 구멍이 차갖고
결국에는 더 이상 할당을 못하는 상황이
올 수밖에 없거든요
그래서 이제 얘네들이
왜 이게 생겼냐라고 보니까
왜 우린 그걸 전에 발견을 못했냐
그거는
저희가 이제 게임 자체를 오프라인 게임
콘솔이니까 온라인 게임이 아니었거든요
그래서 오프라인 게임을 해서는 그게
절대 안 생기는데 온라인
매치를 하면은 온라인 팀에서
뭔가 이제 파티클을 하거나
뭐가 하거나 이럴 때 메모리를
잡고 풀어줘야 되는데
그걸 안 푼 거예요 그래서 그게
안 풀리는 게 딱 4바이트인가 8바이트 밖에 안 됐어요
사실 되게 작았어요
그래서 계산하기 시작한 거예요
애들이 야 이 구멍이 생겨서 이제 망가지기 전에
시작하는 게 콘솔 게임이었으니까
굉장히 메모리가 딸리거든요
과연 몇 게임을 해야 되냐
계산 쫙 해보니까 음?
이거 뻥날려면은 게임 한 번도 안 끄고
끄면은 메모리가
날라고 다시 시작하면 다시 들어오니까
한 번도 안 끄고 한 천몇 게임을 해야 돼요
근데 이 게임이 한 판 할 때
한 시간 이상 걸리거든
그러면 야
야 청게임 해갖고
그때 뻥나는 사람이 어디 있겠니 그리고
요즘 게임들 보면은
게임 하면은 한 시간마다 뻥나더라
우리말 안 나는 거지
그래 이 정도면 넘어가자 그래서
그 버그를 안 고치고 넘어갔어요
근데 이제
그때 이제 뭐 여러
플랫폼에 나오는 게임이었으니까
그때 이제 골드 디스크 들어가고
골드가 아니라 이제 서미션 들어가서
체크받고 있을 때니까
다른 것 때문에 하나하나 페일한 게 있어서
그건 다시 고쳤고 들어갔고
다른 플랫폼은 그냥 한 번에 통과가 됐어요
그래서 그 플랫폼은 여전히 메모리 문제가 있는 플랫폼으로
나가고 있죠
그래서 이거는 저희는 알지만
남은 모르는 버그들 이런 것들이 있고
그래서 그게
제가 말하고 싶었던 이제
두 번째 버그고
세 번째 버그도 말할까?
이거 말하면 욕 드럽게 먹을 수도 있는데
사실은
그
세 번째 버그까지 말할게요
아 이거는 저하고 전혀 상관없는 회사니까
회사 이름도 말하지 뭐
버그라고 하긴 좀 애매하다
사기라고 해야 되나
사기가 맞을 것 같아
바이오웨어라는 회사 알죠?
뭐 예전에 발더스 게이트 만들고
네보인터나이트 만들고
지금 EA로 넘어갔죠
그 뒤로 좀 많이 안 좋아지고 있는 것 같지만
드래곤에이지 나오고
그때 이제 메스 이펙트 1 만들 때에요
메스 이펙트 1
그
그 나중에
엔딩 때문에 까인 뭐 3,4 이런 거 말고
3였던가? 3였던 것 같아
1에서 얘네가 처음에 언리얼 엔진을 쓰기를
시작을 했어요
그리고 이
메스 이펙트 1 게임이 되게 악명이 높은 게
엄청나게
애들 야근시키고 왜냐면
메스 이펙트가 이제 개발 중에
언리얼 엔진하고 좀 돌리기가 어려웠다니
뭐 이래서 애들 엄청 야근시키고
미친듯이 야근하고
이제 그 게임 끝나고
애들이 굉장히 많은 애들이 회사를 떠나버린
그런 프로젝트 중에 하나에요 사실은
근데 그
메스 이펙트 1을 만들 때
그때 언리얼 엔진 3 처음 나올 때였나
잘 기억은 안 나는데 기억은 잘 안나요
4 나올 때였나 4가 있나 지금?
버전이지 기억이 안나
뭐 어쨌든
그 한참 나올 때 이제
뭐 이런저런
이제 언리얼 엔진에서 이런저런 거 되니까
막 기능이 있으면 막 메스 이펙트도 이렇게 훌륭한
비주얼을 만들겠다 막 이렇게 나오기 시작을 했는데
결과적으로 메스 이펙트 1
해보신 분들은 알겠지만은
밋맵 로딩 나중에 돼갖고 막
사람들 블러리하게 나왔다가
뿌옇게 나왔다가 점점 고쳐지고 이런 문제도
많았던 게임이에요 그냥
기술적으로 언리얼 엔진의
문제라기보다는 제가 볼때는 개발자들이
언리얼 엔진을 제대로 못쓴 케이스이기도
할거고 언리얼 엔진 쪽도
뭐 기능이 안된 것도 있겠고
원래 FPS용으로 나왔던 건데
메스 이펙트는 좀 그런거하고 멀었으니까
그래서
제가 정확히 뭔진 기억은 안나는데
메스 이펙트 1에서
GDC인가 무슨 E3인가
이런데서 이제 광고를 해야되잖아요
게임 나오기 전에
그래서 딱 이렇게 되게 멋진
효과 딱 보여주면서
이펙트 보여주면서 뭐 우리 이런것도 했고
저런것도 했고 모든거는
게임에서 나온 화면이야
실제 게임 플레이 화면이라고
딱 적어 나왔어
사람들이 보고나서 와 어떻게 이런걸
하지 야 진짜 언리얼 최고고
메스 이펙트 최고구나
막 그랬어요
그래서 이제 딱 사람들이 막 좋아하는데
그거 나가고
그날인가 이제 언리얼에서
전화가 왔대요 에픽게임스에서
전화해갖고
야 너네 거짓말
하지 말라고
절대 이거 너네 안된다고
절대 언리얼에서 이거 안되고
절대 이거 실시간으로 안되는건데
너 왜 이러냐고
항의가 들어왔어요 언리얼에서 왜냐하면은
이제 언리얼도 약간의 마케팅 홍보하고
뻥튀기도 하지만
절대 안되는거는 말을 안한다는거죠
왜냐하면 그렇게 했을 때 나중에
그게 지원이 안되면 자기네들이 욕먹고
법적 문제도 있을 수 있으니까
근데 이제 메스 이펙트에서 그걸 해버린거야
그래서 야 너 이거 실제 아니잖아
어떻게 했어 그러니까 실제는
그냥 뭐 나중에
영화 처리하던지 후처리 했다던가
게임에서 실시간으로
뭐 30프레임 안들고
한 프레임 찍을 때 5초 걸렸는데
그거를 이제 하나씩
이미지를 뽑아갖고
비디오를 만든 다음에 거기서 다시
영상 처리해갖고 다 예쁘게 바꿨다
그래서 언리얼이
너네 다시 이러지 말라고
그랬던게 있어요 그리고 실제 게임 나올 때
그 기능 다 빠지고 나왔다고 기억을 해요
그래서 그런 에피소드도 있고
그래서
제가 볼 때는
얘네들이 이제
그 당시에
처음으로 이제 다른 엔진 쓰는거고 바이오웨어가
그랬던거 같아요 그래서
좀 이리저리 사람들
이제 광고 마케팅을 해야되는데
할 상황이 없던 상황에서
좀 무리수를 둔거였고
사실 그게 에픽한테는 굉장히 위험성이 됐던거죠
그래서 보통 그런거를
할려면은 이제
허락을 받고 해요 보통 파트너끼리
요번에 요렇게 나갈건데
이래도 괜찮냐 아 이건 안되고 이건 빼고
문장을 좀 이렇게 바꿔라던가
이런거를 거쳐야만
서로 파트너한테 도움이 안되는데
제가 볼때는 그 회사 자체가 워낙
외부 회사들하고 일하는게
좀 회사 경력이
10년인데도 불구하고 모잘랐던거 같아요
아니면은 그렇게
야근 돌고 뭐하는거 보면은 제대로 관리가
안되고 있던 팀일수도 있고
그래서 그런 또
재밌는게 있고
네번째는
이거를
이건 이미 퍼블릭으로 알려진 얘기에요
GDC같은데도 많이 나왔고
근데 이제 제 추측도 있고 하니까
특정 회사 얘기를 하진 않을게요
그 콘솔 중에 하나였는데
콘솔 제조사 중에
콘솔 보면은 이제
자체 하드웨어잖아요
그 하드웨어마다 특성이 있어요
자체 커스텀 칩을 만들기도 하고
GPU 칩의 문제였는데
언제나
이 콘솔 동일한 다른
회사의 콘솔에 비해
그래픽 성능이 한 절반밖에
안나왔어요 분명히
들어간 칩은 거의 똑같이 동등해야되는데
쉐이더 속도가
절반밖에 안나오는 그런 콘솔이 있었어요
그래서 우리는
아 이거 우리가 뭘 잘못했나 뭐가 좀 문젠가
쟤네가 컴파일러 옵티마이제이션을 해야되나
이런 고민을 하면서
열심히 열심히 몸을 갈아놓고 있었어요
그러다가 이제
그 콘솔 제조사가
소유한 자회사에서
이제 어떤 발표를 했어요
발표를 했는데
그 사람이 정확히 말했는지 제가 따로
들었는지는 기억이 안나고
그 요지는 뭐였냐면은
아 우리가 이 콘솔을 언제까지
시장에 내놨어야 했는데
GPU 어셈블리에 버그가 있었다
그게 뭐였냐면은
그 어셈블리에서 보통
숫자 두개 더하고
곱하고 이런 과정이 있는데
숫자를 두개를 더할때는
GPU 사이클이 세개가 필요할 수 있잖아요
세번 돌 때 그럼 그 세번이
돈다음에 그 결과값을 가지고
뭐 멀티플라이하고
곱하고 이런식으로 해야되요
결과가 나올때까지 딜레이를 넣는
과정이 있고 그럼 그동안에
다른 명령어를 실행을 할 수 있게
컴파일을 잘 알아서 해줘야 되거든요
근데 제 기억에는
하드웨어 문제였다고 알고있어요
그래서 어떤 하드웨어 문제 때문에
이게 안되는거야
특정 어떤 명령어에서
어셈블리가 들고 몇 사이클이 돌 때까지
기다려줘야 되는데 그게
안 기다려주거나
아니면은 그 사이클이
개런티가 안되는 이상한 현상이 있었던거 같아요
그래서 얘네가 했던게 뭐였냐면은
그러면은
이거와 관련된 모든 명령어에서
명령어가 실행이 될 때마다
그거만큼 이제
무조건 사이클을 돌리면서 쉬자
그래서 그거를 마지막에
거의 넣었다고 알고있어요
그래서 뭐냐면 다른 플랫폼에서는 더하기 10개를 하면은
이게 사이클이
실제는 뭐 3 곱하기 10 이어갖고 30이 걸려야 되지만
중간에 잘 끼워놓으면은
왜냐면 관계없는 것끼리 넣을 수는 있잖아요
a+b가 c가 되는거하고
d+e가 f가 되는건 전혀
관계없는 계산이잖아요
그걸 잘 껴놓음으로 해서 결국 사이클을
원래 30 걸릴게
뭐 하나당 3이지만 동시에
그니까 하나 실행하고
기다리는 동안 다른걸 실행할 수 있으니까
그거를 이제 뭐 15정도로 줄일 수가 있는데
그 초재화가 안된거에요
그래서
그게 무조건 느린건데
하드웨어는 나갔고
하드웨어를 고칠 수는 없고
그래서 걔네가 만들어낸 방식이 뭐냐면
아 그러면 이렇게 모든거를
특정 명령어들이 사이클이 딜레이가 걸리는거고
그 명령어를
저희한테 알려주진 않았어요
그래서 말해주진 않고
우리는 뭐 이걸 어떻게 해야되나
고민하고 있는 상황에서
걔네가 새로운 컴파일러를 만들어요
그 컴파일러가 뭐냐면
이제 코드라는게
아까 a+b=c하고
d+e=f라는게 전혀 관계가 없는거는
어떤 순서로 실행이 되어도 상관이 없거든요
그러면 그 실행순서
코드를 어떤거를 먼저
실행하는 순서를
랜덤하게 바꿔보는거에요
그래서 랜덤 c들을 넣어주면
그거에 따라 이게 먼저 컴파일될 수도 있고
저게 먼저 컴파일될 수도 있고
이런 명령어를
이제 서로 영향을
결과가 바뀌지 않느냐
뒤집힐 수 있는 것들을 바꾸다보면은
어떤 조합에서는 속도가 빨라질 수도 있다는거에요
왜냐면 운 좋게
언제나 기다려야 되는 명령어가
이제 실행이 될 때
안 기다려야 되는 명령어를 실행하는 경우가 있어서
그래서 컴파일 할 때
특정한 아 난 이거를 랜덤 c로
1로 돌릴래 하면은
이제 성능이 이만큼 나온다
라는걸 보여주는 기능을 넣었어요
그래서 저희가 한게 뭐냐면
그거 고치려고
이제 저희 회사니까
컴퓨터가 되게 많잖아요
한 100대 200대 있는데
그 100대 200대를 분산으로
밤마다 우리가 가지고 있는 모든 쉐이더를
그냥 무조건
랜덤한 넘버 계속 만들면서 돌려보는거에요
야 요 쉐이더 하나 오늘은
랜덤 넘버 5로 컴파일 해보자
아 성능이 아 뭐
작은 숫자가 좋다고 하죠
성능이 500이 나온대
그럼 아 그렇구나
이게 가장 최고의 성능은 뭐였지
그럼 아 그거는 800이였어
아 그래 그럼 앞으로는 이거 컴파일 할 때
이 랜덤 넘버로 컴파일하게
빌드 잡을 바꾸는거에요
그리고 또 그걸 돌려갖고 요번에 504로 돌려봐갖고
500 아니 랜덤 값을 한
503 좀 헷갈리니까
랜덤 값을 한 65로 돌렸는데
어 이거는 2000이 나와
그럼 아 이건 느리니까 얘는 버리고
그런식으로 해서 그냥 무작위로
거의 한달동안을
계속 랜덤한 넘버를 시드해갖고
컴파일을 무조건 빌드한 다음에
성능이 더 빨라지나 적응냐를 봤어요
그래서 그동안에 우리가 시도해본 모든 랜덤 넘버에서
가장 빠른
랜덤 넘버 시드를 갖다가
각 쉐이더를 컴파일하는 걸로 코드를 바꿨어
그래서
거기서 얻은 성능 향상이 몇이냐
평균 80% 향상이요
어떤 쉐이더는 정말 2배 3배 빨라졌고
어떤 쉐이더는 20% 빨라졌지만
그것만 해서
쉐이더 동영상 속도가 80% 이상이 빨라졌어요
그래서 이거는 하드웨어 제조사가
말도 안되는 버그 만들어 놓고
지네가 못 고쳐가지고
출시를 맞춰야 하니까 대충 내버리고
이제 어떻게 해결할까 고민하다가
아 그래 주먹구구식으로
해결할 수 있어
그래서 저희가 주먹구구식으로 해결하게 됐던
그런 때죠
컴퓨터 200대 매일 밤 분산 처리하면서 돌려가면서
야
그때 소비한 전기비 따지면 이미 아마
게임 개발비가 나올 수도 있겠다는 생각을 하는데
농담이구요
그래서 그런 뒷이야기들이 있죠
그래서
지금도 시간이 한 4개 얘기했는데
20분 정도가 돼가는 것 같아요
그래도 이런 뒷이야기들 들으면
사람들이 되게 좋아하더라구요
남의 과오를 좋아하는 것 같아요 문화가
좋죠
오늘도 그렇게 재밌는 얘기하고
제가 특정 회사 얘기한 거는
바이오웨어 하나밖에 없지만
내가 이랬던 회사 아니니까
모른 척
저도 전에 들은 얘기기 때문에
사실의 진위는 저도 몰라요
이러고 넘어가면 되는 거지
예 포프였습니다 다음에 또 봬요
안녕
