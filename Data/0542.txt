예 안녕하세요 포프입니다. 오늘은 최근에 저희 코드베이스에서 봤던 버그를 하나를 설명을 드릴게요.
사실 굉장히 간단한 버그고 이름을 제대로 안 지어서 변수 이름을 제대로 안 지어서 생긴 문제이기도 하고
도메인 명을 도메인 드리븐 디자인 할 때 그 도메인에 쓰는 그런 용어를 제대로 안 따라서 생긴 문제이기도 하고
가독성 때문에 생긴 문제긴 해요. 굉장히 간단한 함수였는데
요 버그 제가 보고 나서 야 이거 작성한 xx가 누구야라고 제가 말할 정도로 되게 간단한 기본 문제였는데 놓쳤던 부분이죠.
뭐 누가 작성했는지 중요하지 않고 사실은 알고 있지만 조용히 있겠습니다.
되게 간단한 버그였어요 사실은. 뭐였냐면은 어떤 함수를 하나 만든 거예요.
이 함수가 뭐하는 거냐 뭐 다양한 여러 가지를 하지만 최종적으로는 어떤 url 주소를 두 개를 만드는 것도 이 함수의 기능에 포함이 돼 있었어요.
그래서 그렇게 만들어갖고 어떤 dto 그런 거를 만들어서 반환을 하게 되는 거죠.
그래서 그 dto에 들어갈 때 이제 url을 만드는 건데 그 url을 만드는 정보에
맥의 변수들로서
그 url이 들어와서 그걸 어떻게 합쳐갖고 만들 거 아닙니까 그 들어오는 맥의 변수 중에 하나가 스트링형 맥의 변수형의 스트링이고 이름이 course 이렇게 되어있어요.
c-o-u-r-s-e 영어 못하는 거 들킬 뻔했다. 그래서 string course라고 들어와 있었는데
이거를 딱 보는 순간 이게 뭐지라는 감이 오나요? 일단 course라는 거는 저희 pocu 아카데미에서 하고 있는 그 과목의 course를 가르치는 게 맞긴 해요.
가르치는 게 맞기는 한데
c-o-u-r-s-e 영어로 들어오는 순간 여기에 뭐가 들어올지 명백하지가 않은 문제가 있었어요.
왜? 저희가 course를 부를 때는 뭐 어떤 클래스에 담아가고 차라리 모든 course 정보가 들어가는 경우도 있고 그게 아니라면 저희는 컴프천 이런 식으로 부르기도 하고 천이라고 부르기도 해요.
컴프천은 저희가 이제 url에 나와 있는 거죠. 그 수학 과목의 과목 코드가 컴프천인 거고 그리고 그냥 천만으로도 부르는 경우가 있어요.
그래서 실제 어떤 버그가 생겼냐면은 url을 두 개를 만드는데 하나는 앞에서 자기가 알아서 컴프를 붙여주고 그것도 사실 문제긴 해요. 뒤에 대기하겠지만.
그리고 그 뒤에 아까 string으로 들어왔던 course 있죠. 그 course를 붙여요. 그러면 그 course는 사실 1000이라는 얘기죠.
뭐 1000이든 2500이든 이런 숫자라는 얘기고 근데 그 아래쪽에 가면은 그냥 url에다가 곧바로 course를 붙여요.
컴프 없이 c-o-p-n-p 없이. 그러면 얘가 컴프천이라고 아예 스트링으로 붙여져요. 그리고 그 아래쪽에 가면은 그냥 url에다가 곧바로 course를 붙여요. 컴프 없이 c-o-p-n-p 없이. 그러면 얘가 컴프천이라고 아예 스트링으로 붙여져요.
그래서 코드를 작성한 사람이 윗줄하고 아랫줄 작성할 때 서로 다른 가정하에 코드를 작성했기 때문에 둘 중에 하나 url이 잘못 나왔어요.
그 url이 나와서 데이터베이스에 들어가는 코드이기는 했어요. 근데 그 문제가 있었던 최종 url이 실제 우리가 어떤 과정을 다 겪고 나서 마지막 페이지에서 끝났습니다라고
redirect해주는 마지막 url이에요. 근데 실제 이 코드를 작성을 하고 qa를 했는데 그 마지막 화면을
등장하지 못하는 다른 버그가 있었던 거예요. 그래서 아 그 버그가 있습니다라고 보고만 하고 그러면은 실제 원래 코드를 작성한 사람은 그 버그만 고치고 다 고쳤는지
뭐 넘어간 거죠. 그 뒤에 다시 한번 qa를 처음부터 끝까지 했으면 잡을 수 있었는데 그걸 못 잡았었고 나중에 다행히 다른 문제로 인해서 다른 사람이 잡은 거예요.
어쨌든 qa 프로세스가 깨진 것도 문제는 있었지만 그것보다 더 황당한 거는 제 입장에서는 함수의 매개 변수에 첫째 스트링형을 집어넣었어.
그 스트링을 넣어야 되는 상황이 아닌데 스트링은 너무나 자유분방하잖아요. 그걸 스트링으로 넣었고 굳이 그거를 url을 합치겠다는 생각 자체가 일단은 함수에서 강 타입을 지원하는 그런 언어에서 함수를 작성할 때 컴파일러가 해주는 거를 무시한다는 얘기고.
두 번째는 매개 변수명이 콜스라는 겁니다. 자 그러면 뭐부터 얘기할까요. 매개 변수명부터 얘기할게요. 매개 변수명. 예전부터 주니어들이 콜스라고 자꾸 불러서 이런저런 코드가 명백하잖아요.
그래서 문제가 생겼던 적이 사실 내부적으로 있어요. 그래서 저희가 용어집을 아예 만들었어요. 우리 회사에서 사용할 때 콜스라고 부르는 거는 그 콜스에서 어떤 거를 명확하게 말하는지 되게 애매한 거다.
그 콜스라고 말한다면은 아마도 클래스 콜스를 만들어 써야 될 거다. 다른 자료용으로 콜스라고 부르는 순간 이 의미가 확실치 않다.
그래서 아까 말했던 컴프천이라는 게 있죠. 컴프천. 이 통째로 보고 말할 때는 얘를 스트링으로 넣어줄 게 아니라.
그래서 저희가 내부적으로 콜스코드라는 콜스코드라는 클래스를 만들어놨어요. 그 콜스코드 클래스를 보면은 멤버 변수가 두 개가 있습니다. 하나가 숫자. 총 네 자리까지 되기 때문에 그 네 자리를 포함할 수 있는 자료용 정도 크기의 그 숫자. 그리고 그걸 넘버라고 불러놨고.
그리고 그 외에 아까 컴프라고 붙는 거를 저희가 전공코드라고 불러요. 그래서 이건 이넘으로 돼갖고 이넘 메이저로 이메이저라고 저희가 할 거예요. 타입은. 그래서 거기에 컴프가 들어가서 가지고 있어요.
그리고 여기서 투스트링을 호출합니다.
호출을 하면은 컴프천이라는 게 제대로 나와요. 그래서 그런 식으로 해서 사실은 그 콜스를 원했으면은 이거를 넣어야 돼요. 콜스코드 클래스를 써야만 되고 그리고 멤버 매개 변수명도 그죠. 콜스코드가 되겠죠.
자 그러면은 이게 콜스코드는 컴프천 이거를 콜스코드라고 한다라고 저희가 이름 용어집에 넣어놓은 거고 그거에 맞춰서 그거에 맞는 강타입도 만들어놨어요.
근데 그게 아니라 정말 숫자만 넘겨주고 싶은 경우들이 있죠.
그럼 당연히 자료형이 숫자형으로 되어야만 하고 뭐 쇼트 나 유쇼트 이런 게 되겠죠. 언사인드 쇼트 그거로만 가야 하고 맵의 변수명은 반드시 콜스 넘버라고 해야 돼요. 콜스 넘버 그 콜스에서 숫자만 따지는 건 넘버 앞에 메이저까지 들어간 콜스코드 저 용어집에 등록이 돼 있는 거죠.
그러면 아까 말했듯이 실제 이 함수가 기대했던 거는 제대로 작동하려면은 스트링 콜스라고 들어온 게.
실제 그거는 콜스코드라고 맵의 변수명이 있어야만 하는 겁니다.
근데 그거를 잘못했기 때문에 헷갈리면서 잘못 썼던 거죠.
그래서 여기서 지금 말한 게 뭐예요. 강타입 쓰자. 콜스코드로 뭔가를 넘겨받을 거라면 함수에서 그냥 클래스로 넘겨받아라.
클래스로 넘겨받는 순간 그거 가져갖고 어떤 형인지 타입이 확실해지니까 코딩을 작성하는데 실수할 이유도 없고 투 스트링 뽑고 싶으면 알아서 제대로 뽑아주고 걱정할 이유가 없죠.
그게 아니라 숫자만 넣고 싶다. 그럼 스트링형이 들어올 가치가 없죠.
숫자로 놀아. 네 글자짜리 숫자로 놀아.
그거 자체도 강타입으로 만들어서 할 수가 있어요. 실제 네 글자인지 확인을 하기 위해서.
근데 우리가 거기까지는 안 갔고.
그게 아니라 앞에 메이저 전곡만 집어넣고 싶다? 그러면 아까 말한 인웡을 패스하면 되는 거.
그러면 정말 스트링을 쓸 일이 없는 것이에요.
그럼 맵의 변수명 결과적으로는 우리 도메인 랭기지 따라가자.
예전에 제가 DDD에 대해서 되게 오래전에 비디오를 만든 적이 있어요.
거기서 했던 얘기도 똑같아요.
도메인 드리븐 디자인에서 정말 헛소리가.
헛소리 많고. 그리고 요즘은 그게 마이크로 서비스하고 얽히면서까지 또 이상한 헛소리를 많이 하는데.
그 헛소리를 내 따른 게 아니라 그중에 중요한 거.
실제 도메인에서 사용하는 그 용어를 사용해야지만 많은 사람들이 실수를 안 한다.
그게 증명이 된 거고. 그게 이제 이름조인 거고.
아까 말했던 타입조. 그 타입도 강하게 만들면 좋다.
이런 걸 진짜 저희가 버그를 보면서 이번에 느낀 거죠.
우리가 회사에서 그렇게 하라고 이미 가이드라인 작성해 줬는데
이 프로그램은 처음 들어왔을 때 그런 코드를 작성한 거예요.
그래서 뭐.
나름 가이드라인 만들어도 이런 일이 생기는구나.
그러지만 버그너십이 생기는 거고. 고치면 되는 거고.
단 저희도 이렇게 겪었듯이 지금 여기서 느낄 수 있는 거 강타입 제대로 사용해라.
스트링 같이 너무 제네럴한 그런 매개별도 사용하지 말아라.
그리고 변수명. 정말 잘 지어야 된다.
콜스라고 하는 순간 그게 대여섯 가지를 의미할 수 있는데
그거를 콜스라고 지어놓고 남들이 다 알겠지?
나도 까먹는데? 지금 그 증거잖아요.
그래서 그게 콜스코드 콜스넘버 이런 거 굉장히 명확하게 단어로.
정의할 줄 알아야 된다.
참고로 말씀드리면 프로그래머 작성 잘하시는 프로그래머를 잘하시는 분들.
그분들 중에 언어 능력이 떨어지시는 분들은 많지 않습니다.
그 이유가 어떤 거를 특정하는 단어 하나하나를 굉장히 고민하고 만들어요.
그래야지만 나중에 헷갈리는 게 없고 그래야지만 버그들이 안 생기는 거고.
이런 버그들이 안 생기면 그만큼 시간 낭비를 할 게 적다는 거죠.
이 비디오에서는 뭔가 배워가실 것들이 좀 있었다고 생각을 해요.
좀 생각해 보시고.
앞으로.
변수명 잘 짓자.
앞으로 타입 같은 거 제대로 만들자.
강타입으로 최대한 가자.
내 코드에 전부 다 스트링으로 떡칠되어 있다?
그거는 뭐 그냥 문제가 굉장히 많은 코드입니다.
좋게 말해서 그렇습니다.
그 정도로만 말하겠습니다.
보표였습니다.
