안녕하세요. 포프입니다.
오늘은 클라우드 쪽에 대해서 잠깐 더 얘기를 해볼게요.
얘기를 어떻게 시작해야 되고 어떤 주제를 메인 아이디어라고 얘기할지는 모르겠는데
일단 메인 아이디어를 굳이 잠깐 말씀을 드리면
일단 말씀드려야 관심 없으면 끝일 거 아니에요.
메인 아이디어를 먼저 말씀을 드리면
개발 환경은 여러 개가 있잖아요.
저희가 웹 개발을 할 때 로컬에서 테스트하는 환경이 있고
서버에 올려서 테스트하는 환경이 있고
서버에 올려서 거의 실제 환경처럼 만들어 놓고 테스트하는 환경이 있고
진짜 라이브 서버가 있고
그런 식으로 서버를 하는 환경이 여러 개가 있어야 하거든요.
게임 쪽에서 옛날 C++ 개발할 때 생각하면 디버그하고 릴리스 빌드가 있듯이
그런 식으로 최소 2개 아니면 많으면 3개, 4개, 5개, 6개까지 되는 그런 환경이 필요해요.
그래서 저는 예전에
웹 회사를 다닐 때 그런 환경이 제대로 없는 회사가 솔직히 굉장히 많아요.
대부분은 아니지만 굉장히 많아요.
왜냐하면 그 환경을 다 유지하는 것 자체가 굉장히 오버헤드가 많은 거거든요.
예를 들어서 DB 하나, 웹 서버 하나를 라이브용으로 쓰고 있다면
그거에 맞는 스테이징용 하나 만들지 테스트용 만들지
또 개인 건 어떻게 만들 건데 개인 컴퓨터에서 하는 건
이런 여러 가지 문제들이 있었어요.
그래서 예전에 클라우드가
흔히 존재하지 않을 때 흔히 많이 쓰지 않을 때
그때는 이제 굉장히 열악한 상황이었고
어떤 이상한 사람들은 서버에 직접 접속을 해서 거기서 개발을 하는 사람도 있었죠.
근데 굉장히 저는 개인적으로 위험한 짓이라고 생각을 하고
그리고 이제 인터넷이 반드시 연결돼 있어야 되는 이런 문제도 있고
그 뒤에 여러 가지 변화가 있었던 것 같아요.
클라우드도 생겨났고
이제 점점 디스트리뷰트로 일하는 사람들, 리모트로 일하는 사람들 늘어났고
뭐 그거는 Git이나 이제 Mercurial 류의 이제 약진의 힘인 것도 있을 거고
뭐 실리콘밸리 쪽에 몸값이 너무 올라가서 말이 안 되는 그런 문제도 있었겠죠.
거기서 사람들을 채용하는 게 말이 안 되는
여러 가지 것들이 있었다고 보는데
결과적으로는 그 3년 전쯤에는 그냥
이걸 웹 쪽 개발을 하려면 방법이 별로 없었던 거예요.
내 개인 컴퓨터에 서버를 어떻게 돌리던가
아니면은 이제 실제 존재하는 웹 서버에 연결을 하던가
아니면 내가 웹 서버 들어가서 코딩을 하던가
이런 방법이 있었던 것 같은데
그래서 이제 그럴 때 이제
그때 제가 이제 웹 회사를 열심히 다니고 있을 때니까
이제 리드 개발자 하고 있을 때니까
저희 아키텍하고 많은 고민을 했어요.
아 그러면 우리가 이걸 어떻게만 잘 돌릴 수 있을까
근데 그 당시에 제가 이제 저쪽 어디지
지금 트렐로의 원래 회사였던 그 포우크릭스
포우가 어쩌건가?
포우크릭스 소프트웨어인 것 같아요.
트렐로 그쪽 회사 쪽 애들한테 들은 거는
걔네들은 무조건 윈도우스 8.1을 쓰면서
하이퍼비를 돌린다고 들었었어요.
그러니까 가상 머신이죠.
가상 머신 이미지를 만들어 놓고
웹 서버가 됐든 DB가 됐든
자기가 그걸 개발을 해야 되면은
자기 컴퓨터에서 가상 머신 이미지를 로딩을 한 다음에
이제 개발하면서 그걸로 개발 다 끝내고
체크인 하면은 이제 그게 이제 실제 실서버로 올라가든
스테이징 서버로 올라가든 해서 테스트를 한다고 그랬었어요.
근데 그 방법이 굉장히 솔직히 말해서는
솔직히 맞는 방법이었거든요 그 당시에는
누군가가 가상 이미지 하나만 제대로 구워놓으면
개발자들이 자기 컴퓨터에 다운받아서 다 테스트해보고
다음에 이제 그걸 올린다였죠.
이제 그 개념에서 이제 점점 나아진 게
아 그때 뭐였지? 다커였나?
다커도 그런 개념으로 이제 많이 썼던 것 같아요.
자기 로컬 컴퓨터에서 이렇게 하고 저렇게 한다
이런 컨테이너 개념
아 그 뭐
왜냐면 다커는 좀 더 쉽게 이제 코딩으로 할 수 있으니까
근데 다커는 그 당시에 이제 윈도우스 지원을 안 해줬었고
그쪽이 워낙 이제 뭐라 그럴까 플랫폼 종속성이 강한
그런 곳이기 때문에
뭐 그런 문제가 있었죠.
그래서 그러다가 그때는 그래도
아 우리가 이렇게 개발자 환경에서 개발자 머신에서
실제 서버랑 되게 비슷한 환경으로 개발을 하려면
그래서 오늘 주제는 그런 것 같네요.
실 서버랑 비슷한 환경에서 개발을 할 수 있어야만
실 서버에 올라갔을 때 서프라이즈가 적고
훨씬 뭐랄까 문제를 일찍 잡을 수 있는 거죠.
뭐 소프트웨어 품질이 그래도 좋아지면 좋아지는데
그래서 그 고민을 제일 많이 했던 것 같아요.
실 서버랑 비슷한 환경을 만들어야 한다.
그게 우리가 실제 뭐 내부에 있는 서버 하나를 들고 와서
우리가 서버를 구축해서 이거를 쓰든
그건 좀 힘든 얘기지만 그냥 뭐랄까
최상의 방법은 아니지만
아니면 dm 이미지를 구워서 하이퍼뷰에 올려서
그거를 이제 연결해갖고 쓰든 내 개인 컴퓨터에서
개인 회사 컴퓨터지만 내가 쓰는 퍼스널 컴퓨터요.
그런 생각을 하다가 이제 클라우드가 점점 오기 시작을 했어요.
그래서 이제 클라우드 쪽으로 옮기고
옮기고 싶은데
그럼 언제나 고민은 그거지.
그럼 내가 클라우드로 옮기면
클라우드로 옮기면 그러면 내가 과연 내 로컬 컴퓨터에서 일을 할 수가 있냐
그게 가장 큰 문제였어요.
근데 그러다가 이제 제가 AWS 좀 보다가
이제 애즈워도 보다가 이런 생각을 했는데
애즈워를 보면 볼수록 이게 좀 잘 돼 있는 거예요. 생각보다.
그러니까 이제 마이크로소프트가 워낙 소프트웨어 개발을 하던 회사고
워낙 그걸로 크게 여태까지 몇 십 년을 돈을 벌어온 회사이기 때문에
제가 프로세스를 되게 잘 이해를 해요.
그게 이제 게임 쪽에서도 당연히 우리 게임 개발자들이 다 하는 얘기고
저희가 이제 당연히 마소가 아닌 제품들을 더 많이 만들거든요.
게임 쪽에서는. 이쪽에서는 콘솔이고 마소는 콘솔 하나밖에 없고
뭐 윈도우스도 있지만 나머지는 다 닌텐도 소니 이런 거이기 때문에
근데 이제 개발자들의 공통된 의견은 다 그거예요.
마소가 역시 개발 하나는 제대로 한다.
왜냐하면 개발할 수 있는 환경을 만들어 주니까.
근데 그게 똑같은 게 웹에서도 보이는 거예요.
일단 이제 애즈워에서 제가 전에 얘기했던 거는 그거 한 번 얘기했던 거 같아요.
애즈워에서 디플로이먼트 슬롯이라고 있다고.
제가 이제 서버를 하나 올려요. 서버가 뭐 포프닷 뭐 애즈워닷컴이라면 예를 들어서
그럼 이게 라이브 서버잖아요. 그러면 그 똑같은 환경 안에
그러니까 UI에서 똑같은 환경이죠. 거기에 슬롯을 여러 개 만들었어요.
슬롯이 뭐냐면 슬롯이 이제 뭐 데브 아까 말했던 스테이징 뭐 테스트
이런 슬롯을 다섯 개까지 만들 수가 있어요.
물론 어떤 서비스를 얼마큼 돈을 내냐에 따라 다르죠.

하지만 적당히 돈을 내면 이걸 한 서버에 다섯 개 슬롯을 만들어 줄 수가 있어요.
그러면 내가 테스트하다가 이제 올릴 때 스테이징 서버라던가 그냥 서버에서 테스트할 때 올릴 때 테스트 슬롯에 올려요.
그리고 테스트를 다 한 다음에 다음에 스테이징에 또 올리죠.
다른 거를 스테이징으로 테스트 한 다음에 이 두 슬롯을 교체를 할 수가 있어요.
그러면 스테이징에 있던 서버 자체가 프로덕션 나가면서 그 뭐라 그럴까 이제 테스트 다 한 걸 그냥 디플로이하는 과정을 그렇게 만든 거죠.
그래서 그 방법 자체가 사실은 뭐 aws도 빈스토크 보면은 비슷한 환경을 지원하긴 해요.
근데 애즈워만큼 이렇게 간단하게 되는 것도 아니고 좀 전혀 두 개가 다른 이제 환경인데 그 두 개를 바꿀 수 있다 이런 개념으로 보이지
뭐 내부는 비슷할 것 같지만 실제 사용성이라던가 ui ux 쪽에서 볼 때 애즈워가 훨씬 나아요.
첫 번째가 그거고 두 번째는 제가 좀 지금까지 말씀드렸듯이
이제 내 개인 컴퓨터에서 테스팅을 어떻게 할 거냐 이런 문제 얘기거든요.
근데 이것도 솔직히 애즈워를 쓰면 굉장히 편해지는 게 있어요.
그게 뭐냐면 예를 들어서 애즈워에서 뭐 asb.net 같은 경우 거기에서 이제 뭐 config 같은 걸 누르면 web config을 썼잖아요.
.NET core 같은 경우는 이제 뭐 따로 json 파일을 쓸 수 있지만 그럼 거기서 넣은 키가 있으면 그 키를 똑같이 애즈워 대시보드에서 넣는 것만으로 그 키가 바뀌게 할 수가 있어요.
이게 뭐 아마존에서 쓰는 그냥 환경 변수를 바꾸는 게 아니라 실제 거기서 쓰는 앱 세팅 변수가 따로 있어요.
그것도 있고 또 개발할 때 이제 ms sql 같은 경우 마이크 sql도 그렇고 커넥션 스트링이 있어야 되잖아요.
그러면 그게 로컬에 커넥션 스트링이 있어요.
그리고 마소거 이제 비주얼 스튜디오 다운받으면 기본적으로 iis 서버와 ms sql 로컬 db가 같이 딸려오기 때문에 새로 따로 깔 건 없어요.
그냥 비주얼 스튜디오 깔고 개발하면 그냥 거기서 돌다가 애즈워 올리면서 그 커넥션 스트링만 역시 그 대시보드에 있어요.
이 앱은 이제 이 커넥션 스트링을 쓸 거다.
한마디로 애즈워에 있는 db 아니면 다른 데 있는 프로덕션 db를 이거 쓸 거니까 커넥션 스트링을 바꿔달라 라고 그냥 대시보드에 세팅하는 것만으로 역시 그냥 세팅이 돼요.
그러니까 제 로컬에서 하던 거를 그냥 디플로에고 올린 다음에 거기서 세팅 두 개만 바꾸면은 모든 게 되는 거예요.
그래서 그런 부분도 일단 편했죠.
일단 서버나 이런 것들.
서버나 이런 걸 돌릴 수 있어요.
내 컴퓨터에서.
좋아요.
다음 단계가 이제 애즈워 서비스를 쓸 때가 문제였어요.
이제 애즈워에서 보면은 블랍 스토리지 이런 게 있잖아요.
뭐 아마존에서 본다면 이제 뭐 s3 스토리지나 아니면은 뭐 약간 테이블 쪽에 관련된 건데 이제 그런 거 할 때는 막 애즈워 sdk를 쓰잖아요.
그러면 이제 애즈워 sdk를 쓰면은 이거를 서버가 연결이 안 돼 있으면 연결이 안 되나 막 이런 고민을 했는데 사실 거기를 보면 또 재밌는 게
그 커넥션 스토리지 있잖아요.
블랍 스토리지에.
거기에 그냥 개발자 모드 true라고 해주면은 로컬 스토리지로 돌아요.
그냥 에뮬레이터가 있어요.
블랍 스토리지가.
그래서 제가 시작 메뉴 가서 애즈워 블랍 스토리지 에뮬레이터를 키면은 그리고 아까 말했던 개발자 모드 세팅을 true로 해주면은 그냥 그것만으로 로컬에 있는 블랍을 써요.
그래서 생각했던 것보다 굉장히 편했어요.
그냥 접속이 안 돼 있어도.
제가 개발한다 하고 테스트는 해볼 수 있는 거예요.
그리고 이제 그 다음에 서버 올려서 테스트도 해보면 되고.
그래서 마소가 되게 잘하는 게 그거였던 것 같아요.
언제나.
개발 환경을 확실히 잡아준다는 거.
그리고 이제 뭐 개발 환경을 할 때 쓸데없이 여러 개 많이 안 깔려도 된다는 거.
하나만 깔고 시작하면 다 되고.
그럼 그 다음에 이제 서버 올릴 때는 세팅 같은 거 바꾸기 되게 쉽게 해준다는 거.
그런 거였던 것 같고.
근데 이제 이거는 이제 애즈워 같은 경우도 새로 나온 제품을 모두 다 이렇게 제작한 거예요.
그냥 처음에 새로 작품을 만들고 한 다음 버전 정도가 나올 때부터 이제 그런 걸 계속 지원을 하는 거예요.
이런 게 불편함이 있으니까 로컬 스토리지 만들어줘야지.
이런 게 불편함이 있으니까 뭐 이제 로컬 디비 하나 같이 딸려 보내줘야지.
이런 것들을 되게 잘하고.
현재 막 그 웹잡이라고 있거든요.
약간 뭐라 그럴까.
애즈워 펑션이나 ASW 람다랑 조금은 다른 건데.
롱러닝 테스크인데 워커인 것 같아요.
AWS에서는.
그런 거와 이제 뭐 서비스 버스를 같이 연동해서 쓰려면 로컬에서 과연 잘 쓸 수 있냐?
그거는 아직은 좀 안 돼 있어요.
근데 뭐 서비스 버스가 사실은 프리뷰 버전이기도 하고.
그래서 이제 그래서 프리뷰라고 부르는 걸 수도 있어요.
어찌 보면은.
그래서 그냥 프리뷰라고 붙이면 욕을 좀 덜 먹으니까.
그러다가 이제 모든 개발 환경이 갖춰지고 나면 정식 버전으로 출시를 하는 걸 수도 있어요.
그래서 생각보다 애즈워를 쓰면서 로컬에서 개발 환경을 그대로 유지하기는 힘들어요.

그래서 개발자라면은 되게 쉬웠어요.
그래서 개발자라면은 특히 이제 뭐라 그럴까.
주먹구구식 개발자가 아니라 이제 자기 뭐랄까.
뭐 정확히 말하면 자기 뒤를 깨끗이 치우는 개발자라고 할까요?
코드 좀 이렇게 뭐 얼굴 화끈거리는 코드 짜기 싫어하는 사람들.
그거 못 버텨서 일찍일찍 고치려는 사람들.
그렇게 품질 관리를 스스로 하는 개발자라면은.
본인 개발 환경에서 모든 게 돌 수 있는 걸 되게 중요시하게 여겨요.
그리고 일단 아 내가 이게 어떻게 될지 모르겠지만 일단 서버를 올리고 나서 봐야 된다라는 그걸 되게 싫어하거든요.
서버의 개발 환경도 좀 더 힘들 수밖에 없고.
라이브 서버에 무슨 리모트 디버거 프로그램 깔아서 어태치하는 순간 좀 시큐리티 문제가 있을 수도 있고.
그래서 자기 개발 환경에서 최대한 잡으려고 하는 게 저는 훌륭한 개발자라고 봐요.
그러면 그런 사람들이 클라우드로 옮길 때는 솔직히 말하면 제가 볼 때는 AWS보다는.
Azure가 좀 더 맞는 거 같아요.
근데 이런 모든 툴을 제대로 쓰기 위해서는 당연히 C#쪽이나 ASP.NET이 좀 더 유리하겠죠.
왜냐면 자바 자체나 아니면 파이썬 자체에 이 정도에 되는 개발 툴이 없고 디버깅 툴이 없는 상황에서.
그게 매지컬하게 그냥 갑자기 Azure 서버에서 등장할 수는 없는 거거든요.
뭐 마소가 이제 갑자기 파이썬에 꽂혀 갖고 내가 파이썬을 이제 굉장히 뛰어나게 만들어 주겠다라고 생각하고.
완벽히 갈아엎어주지 않는 이상은.
저는 그런 일이 일어나지 않을 거라고 생각해요.
그래서 생각보다 굉장히 편해요.
그게 나쁘지 않았고.
그리고 닷넷코어가 지금 나와있고.
드디어 닷넷코어가 정식 버전이 나왔죠.
Visual Studio 2017하고.
지금 저희도 이제 검토해보고 생각을 해보고 있고 조금씩 짜보고 있는데.
굉장히 깔끔하고 좋더라고요.
그래서 닷넷코어 얘기도 언젠가는 할지 안 할지 모르겠지만.
일단 뭐 일단 ASP.NET이 좀 느렸잖아요.
굉장히 큰 패키지고 이랬는데.
닷넷코어는 ASP.NET 코어는 이미 Node.js의 성능을 이겼다는 얘기가 나올 정도로.
뭐 그것도 적게 이긴 게 아니라 몇백 배의 차이로 이겼다는 얘기가 나올 정도로 굉장히 발전에 있고.
근데 그거야 뭐 벤치마크 할 때야 언제나 지니한테 유리한 하드웨어 잡아놓고 하는 거지만.
그리고 ASP.NET 코어를 만들면 이거는 리눅스에서도 돌고 맥에서도 돌고 윈도우에서도 돌잖아요.
그래서 서버 올릴 때는 솔직히 어떤 서버를 올려도 상관이 없거든요.
그러면 저는 개인적으로 만약에 제가 리눅스 서버를 쓸지라도 닷넷코어로 해서 로컬에서 디버깅 다 하고 비주얼 스튜디오로.
그리고 스테이징 서버를 제가 윈도우에서 테스트할 이유는 없겠죠.
로컬에서 최대한 잡고 그 다음에 리눅스를 올릴 것 같아요 사실은.
왜냐하면 저에게 있어서는 일단 올려놓고 터지면 봐야지라는 마인드 자체가 되게 좀 껄끄러워요.
아니 뭐 그렇게 올려야 되는 것도 당연히 있는데.
그러지 않을 방법이 있는데 그런다는 것 자체가 좀 이해가 안 돼요.
그게 개발을 하려는 건지 그냥 코드 뭉키짓을 하려는 건지 생각이 좀 들죠.
오늘 얘기를 대충 요약을 하면은 특히 웹 개발에서 좀 심각한 문제가 돼요.
자기 개발 환경에서 얼마나 많은 걸 테스트할 수 있냐가 되게 중요한 것 같아요.
그리고 제가 개발 환경을 가지고 있으면 제 마음대로 막 고쳐볼 수가 있잖아요.
근데 남이랑 같이 공유하는 개발 환경은 못 그러니까.
그러면 그거를 할 때 옛날에는 BM 방식으로 내 컴퓨터에서 가상 머신을 돌리는 법이 있었지만
이제는 그게 바뀌어서 클라우드로 가는 상황에서 이게 과연 가능한가라는 고민을 했는데
생각보다 애저에서 제공하는 그런 툴셋이나 이런 게 꽤 괜찮고 굉장히 많은 걸 테스팅할 수 있다.
그래서 이 전환을 하면서 고민하시고 있는 분들이 있다면 한 번쯤은 제대로 검토해 보시는 게 좋을 것 같다는 생각이 들고.
뭐 애저가 옛날에는 굉장히 점유율이 낮았지만 제가 최근에 제가 확인한 건 아니지만.
들은 얘기로는 애저 점유율이 굉장히 많이 올라왔어요.
제가 그것도 예전에 아마 예측했던 비디오가 있는데 어떤 분이 저한테 그 예측이 맞았다고 얘기를 하더라고요.
그래서 구글은 10% 미만으로 떨어졌고 AWS 당연히 제일 높고 한 40몇 %였나?
그리고 애저가 30몇 % 정도 나왔던 것 같아요.
그래서 일단 규모도 커졌고 충분히 믿을 수 있는 이제 클라우드가 되고 있지 않나.
뭐 실제 많은 회사가 쓰고도 있고.
그래서 검토를 할 때.
이제 개발 환경 검토도 많이 해보시길 바래요.
개발 환경을 잘 세팅하고 그만큼 시간을 절약할수록 개발에 대한 시간을 절약할수록 서비스는 빨리 나가는 거니까.
뭐 그 정도.
오늘도 마소 자랑을 많이 했군요.
포프였습니다.
