안녕하세요 포프입니다. 또 만드네요 비디오. 오늘은 무슨 얘기를 해볼까 하다가, 게임 쪽을 떠났는데도 불구하고 상당히 게임 쪽 생각을 많이 하게 되더라고요. 이렇게 이제 오히려 한 발 물러나 있으니까 옛날에 했던 것들도 생각이 나고, 모르겠어요. 그렇게 제가 어느 한 회사에 소속이 되어 있지가 아니니까 그래서 그런지 사람들이 저한테도 질문을 편하게 해 오는 것 같아요. 이렇게 제가 어떤 그래픽 쪽에 대답을 해줘도 그게 회사 기밀을 빼내는 게 아니잖아요. 저만의 지식이니까요. 그래서 그런 질문도 한국분들한테도 많이 오고 웹 분들도 좀 오고 그래요. 그래서 오히려 생각할 기회가 많지 않았나 싶어요. 되게 재미있는 게 그건데요. 최근에 이제 또 알파 텍스쳐에 관해서 얘기를 좀 들은 게 있어요. 제가 지금 계약 일로 해주고 있는 게임 포팅 쪽 일이 하나 있는데, 거기에서도 그런 문제가 좀 있었고요. 일단 알파텍스처가 정확히 뭔지에 대해서는, 기본적으로 transparency, 투명한 것 반투명한 것 이런 걸 이제 알파 채널에 넣어서 뭔가 많이 하잖아요? 반드시 그런 건 아니지만 다음 기회가 되면 비디오로 만들어 드릴게요.

PC 게임도 그렇고 콘솔 게임에서도 그렇고 사실은 알파 텍스쳐가 굉장히 참 애물단지예요. 이유가 뭐냐면 그 일단 첫 번째 말씀을 드려야 할 건, 그 압축을 한다는 것을 말씀을 드려야 될 것 같아요. 웬만한 게임에서 텍스쳐는 다 압축을 들어가요. 그 이유가 뭐냐면 보통 생각하는 PNG, JPG 이런 압축이 아니에요. 그건 다 아실 것 같지만, PNG나 JPG 같은 건 이미지 소스에 따라서 굉장히 크기가 다르잖아요? 이미지가 완전히 까만색인 경우는 PNG로 압축을 해도 손실이 없는 압축방법 이거든요. 그러면 용량이 굉장히 작아지기도 하죠. 그거에 비해 많은 색깔이 다양하게 섞여 있고 매 픽셀마다 색깔이 달라지는 건 당연히 압축이 더 안되고 이런데요. 일단 컴퓨터 그래픽 쪽에서는 특정한 압축 방식을 써요. 그리고 그 압축된 이미지를 하드웨어에서 지원을 해 줘야 되고요. 압축 방식이 아니라 압축된 이미지를 곧바로 화면에 뿌릴 수 있는 걸 하드웨어에서 지원을 해 주면 압축을 푸는 데 걸리는 속도가 거의 없으니까, 메모리에는 압축된 상태로 올려놓고 그냥 그래픽 카드에 뿌릴 수 있으니까 그런 압축 방식을 많이 쓰는데요. DirectX9 까지는 DXT1, DXT5 정도의 압축방식이 가장 많이 쓰였고 DirectX11로 지금 넘어간 상황에서 훨씬 나은 압축 방식이 있어요. 압축률이 좋다는 게 아니라 퀄리티가 좋은 거죠. 예를 들어서 DXT1 같은 경우는 알파 채널이 없을 때 주로 RGB채널에서만 쓰는 거고, 알파 채널이 들어가면 DXT5 까지도 써요. 그런데 압축률이 상당히 좋은 게 뭐냐면, 압축을 하지 않은 RGBA 채널마다 8비트 단위인 이미지는 한 픽셀당 바이트가 4개예요. 그래서 보통 압축되지 않은 텍스처 크기를 구할 때, 너비 x 높이 x 4를 하면 그게 RGBA 텍스쳐고 RGB 텍스쳐는 그냥 곱하기 3이죠. RGB 텍스처도 보통 4개씩 집어놓고 알파 채널을 무시하기도 하죠. 그게 중요한 건 아니고요.

효율이 얼마냐를 따졌을 때 DXT1의 경우는, 각 픽셀이 4바이트, 즉 32비트 텍스처에 RGB만 들어가 있을 때 이걸 압축을 하면, 품질의 손실은 좀 있어요. 사람이 좀 보기 힘들게 적당히 손실이 있죠. 근데 RGB 채널을 DXT1로 바꾸면 압축률이 8:1로 돼요. 그러니까 원래 한 픽셀당 4바이트였잖아요. 그러면 DXT1로는 1픽셀당 0.5바이트가 돼요. 메모리를 8배 아끼는 거죠. 그리고 RGBA까지 들어가면 DXT5로 compression 하면 4:1이 돼요. 그러니까 한 픽셀당 1바이트가 되는 거죠. 그런 메모리적인 이유 때문에 게임에서는 거의 모든 텍스쳐는 압축을 한다고 보는 게 맞아요. 압축하는 알고리즘에 따라 조금 더 나은 방법도 보일 수 있긴 한데, 결과적으로는 압축에 따른 손실이 보일 수밖에 없는 게 게임 쪽 텍스처고요. 그렇기 때문에 뭉개지는 기분 있죠? 이렇게 디테일하게 그려도 4 by 4 블록 단위로 압축을 해요. 그래서 그 픽셀 안에서는 좀 흐리멍덩해지는 효과가 있어요. 그리고 칼라 같은 경우도 좀 많이 번지는 경우가 있고요. 알파 같은 경우는 당연히 굉장히 부드럽게 변해야 되는데, 뭉뚱 해져서 이상하게 겨울에 손자국 내듯이 보이는 경우가 있고요.

이 얘길 왜 드리냐면 제가 그래픽 프로그래머 일을 할 때도 그랬고, 아티스트들이 상당히 불만이 많아요. "나는 텍스쳐로 이렇게 잘 만들었는데, 게임에 넣으니까 게임 텍스처가 엉망으로 보인다. 보인다 뭐가 문제냐?" 하면서요. 그럼 이제 그래픽 프로그래머들의 성향이 조금 갈리는 게 보이는데요. 일단 한국이 요즘 갑을이라는 표현을 많이 쓴다고 하더라고요. 저도 이제 알게 돼서 재밌게 쓰고 있는데, 갑질을 좋아하시는 그래픽 프로그래머 분들은 말해요. "원래 그런 거예요. 그냥 해요." 그럼 어떻게 더 낫게 만드는 방법이 없냐고 물으면 없다고 관두라고 답해요. 이런 개념의 분위기고요.

이제 을질.. 아 을질은 아니구나. 제가 생각할 때 올바른 그래픽 프로그래머의 자질을 가지고 있는 사람들은 본인을 노예라고 생각을 해야 해요. 노예는 좀 과격한 표현일 수도 있는데요. supporting-role, 그러니까 지원하는 위치죠. 결과적으로 게임의 아트를 만드는 것은 아티스트예요. 그래서 아티스트가 정말 그 사람들이 원하는 비주얼을 게임에 그대로 나올 수 있게 해주는 임무가 그래픽 프로그래머라고 생각을 하고요. 아티스트가 원하는 것을 최대한 만들어 줄 수 있는 그래픽 프로그래머가 돼야 하고 그리고 아티스트에게 컨트롤을 주는 거죠. 아티스트가 스스로 원하는 비주얼을 만들었을 때, 실제 게임에 나올 수 있게 쉽게 툴만 제공해 주고, 어떤 방법만 제공해 주면 그래픽 프로그래머가 더 이상 할 일이 별로 없어요. 사실 아티스트 알아서 만들어서 게임의 집어넣기 때문이죠. 이제 텍스쳐 퀄리티 같은 게 굉장히 문제가 많은 거죠. 왜냐하면 압축을 하기 시작하면 퀄리티가 떨어지고, 아티스트가 그걸 낫게 만드는 방법이 별로 없어요. 그러면 그만큼 텍스처 크기를 키우면 된다라는 얘기도 있지만, 이미 텍스쳐 용량을 줄이기 위해서 알파 채널 같은 경우 DXT5 들어가기도 할 테고 DXT1로 알파채널만 뽑아내는 경우도 있는데요. 알파채널만 따로 떼고 보면 이래 저래해도 품질은 똑같아요. 어차피 RGBA 텍스쳐를 DXT5로 봤을 때 알파채널 하고 RGB채널은 따로 압축이 들어가기 때문에 역시 알파채널만 되는 거죠. 그리고 똑같은 얘기로 DXT1으로 압축을 해도 채널이 하나뿐이면, 결국에 가장 비트 수가 많은 그린 채널 6비트로 가는 것이기 때문에 그것도 똑같고요. 엄밀히 말하면 알파 채널을 넣는 게 조금은 낫긴 해요. 그게 실제 비트 수가 좀 더 많기 때문이에요.

근데 알파 채널 따로 분리해서 RGB에 처박아서 DXT1 compression을 하나, 아니면 RGBA 같이 채널에 넣어서 DXT5을 하나 결과적으로 메모리 용량은 같지만 텍스쳐가 하나기 때문에 일장일단은 있죠. 뭐든 간의 제가 드리고 싶은 말은, 품질이 떨어진다는 거예요. 그럼 이 품질을 높이기 위해선 어떻게 하냐? 사실 이거를 제가 예전에 캡콤(前 블루 캐슬 게임즈) 다닐 때 데드라이징을 저는 안 만들었는데, 그때 저랑 원래 같이 일을 잘했던 그 영화 쪽에서 오셨던 분이 있어요. 영화 쪽에서 그 슈퍼맨 영화 이런 데서 렌더링 테크니컬 아티스트로 라이팅 하던 분인데요. 그분이 그때 데드라이징 투어에 참가하셨기 때문에 이제 쉐이더를 갖고 열심히 노셨어요. 그 사람이 저랑 그래도 이해가 잘 맞는다고 생각을 많이 했던 거 같아요. 다른 팀인데 언제나 저를 불러왔고 이거 어떻게 하는지 서로 고민을 많이 했던 게 있어요. 그게 바로 텍스처 압축 문제였어요. 그 사람도 언제나 텍스쳐를 제대로 만들어서 게임에 집어넣는데 뭔가 뭉개진다는 거예요. 그래서 제가 하도 열이 받아가지고 압축된 텍스쳐를 달라고 해서 그걸로 테스트해보겠다고 해본 거예요. 저희가 만든, 쉐이더 갖고 노는 툴에 넣고 해 봤죠. 이 분이 아무리 해봐도 압축은 정말 하면은 도저히 이게 원하는 결과가 안 나온다고 해요. 좀비 얼굴이 너무 개판이라고 얘기 많이 했어요. 둘이 앉아서 참 많이 고민을 했죠. 이걸 과연 어떻게 하면 나아지게 하겠는지요. 이게 결과는 되게 황당했어요. 이게 사실은 아까 말했던 것 갑질하시는 그런 프로그래머들 있다고 했잖아요? 그분들도 이건 원래 그런 거 안 되는 거라고 생각을 하고, 아티스트가 제발 그냥 편하게 따라왔으면 하는 생각을 하시는 건데요. 좀만 생각해 보면 사실 방법이 있긴 하더라고요. 그래서 저희도 결과적으론 그 길로 가자고 얘기했는데, 제가 퇴사를 해서 그 뒤엔 어떻게 되는지 모르겠고요. 결과는 한마디로 이거였어요. 그냥 택스처 압축 안 하면 돼요.

이게 무슨 개소리인가 이럴 거 아니에요. 여기가 진짜 웃긴 답변이에요. 아까 말씀드렸죠. 텍스쳐가 1024 * 1024였다고 해봐요. 그럼 이거를 RGBA로 넣어서 DXT5로 압축을 해요. 그러면 원래 압축되기 전에 크기는 1024 * 1024 * 4 바이트, 즉 4MB에요. 압축을 하고 나서는 RGBA -> DXT5로 압축해서 1/4이기 때문에 1MB가 돼요. mipmap까지 뽑아내면 그게 2MB 정도 되겠지만, mipmap 없을 때 1번째 mip만 생각했을 때 1MB에요. 그렇게 해서 압축을 해서 뭉개지게 쓰느냐 vs 압축을 안 하고 쓰냐예요. 근데 압축을 안 하면 4MB라 그랬죠? 이 4MB를 줄이려면 width와 height를 줄이면 돼요. 1024 by 1024를 512 by 512로 줄이면 크기가 1/4이 돼요. 그리고 실제 용량은 4MB에서 1MB로 줄어들죠. 저희가 실험을 해봤어요. 압축을 안 하고 크기를 반반 잘라 만든 텍스쳐와, 크기는 큰데 압축한 텍스처와 비교했어요. 솔직히 말하면 언제나 그런 건 아니지만 때에 따라서 특히 알파채널이 들어가 있을 때, 압축을 안 하고 크기를 반으로 줄인 텍스쳐가 굉장히 훌륭한 결과를 주는 경우가 많았어요.

물론 사실은 이외에도 다양한 문제가 있죠. PC 쪽은 아닐 수도 있겠지만, 콘솔 쪽에서 압축을 할 때 이 압축한 블록 단위를 배치를 잘해서 메모리 캐시를 더 효율적으로 사용해서 속도가 빠르게 만드는 법도 있고요. 맵 좀 더 최적화된 그런 경우가 있는 경우가 있어요. 그래서 그거 때문에 약간의 그래픽 텍스처로 읽어오는 속력이 느려질 수 있지만 사실 요즘 (DirectX9부터) 웬만한 그래픽카드에서 텍스쳐를 읽어 오는 게 병목(Bottleneck)이 돼서 렌더링이 느려지는 경우보다는, 픽셀 쉐이더가 비싸고 느려지는 경우가 많아요. 그렇기 때문에 사실은 그거에 대한 성능 저하는 저는 거의 없을 거라고 보고요. 그 당시에 거의 없다고 봐요. 고성능까지는 제가 측정은 안 했던 것 같아요. 때는 근데 크게 문제가 없다고 저희는 판단했고요. 제가 게임 만들면서 봤을 때 텍스쳐가 읽어 오는 것 때문에 문제가 된 경우는 나중에 포스트 프로세싱 돌릴 때 정도였죠. 사실 웬만한 경우에서는 대부분이 픽셀 쉐이더 연산의 문제였고요. 그런 간단한 방법이 있어요. 그래서 제가 하고 싶은 말은, 그냥 이건 안 되는 거다라고 생각하기 전에 정말 메모리가 문제여서 그거를 압축을 못 풀어 주고 그래서 어쩔 수 없이 압축을 해야 되는 상황이면, 그래피 프로그래머 분들은 좀 그렇게 생각을 해줬으면 해요. 여러 가지 방법으로 똑같은 결과 아니면 더 나은 결과를 성취할 수 있는 방법이 있어요. 메모리가 문제면 메모리를 줄이면서까지 하는 방법도 있고요.

그리고 이것은 PC DirectX9에서는 거의 지원을 안 해주는 부분인 것 같긴 한데요. DirectX11에서는 지원한다고 기억을 해요. 알파텍스쳐만 있는 경우 있잖아요? 그 채널 딱 하나만 있는 경우에는 DX9 하드웨어 수준에서 싱글 채널 luminance 8bit를 지원하는 그래픽카드가 거의 없었어요. 제가 옛날에 필요해서 봤는데, 그때는 어쩔 수 없이 울며 겨자 먹기로 DXT1으로 붙였죠. 콘솔 쪽에서는 그게 거의 지원을 해요. 채널 하나짜리 텍스처 압축 안 하고 채널 하나로 하고 크기 줄여서 집어넣으면 DXT1 보다는 2배 커질 수도 있지만, DXT5에 비해서는 그냥 똑같은 크기가 되는 거죠. width와 height 사이즈를 줄여 줌으로써 요. 그런 방법도 있고, 아니면은 어차피 압축 안 해서 들어간 텍스쳐면 RGB 합쳐봐야 상관없거든요. 그러면 그냥 RGBA 합쳐서 텍스처 하나로 줄이고 하는 방법도 있고요. 그래서 혹시라도 회사에서 텍스처 압축 때문에 품질 망가져서 걱정하시는 아티스트 계시면 이거를 프로그래머에게 말씀해 주시면 좋을 거 같아요. 제 비디오를 드리거나 그래픽 프로그래머 중에서 이제 제 비디오 보고 계시는데, 여태까지 아티스트가 계속 못 고친다 얘기했는데 어떻게 해야 될지 몰라서 "몰라요 원래 그런 거예요"라고 하셨던 분들은 한 번쯤 시도해 보세요. 쉽잖아요. 텍스쳐 압축해 놓은 거 하나 갖다 놓고 압축한 거 크기만 포토샵에서 크기 줄여서 놓고 실제 나오는 결과를 비교를 해 봐요. 상당히 놀랄 거예요. 생각보다 그런 크기가 작고 압축을 안 한 텍스쳐가 더 좋은 경우도 있어요. 그리고 이 크기가 작아지는 게 문제라면, mip chain에서 bias를 조금 더 주면 돼요.

사실 웬만한 카메라 view에서 볼 때, 저희가 0번째 mip을 보는 경우는 웬만한 게임에서 정말 카메라를 가까이 들이밀지 않는 한 굉장히 드물어요. 한국에 나오는 보통 게임들의 view를 봤을 때 제가 볼 때는, 0번째 mip은 안 써요. 거의 0.5나 1.5 사이로 줄여볼 거예요. 그러면 결과적으로 저희가 보는 mip은 제일 고해상도 mip이 아니라, 1024 by 1024가 원래 텍스쳐였다면, 512 by 512 mip을 주로 보는 거예요. 그러면 텍스쳐를 작게 해 주고 mip bias를 1 정도 마이너스 줘 버리면 그 똑같은 view에서 제일 상위 텍스쳐를 본다는 얘기니까, 어차피 보이는 결과는 정말 비슷할 거예요. mip bias 조금 넣어주고 텍스쳐를 반을 줄이더라도 압축을 하지 않은 것을 (전부 다 하지 마시고요. 전부 다 해야 될 이유도 좀 모르겠어요) 부분적으로 이렇게 지원을 해줄 수 있는 부분에서 해주면 (특히 알파 채널 같은 경우 들어갔을 때) 제가 볼 때는 충분히 그래픽 품질이 더 나아질 거라고 봐요. 그래서 또 그래픽 프로그래머 얘기를 했고요. 오늘은 이 정도면 된 거 같네요. 포프였습니다.