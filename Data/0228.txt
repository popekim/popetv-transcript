오늘은 그런 얘기를 할게요
얼마 전에 굉장히 유명한 자바스크립트 패키지들이 있었어요
노드 NPM, 노드 패키지 매니저에 많이 올라왔던 건데
그런 굉장히 유명한 자바스크립트 오픈소스 프로젝트들
제가 이름은 정확히 지금 기억이 안 나는데
아마 바벨도 그 중에 하나였던 것 같고
어쨌든 사람들 수만 명, 수십만 명이 쓰는 그런 라이브러리가
한동안 하루인지 반일인지 못 쓰게 된 적이 있었어요
그 이유가 뭐였냐면
NPM에서 굉장히 유명한 패키지가 하나가 있대요
패키지라는 건 라이브러리죠
그 LeftPad라고 제가 들은 게 맞다면 문자열에 정리를 해주는 거예요
예를 들어서 문자열이 세 개라면 왼쪽에 스페이스 다섯 개를 박아서
여덟 글자로 만들어주거나
문자열이 다섯 개라면 세 개를 박아서 여덟 글자로 만들어주거나
이걸 해주는 라이브러리가 굉장히 유명했대요
노드 NPM에서
그게 LeftPad라는 라이브러리인데
그 원자자가 NPM 쪽하고 좀 문제가 있어서 승질 나갔고 그걸 지워버린 거예요
그 패키지매에 지워버리니까 그 패키지에 의존하고 있던
말도 안 되게 수많은 그런 자바스크립트 오픈소스 프로젝트들이 안 돈 거예요
그래서 그게 망가졌죠
그다음에 이쪽에서 미국 쪽인지 영국 쪽인지 영어권에서
어떤 개발자가 "너네 코딩 못하냐?"
"어떻게 열한 족자리 이런 패키지를 네가 직접 짜면 되는 걸"
"왜 이걸 라이브러리에서 네 메인 오픈소스 리포가 망가지게 하냐"
이런 얘기를 했어요
그러니까 이제 거기서 또 엄청난 댓글이 달렸죠
그래서 뭐 이거는 그게 문제가 아니라 재사용성을 위한 거고
그러면 프로그래머가 어떤 코드를 짜던 간에 버그는 나올 수 있는 건데
그럼 나는 내가 짜서 테스팅도 제대로 못해서 버그를 만들기보다는
이미 검증되고 테스트를 완벽하게 마친 다른 패키지를 쓰겠다
이런 식으로 댓글이 많이 달렸고
"너는 코드 재사용성을 이해 못한다"
그리고 이제 그 원 저자가 또 차 안에는 엄청나게 만련된 패키지 하나가
이 변수가 array인지 보는 한 줄짜리 코드
그것도 따로 패키지로 만들고 있고
그거를 또 쓰고 있는 유명한 오픈소스 프로젝트가 있었어요
그래서 이 사람이 하는 얘기는
"이건 너무 극한 거 아니냐"
"코딩을 못하니까 이런 거에 의존하는 거 아니냐"
그러면 단지 쪽지진영에서는 "아 우리는 코드 유지 보수를 위해 그런 거다"
라는 식으로 많이 싸웠죠
솔직히 여기에 대해서 제가 싸움에 가담하고 싶진 않아요
저는 저만의 원칙이 있고 제가 어느 쪽인지도 알고 있는데
일단 한 가지 오류를 제가 잡고 싶은 건 뭐냐면
단지 나미짱 코드고 많은 사람들이 쓴다고 해서 버그가 없다는 생각은 잘못된 생각 같아요
예를 들어서 내가 이미 테스팅을 안 하는데 왜 다른 사람이 작성해서 npm 패키지 올려놓은 게 테스팅을 다 거쳤다고 생각하는지 이해가 안 돼요
이거는 어찌보면...
그냥 책임 회피하기에 가까운 그런 내용이 좀 가깝다고 보거든요
그래서 저는 그거는 그냥 변명이라고 좀 보고 있고요
그리고 근데 오늘 하려고 했던 얘기는 그거는 아니에요
제가 진짜 오늘 하려고 하는 얘기는 뭐냐면
이런 일이 있어서 코드 재사용성도 좋고 코드 안정성도 좋아요
근데 결과적으로는 이런 중요한 라이브러리가 다운이 됐다고 해봐요
그래서 그게 뭐 반일이 됐든 하루가 됐든 다운이 됐어요
누군가 그 똑같은 패키지를 만들어서 짜든 그 코드를 다시 써야겠죠
근데 그 코드를 딴 패키지를 찾아서 쓴다고 하면은 그 코드가 검증이 된 거란 건 어떻게 알죠?
모르죠 여전히 위험성은 그대로예요
그리고 두 번째는 내가 직접 짜도 전에 말한 것처럼 위닛 테스트 제대로도 안 했고
그럼 제 코드 버그가 있을 수도 있잖아요
그럼 결과적으로는 문제는 똑같아요
그러면 언젠가 생긴 문제를 그냥 결국 그냥 대충 미루고 있었다는 얘기거든요
정말 중요한 거는 이런 문제가 생긴 날이 예를 들어서
제가 라이브로 나가야 되는 날이라고 생각을 해봐요
라이브로 나가야 되는데 패키지가 사라졌어
반일 동안 못 나가요 그럼 어떻게 할 거예요?
제일 중요한 그거예요 사실은 아 그럼 너네가 테스트를 미리 한 다음에 라이브로 나가면 된다
테스트에서 망했기 때문에 라이브 안 나가면 끝이지 않냐
지금 핵심은 그게 아니에요
제가 오늘 라이브로 못 나감으로 해서 제가 고객한테 돈을 몇만 부를 수도 있어요
한마디로 이거는 소프트웨어 뭐 뭐 엔지니어링 아니야 뭐라고 하지 사이클이라고 하나요?
그런 프로세스적인 면에서 봐도 굉장히 말도 안 되는 얘기거든요 사실은
왜냐하면 굉장히 언젠가 내 뭐라 그럴까 컨트롤이 아닌 부분에서 망가질 수 있는 거를 막 그냥 놔둔 거예요
npm 서버 다운되면 어떡할까 막 이런 것도 있잖아요
그럼 결과적으로는 회사 입장에서는요
뭐 지금 뭐 이 지정이 맞다 저 지정이 맞다가 문제가 아니에요
어느 회사든 제품을 만드는 회사면요 이런 퍼블릭 리퍼에 의존하면 안 돼요
그게 중요한 얘기거든요
npm 리퍼에 올라온 거를 어떤 버전을 쓰고 있느냐
그 버전 패키지가 사용할 수 있잖아요
그러면 그 패키지를 다운로드하고 복사를 한 다음에
자기 사설 회사만의 사설 리퍼를 올려놓고 거기에 모든 패키지가 있어서
자기는 그 패키지 리퍼가 다운되든 말든 저는 어떻게든 언제든 라이브로 나갈 수 있는 준비가 돼야 돼요
그게 되게 중요한 메시지예요 근데 그거를 많이 놓치는 거 같아요 사람들이
npm을 프라이빗 리퍼로 만들 수 있는 방법이 쉽냐?
그렇게 쉽진 않은데 있긴 있다고 알고 있어요
똑같은 개념으로 마이크로소프트에서 누겟 리퍼가 있어요
걔네도 다운될 수 있고 누구든 리퍼를 지울 수 있어요
그럼 저는 저만의 리퍼로 만들어서 서버를 돌리는 게 맞고
그리고 실제는 그렇게 쉽게 해주기 위해 이미 누겟 패키지가 또 나와있어요
그러니까 그것도 없어도 난리가 나는 거지만
그렇고 지금은 이제 비주얼 스튜디오 온라인 있잖아요
거기서 아마 거기서 이제 지금 베타인데 패키지 매니저를 기본적으로 제공을 해요
그래서 거기다 리퍼에 패키지를 올려놓으면 다운로드할 수 있게
그건 내가 관리하는 리퍼니까 서버니까
내가 소유한 비주얼 스튜디오 온라인 리퍼
소스코드 리퍼 플러스 패키지 리퍼니까 제꺼죠
누가 지울 수는 없지만 서버가 다운될 수는 있죠
그럼 이제 그거는 또 이제 서버를 믿느냐 그거의 얘긴데
저는 뭐 이렇게 기터브나 이런 마이크로소프트의 서버는 그나마 좀 더 믿을 것 같아요
허나 리퍼에 그니까 패키지 매니저 리퍼에서
내가 관리하지 않는 거에서 뭔가 사라지는 건 정말 제가 믿기가 좀 어렵거든요
그럴 수 있겠다고 생각하기 때문에
그래서 정말 제대로 소프트웨어 개발하는 사람들은 두 가지가 확실해야 돼요
정말 이렇게 막 뭐랄까 회사 입장에서 하는 사람들
자기만의 리퍼 패키지 리퍼로 반드시 만들 것 되게 중요한 거예요
두 번째 이게 npm의 기본 동작의 지금 문제라고 알고 있는데
어떤 패키지를 받을 때 얘는 기본적으로 최신 패키지를 받게 돼 있대요 무조건 잘못된 거예요
특정 버전을 받아야 돼요 사실은
1.0을 내가 쓰고 있으면 지금 제가 만드는 코드에서 1.0만 써야 돼요
그리고 내가 1.1로 만약에 최신 버전 업그레이드 하고 싶으면 누군가 업그레이드 해보고 테스트 해보고 그게 됐다 그러면 1.1로 업그레이드 하게
제가 이 이야기를 왜 하냐면 전에 있던 웹회사에서도
그 저희 프론트엔드 쪽 애들이 그냥 npm 그냥 그렇게 한다니까 그렇게 해서 패키지를 받아놓은 거예요
근데 최신 버전을 받겠는데 진의 하드에 깔려있는 버전은 예전 버전이었고
새로 들어온 애가 받게 되는 버전은 새 버전이었거든요
근데 예전 버전에 들어온 게 새 버전이라서 안 돼 뭔가 망가졌어
그래서 얘는 그거 디벙이랑 시간 남겨갖고 얘는 어 나는 되는데 그리고 넘어가고 있고
이런 것들 라이브러리 버전 관리 굉장히 중요한 거죠 소프트웨어 개발에서 사실은
그리고 라이브러리 그런 거 파일 잘 관리하는 거 프로젝트 관리하는 거 되게 중요한 거였죠
근데 이게 어느 순간 망가지고 있다는 게 웃겨요
근데 그 좋은 소프트웨어 품질을 결정하는 거는
뭐 지금 말했던 것처럼 무슨 코드 재활이라는 거죠
활용성 아니면 뭐 니가 코드를 잘 짜고 혼자 짤 수 있다 이 문제가 아니라
현재 있는 그니까 작동했던 것들 패키지들 라이브러리들
이거 이게 안 빠개져야 되는 거거든요 기본적으로
왜냐면 거기에 맞춰서 코드가 돌고 있는 건 확실하니까
그리고 똑같은 개념으로 제가 몇 번이나 이건 예전부터 한 얘긴데
보잉사 들어가면 아직도 비주얼 베이직스고요
왜냐면 그거는 다 시큐리티 검증 받고 무슨 뭐 이소 검증 받고 다 한 거거든요 버그 다 확인하고
옛날 비주얼 베이직 비주얼 베이직 6
닷넷도 아닌 거 그걸 못 올려요
왜냐면 올리는 순간 버그 체크 다 해야 되고 막 검증 다 돌려야 되고 이러니까
그래서 걔네들도 그걸 못 올리고 있거든요
근데 걔네들은 사람의 생명이 걸린 거라서 그렇고요
근데 이제 저희 쪽은 좀 그것보다 완화되긴 했는데
내가 나가야 되는 날에 못 나가는 게 정말 나만의 컨트롤이 아니라
다른 사람의 컨트롤 때문에 그렇다 이거는 좀 프로세스적으로 굉장히 문제가 있어요
그래서 그 정도는 정말 패키지 리포를 자기가 가지고 있는 게 좋고
그리고 저는 지금 생각하는 게
제가 지금 인터넷을 직접 보지는 않았지만
npm 쪽 리포를 관리하시는 분들이 있다거나 아니면 그거를 서비스를 하시는 분들이 있다면
npm 퍼블릭 리포가 있고
거기서 개인 리포로 뽑아서 복사본을 만들어 놓고
퍼블릭 리포가 지워지든 말든 버텨지는 그런 이렇게 브랜치 개념이 있잖아요
리포의 브랜치 개념 클론 포크 개념
이거 만들면 아마 돈 받고 팔 수도 있을 것 같아요
그러니까 뭐라 그럴까 회사용 리포 관리
누겐 리포든 npm 리포든 내가 만들까?
나쁘지 않은 생각 같은데?
cdn 이용하면 될 것 같은데?
그것도 괜찮은 생각이네요
그래서 그런 식으로 프로세스를 좀 잘 잡아야 된다고 생각을 해요
이거는 제가 생각하고 있는 다른 서비스에 연동시켜도 될 것 같네요 생각해보니까
그래서 오늘 하고 싶었던 말
개발 과정 그리고 특히 라이브 나가는 과정 출시하는 과정에서는
서프라이즈 그러니까 예측 못했던 그런 것들이 없는 게 좋아요
그럴 가능성이 적은 게 정말 좋아요
그게 웬만한 제작이 아니라
제품의 출시를 부드럽게 하냐 마냐의 차이거든요
npm 리포 만드는 거 이 서프라이즈 당하는 것보다 훨씬 나은 것 같고요
그거 만드는 게
그리고 두 번째가 이제 누겐 리포는 워낙 쉽고 이미
그래서 그런 거에 좀 더 신경 쓰면 좋겠고
그리고 제가 볼 때는 지금 이 npm 진영 쪽이 어찌 보면은
생각 자기가 원래 예측했던 것보다 너무 커져 버린 것 같거든요
원래는 이렇게 커질지 모르고 시작을 했다가 갑자기 커지니까
이렇게 이런 뭐랄까 좀
출시에 따라 뭔가 크게 손해 볼 수 있는 그런 기업 환경 이런 거에서
경험해보지 못한 사람이니까 그런 걸로 좀 너무 간과하는 것 같긴 해요
그래서 그건 좀 고쳐줘야 될 것 같고
개발자로서 이제 그리고 아마 뭐 회사에서 출시 같은 거 담당하시는 분들의 개념에서는
그런 것만 신경 써주세요 그냥
어디서 과연 우리가 우리 힘이 아닌 다른 거로 망가지면 문제 생길 게 뭐가 있냐 그런 것들
그래서 이제 오늘 포프TV는 그 정도로 하죠
이건 뭐 제가 뭐 어느 양쪽 진영을 까고 이게 아니라 그런 정도로
프로세스에서 중요한 부분들이 있다는 거
예 그 정도면 될 것 같네요 오늘은 포프였습니다
