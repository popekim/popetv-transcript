얼마 전에 봤던 웹툰 중에 네 컷짜리 해외 웹툰이 있었는데, 되게 재밌는 게 있었어요. 코딩 스탠다드에 관한 내용이었나? 코딩 스타일에 대한 내용이었나 둘 중 하나였는데.

“우리는 코딩 스타일이 너무 나쁘다, 어쩌구 저쩌구.” 하더니, “그래! 그러면 업계에서 사람들이 쓰는 가장 좋은 코딩 스타일을 만들어서, 최고의 코딩… 가장 많이 쓰는 코딩 스타일들, 유명한 거, 큰 회사가 쓰고 있는 거, 걔네들을 모아서 장점만을 뽑아서 우리는 최고의 코딩 스탠다드를 만들겠다.” 했는데 그게 불가능한 거예요. 왜냐면 서로 상충하는 게 너무 많아서.

이 얘기를 왜 하냐면, 제가 ‘원칙 있게 코딩하라’는 말을 되게 많이 해요. 그러니까 원칙 있게 코딩하라는 게, 자기 자신만의 원칙이 있어야 한다는 것이거든요. 예를 들어서, 뭐 전에 ‘종교전쟁’이라고 얘기했던, if 안에 코드가 하나 있을 때 Bracket(중괄호)을 여냐 마냐 이런 경우 있잖아요? 자기만의 소신이 있고, 자기만의 원칙이 있고, 그걸 왜 그래야 하는지를 믿고 따르라는 말을 하고 싶어요. 저는 중괄호 여는 게 제 소신이고, 제가 짜는 코드에는 언제나 중괄호가 열려 있어요.

근데 가끔 어떤 사람이 짠 코드를 보면, 코드를 체킹해요. 파일이 5개가 있는데, 이 파일에서는 안 열어. 이 파일에서는 열어. 모든 스타일이 중구난방으로 섞여 있는 경우가 있거든요. 이게 가장 단순한 예를 들어서 중괄호 여는 건데, 그뿐만이 아니라 오브젝트 디자인이라던가, 인터페이스 이런 얘기, 전에 했던 것들. 그런 것도 자기만의 원칙이 있으면 일관적인 코드가 나와요. 그러면 거기서 오는 장점과 단점이 있기 때문에 단점만 조심하면 되거든요.

근데 원칙이 없게 짜는 사람들, 세상 모든 것에 장점이 보이니까 그걸 그냥 다 가져오겠다고 하는 사람들이 있어요. 새로운 거 나오면 일단 써보고, 여기서 하는 이거 가져오고, 저기서 하는 저거 가져오고… 그래서 코딩이 어찌 보면 그 안에 10가지 방법이 있어요. 하나로 할 수 있는 거야. 근데 열 가지 방법을 다 쓰고 있는 거야.

이거의 단점은 뭐냐면요. 장점이 10배가 된 만큼, 단점도 10배가 돼요. 그러면 원래 한 가지 코딩 스타일만 있고, 한 가지 원칙으로만 코딩을 짰을 때 주의해야 할 것이 이만큼이라면, 지금은 갑자기 10개가 들어오면서 서로 섞이면서 주의해야 할 것이 10배로 늘은 거예요.

원래 코드의 절반은 디버깅이라고 제가 전에도 말씀드렸잖아요. 진짜 코드 짜다 보면은 아무리 잘하는 코드 짜는 애들도 실수 한두 개 만들고, 처음에 안 보이고 버그로 생겨서 버그 고치면서 고친다고요. 근데 결국 단점이 10배가 된다는 것은 버그를 만들 확률도 10배가 된다는 얘기거든요. 왜냐면 사람이라는 게 그렇잖아요.

운전 배울 때 우회전할 때, 처음 배우시는 분들 보면은 “야, 오른쪽 깜빡이 키고, 오른쪽에 누구 있는지 본 다음에 핸들을 꺾어서 도는데 그전에 브레이크로 속도를 약간 줄여줘야 돼.” 다섯 가지거든요? 처음엔 진짜 힘들어해요. 다섯 가지를 다 봐야 하니까. 나중에 익숙해지면 몸이 알아서 하겠지만. 저는 코딩도 그렇다고 보거든요.

운전 처음 하는 사람도 “야, 핸들 잡고 앞만 똑바로 보고 가.” 그러면 더 잘해요. 근데 사이드 미러 체크해야 되고, 백미러 체크해야 되고, 이러면 3~4가지가 되니까 점점 힘들어지는 거죠. 코딩도 똑같다고 봐요. 코딩도 한 가지 원칙만 있으면 그 원칙을 따라가고, 그 원칙에 같이 줄서지 않는 다른 원칙들은 내가 쓸 수 없는 원칙으로 빼면 돼요.

단, 이 원칙을 도입하고 지금 있는 원칙을 버릴 때, 그 장점이 단점보다 워낙 크고, 그러면 이걸 없애고 한쪽으로 넘어가는 것은 당연한데. 그냥 이거는 무슨 프랑켄슈타인 덕지덕지 붙여버리듯이, 막 한 조각 한 조각 붙여 가지고 돌게는 만들었는데, 그 안에는 뭐가 떨어질지 모르는 그런 말도 안 되는 시한폭탄이 잠재되는 그런 경우가 있거든요.

그래서 코딩을 제가 가능성이 있다고 보는 사람들도, 주니어부터 시작해서 자기 원칙대로 코딩 짜는 사람을 되게 좋아해요. 그런 부분에서. 그렇고.

제가 굉장히 책벌레, 시중에 나와 있는 모든 책을 다 읽어봤고, 그 모든 책에서 이만큼 떼 와서 이야기하는 거예요. 그러면서 “아, 이 책은 이게 좋았고, 저게 좋았고…” 심지어는 그런 걸 만들어가지고 멋진 강연도 해요. 난 그런 사람들 굉장히 실력이 없다고 보는 이유가, 이 사람들은 어차피 책을 쓰는 사람들은 장점을 이야기해야 하거든요? 뭐든 간에 내가 하는 방식의 장점? 그럼 장점만 보고 그렇다니까 나는 모아서 쓰겠다는 이야기인데, 거기에 대한 단점은 어떻게 할 거냐고.

어떻게 세상에 사람들이 다 성향이 다르고 원칙이 다른데, 책 100권에 있는 장점을 뽑아와서 코딩을 짤 수 있다는 것 자체가 말이 안 된다고 봐요. 그중에서 한 사람이 생각이 10개 정도로 갈린다면, 그중에 10권 정도라면 이해가 되는데. 100권에서 100개의 아이디어를 가지고 와서 그걸 다 만들 수 있다는 것은 말이 안 된다고 보죠.

자기가 코드를 짤 때 누군가 와서 “이거는 왜 다른 스타일로 짰냐?”라고 말했을 때, 그게 “나는 이게 이게 맞다고 봐서 이렇게 짰고, 그렇기 때문에 다른 것도 이렇게 짜고 있다.”라는 원칙이 있어야 한다고 생각을 해요. 그게 없으면, 솔직한 얘기로 그냥 코드 몽키예요 사실. 우리는 앞으로 코드 몽키로서도 돈을 벌고 살 수 있을 거예요.

그러면 그 코드 몽키로 그냥 일용직… 일용직은 말이 너무 심했고. 그냥 “야, 이런이런 거 좀 만들어줘.” 그러면 “네!” 뚝딱뚝딱으로 만들어서 돌게만 만들고 그런 정도? 어쩌면 단순노동인데, 그걸 코딩으로 하는 단순노동일 뿐이죠. 그런 사람 이상은 안 된다고 봐요.

그러면 이제 흔히들 그런 거 하잖아요. “정말 잘하는 프로그래머 될 거야.” 그게 보통은 어찌 보면 엔지니어라는 거에 좀 가깝거든요? 내가 스스로 무에서 유를 창조하고, 그 디자인을 내가 만들고, 그 밑에 많은 사람들이 같이 협업을 해서 이 제품을 제대로 만들겠다. 그런 개념이 더 가깝거든요. 장인의 정신에 조금 더… 아니면 “내가 만든 제품은 크게 문제가 없어야 한다.” 이런 것들.

그런 자세를 하는 사람들은 한 가지 원칙을 따라요. 소수의 원칙. 절대 이 사람들이 중구난방으로 하면서, “이 책에서 이랬으니까, 이러쿵저러쿵, 새로 나온 거 막 최고야~” 이런 사람들은 대부분이 그냥 뭐, 한국에서 “입 턴다”라 그러더라고요. ‘입 터는 사람들’? 제가 볼 땐 정치하는 사람들? 실력 없으면서 어떻게든 버티려는 사람들이고.

그래서 어릴 때부터 원칙의 코딩을 짜는 건 좋은 거 같아요. 이런저런 시도해 보는 것도 좋고. 그러나 결과적으로는 “시도해봤는데 이게 안 좋아, 이리로 가야 되겠어.”라는, 그런 원칙적으로 코딩하는 사람들. 전 그게 맞다고 봐요.

저는 언제나 원칙의 코딩을 하라 그래요. 코드 한 줄 한 줄 짤 때도 “왜 이렇게 짰는지” 생각하면서 짜라고. 누가 물어봤을 때 대답을 못한다는 것 자체는 원칙 없게 짠다는 거고, 그거는 결과적으로는 코드 몽키 수준 이상을 가지 못한다고 봐요. 그게 본인이 원하는 거라면 나쁘지 않지만, 저 개인적으로는 그렇지 않기 때문에 저는 원칙 있게 짜는 걸 추천해요 사람들에게.

“소신 있게 코딩해라.” 이게 좀 더 멋진 제목이 되겠네요.