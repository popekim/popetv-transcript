이하의 안녕하세요 뽀프입니다
CPU 쪽 그쪽의 최적화를 좀 보시고
CPU 파이프라인이 어떻게 구축이 되었는지 아시는 분들은
조건문, 분기문 이런 게 굉장히 안 좋다라는 얘기를 들어보셨을 것 같아요
들어봤든 알든 그게 if문이 됐든 switch문이 됐든
결과적으로 컴파일되면 똑같은 거니까
그래서 if문이나 switch 같은 거 많이 쓰지 말아라
특히 if 스위치 한 다음에 그 다음에 반복문을 돌릴 수 있는 거면 그렇게 하고
반복문 안에 if문 놓지 말아라 라는 얘기 많이 들어보셨을 거예요
다 좋은 얘기예요
그러나 여기서 한 가지 모르시는 것들이 있어요
저도 예전부터 알고 있던 거긴 한데 저는 주니어 때부터 알고 있긴 했는데
최근에 그거 관련 최적화를 한 번 더 할 일이 있었거든요
그래서 그거를 한 번 더 말씀드리려고 하는 겁니다
참고로 말씀드리면 그 스위치문
스위치문으로 보통 얘기를 할 게 훨씬 더 최적화가 잘 되니까
스위치문은 한 번 더 할 일이 있었거든요
스위치문으로 해서 어떤 인원값 같은 거
그 인원값을 0, 1, 2, 3, 4 이런 식으로 하나씩 케이스 만들어 갖고
그 안에 코드를 작성을 하죠
그렇게 작성하는 굉장히 간단한 것들 있잖아요
if 0이면 이거 봐나 if 1이면 저거 봐나
if 2면 저거 봐나 이런 식으로 작성되어 있는 코드는요
컴파일을 하면 대부분의 경우에 컴파일러가 최적화를 해줘요
분기문 없게 어떻게 분기문이 없게 해주냐
룩업 테이블을 만들어줘요 그냥
그 룩업 테이블 뭔지 아시겠죠?
그냥 배열 같은 거 잡아놓고 배열 0 들어오면
1 반환하고 2 반환하고 3 반환하고 이런 식으로
실제 컴파일하면서 지가 스위치문을 보고
아 이게 0부터 10까지 아니면 0부터 10까지인데 중간에 듬성듬성 하는 걸 보고
아 이러면은 그냥 내가 배열을 만들어 버리고
그 들어오는 인원값을 세균으로 써 갖고 곧바로 반환을 해주자
이렇게 해서 완벽하게 최적화를 해줘 버려요
그 데이터는 당연히 뭐 코드 섹션이라던가 이런데
데이터 섹션이라던가 그런데 배열로 들어가 있을 거고
약간 글로벌 배열 비슷하게
그러면 코드는
정말 그 배열 가서 룩업 한번 해오는 거
당연히 메모리 가서 한번 긁어오는 거기 때문에
그 메모리 인디렉션에 따른 비용은 들지만
하지만 CPU 파이프라인 때문에 뭐 파이프라인이 12단계다
파이프라인이 20단계다
그 단계 동안 스톨링이 걸리는 일은 없죠
요거 모르시던 분들은 앞으로 이넘 같은 거 숫자 같은 거
작은 숫자들 들어올 때
if문 보다는 스위치문을 써서 잘 보이게 하고
그리고 아마도 if문 스위치문 똑같이 작동은 하겠지만은
스위치문을 작성하는 순간
컴파일러가
알아서 룩업 테이블을 바꿔주죠
근데 최근에 했던 거는 그런 최적화를 알고 계신 분이
어느 게임 엔진에 렌더링 엔진에
그거를 넣어 놓았던 거기는 해요
그래서 어떤 식이었냐면은
보통 멀티 플랫폼 만드니까
크로스 플랫폼 게임을 만드니까
그 모든 플랫폼에 공통되는 어떤 모드
예를 들면은 뭐 제일 간단한 거를 생각해 보면은
그냥 색상 모드라고 해볼까요
색상 포맷들
그 색상 포맷을 다 이넘으로 만들어 두고
그리고 각 플랫폼마다 이 이넘이면은

그 플랫폼에 맞는 데이터 포맷 이넘이 있을 거 아니에요
그걸로 바꿔주는 거
그래서 스위치문 쓰고
케이스가 한 10개 20개 되는 그런 문을 써놨어요
엄밀하게 말하면 이거는 당연히
한 번에 룩업 테이블 만들어서 컴파일러가 해줘요
그거를 알고 만드신 걸 거 같아요
근데 코드를 돌려봤는데
생각보다 그 코드가 빠르게 나오지 않았어요
생각보다 그게 보틀렉으로 잡혔어요
왜냐면 그 코드가 한 프레임에 한 2,000번 넘게
호출이 되는 코드긴 했어요
그래서 굉장히 많이 호출되는 코드고
알 수 없게
그래서 어디선가 조금 느리게 나왔어요
그래서 이게 왜 그러지라는 걸 봤어요
컴파일러가 최적화가 안 됐나
근데 봤는데 재밌는 게 보이는 거야
컴파일러가 최적화는 됐어요
되기는 됐는데
그 중에 한 군데 어셈블리어 보다 보니까
여전히 컴패어 한 다음에 점프하는 문이 보이는 거예요
그건 if문이 있다는 얘기거든
그래서 뭔지 코드를 좀 더 보니까 어떤 경우였냐면
보통 스위치 케이스를 쓰다보면요
스위치 케이스 어쩌고 케이스 어쩌고 케이스 어쩌고 한 다음에
마지막에 디폴리어
default를 넣고 거기다가 assault 0 같은 걸 넣고
그게 0이면은 다시 잘못된 값이 있다는 거
반환하라 이런 식으로 코드를 작성하는 경우가 흔해요
왜냐하면은 내가 공통된 플랫폼에 이넘을 하나 추가했어
근데 내 플랫폼 닌텐도 스위치라던가
그런데도 사용되는 이넘을 매칭되는 이넘을 추가를 안 한 거야
그런 경우에는 실수로 추가를 안 했기 때문에
그 실수를 잡고 싶은 거거든요
그래서 assert를 넣는 거거든요
그래서 그런 식으로 만들어 놓은 거예요
근데 중요한 거는 다른 것들
그 디폴트만 빼고는
다 룩업탭을 컴파일러가 만들어줘
근데 디폴트인 경우 하나만은
거기다 assert도 하고 이상한 값 하나 반환하니까
그거를 따로 룩업탭으로 못 만들더라고요
그래서 그거는 그냥 테스트 한 다음에
컴패어 한 다음에 점프로 해버리더라고요
그래서 그거 하나를 고침으로 인해서
성능이 꽤 빨라진 경우가 있어요 최근에
좀 웃기죠 말이 안 되게
그래서 그런 것들을 보면서
야 이거 재밌구나 라고 하면서
야 이거를 컴파일러가 해준다고 다 믿고 가는 건 좋은데
정말 나는 생각도 못한 곳에서
컴파일러가 약간 조금 더 비효율적인 코드를 만들어주고
그리고 특히 렌더링 같은 코드는
함수 하나가 한 프레임에
막 2,000번, 3,000번도 호출 되거든요
그런 하나 하나가 신경이 쓰이는 거예요
그래서 저는 그거를 직접 아예 제 손으로
배열로 만들어줘서 룩업탭으로 만들었어요
참고로 말씀드리면
앞에서 그런 룩업탭을 안 만들고
케이스 문 넣고 assert
디폴트에 놓은 게 실수 막기 위한 거잖아요
딴 쪽에서 추가했는데
내 쪽에서 추가 안 한 거
그런 실수를 막기 위해서였는데
그게 막을려면 오히려 컴파일 타임
컴파일 시 튜플이라고 있어요
제가 예전에 블로그로 남겨놨을 수도 있고 아닐 수도 있는데
그 매크로죠
매크로를 잘 이용하면
하나 추가할 때마다 다른 플랫폼에도 추가되는 거를
옆에 콤마로 추가해 놓고
실제 이넘이라던가 룩업테이블을 그냥 매크로 이용해서
이거 디파인하고 이거 붙여놓고
다시 언디파인하는 방법으로
컴파일 시 튜플을 만드는 방법이
C하고 C++에 있어요
모르시는 분들은 그거 찾아보시고
그 방법을 사용하다 보면
실수를 할 수가 없는 게
내가 새로운 이넘을 하나 추가했어
그러면 그 옆에 컬럼들에
각 플랫폼에 이넘을 넣어야 돼요
그래서 안 넣는 순간 그게 비어있기 때문에 딱 눈에 보이거든
그런 식으로 데이터를 한 번에 관리하되
실제 써야 되는 룩업이나 이런 거는
컴파일 중에 매크로로 만들 수 있는 방법들이 있어요
그게 훨씬 더 좋은 방법이고
그거를 왜 굳이 안 썼는지 모르겠어요
그 프로그래머는
그 프로그래머는 다른 여러 가지 문제들 때문에
쫓겨난 걸로 알고 있는데
이 문제 때문은 아니었겠고
그래서 이 사람을 보면서
아
이 사람이 분명히 최적화에 대해서 알고 있었겠구나
이 디폴트문 말고
스위치문 케이스문을 사용하면
최적화가 되는 거를 알고 있었겠구나
생각이 딱 들지만
정말 어셈블리어까지 보고
이게 왜 하나 이 품위도 나오는지
그 생각을 못했겠구나
그리고 이 사람은
이 컴파일시 튜플이라는 방법을
모르고 있었구나라는 생각을 들었어요
컴파일시 튜플 저는 예전에
저 그 주니어 때부터 알고 있었던 거거든요
저희 위에 회사 창업하신 분들이
캐콘 벤쿠버 창업하셨던 그분들
캐콘 벤쿠버 나중에 된 거죠
그분들이 EA에서 일할 때
가지고 나온 기법들을
저도 거기서 보고 배웠던 거거든요
CC뽑을 게임 만들 때는
정말 컴파일시 튜플 잘 사용하면
실수로 엄청 막을 수 있고
코드도 복잡해지지 않고
최적화도 짱짱으로 나오는 방법인데
그걸 왜 좀 몰랐을까
업계에서는 흔히 알려진 방법인데
그리고 그 일을 했었던 분이
제가 알기로는 경력이 20년이 넘는 분인데
조금 안타깝긴 했어요
어쨌든 그 얘기는 그렇고
오늘은 나름 프로그래밍 얘기했죠
그거 들으시면서
아 이런 게 있구나
라는 걸 깨달으실 수 있는 기회가 됐어서
좋으면 해요
그래서 그냥 가볍게 빨리 자르겠습니다
포프였습니다
