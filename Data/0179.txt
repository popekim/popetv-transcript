소스 컨트롤에 대해서는 진짜 많이 얘기를 했는데
아마 그 이유가 대부분이 그건 거 같아요
그 디스트리뷰티드 소스 컨트롤 시스템 있잖아요
Git이라든가 Mercury라든가
그런 게 많이 나오면서
이제 게임 쪽 사람들이 많이 고민을 많이 하잖아요
이게 소스 컨트롤을 이제 옮겨야 되냐
뭐 디스트리뷰티드 소스 컨트롤 시스템이 주는 장점은
가장 큰 거는 솔직한 얘기로
오프라인에서 제가 작업을 할 수 있다는 거예요
그래서 어떤 의미에서 보면은
한 회사에서 다들 모여서 일하는 그런 게임 회사라면은
솔직히 이게 그렇게 필요하지는 않아요
그냥 여태까지 쓰던 Puffer Force를 쓰고 계시면 제일 좋고
그게 아니어도 SUB 버전을 써도 크게 문제는 없어요
왜냐하면은 특히 게임 쪽은
제가 저번에도 뭐 얘기하다가 한 번 깐 거 같지만
바이너리 데이터가 엄청나거든요
그리고 바이너리 데이터의 버전을 컨트롤 할 필요가 없다고 말하는 사람들은
말 그대로 그냥 그 사람들 분야에서
소스 컨트롤을 하는 게 가장 중요한 부분이고
코드만 있는 분야니까 필요가 없다는 얘기지
그 사람들은 뭐 컴파일한 DLL 파일 같은 게 필요가
그런 거 버전 컨트롤 안 해도 된다는 얘기지
그걸 아티스트리 만드는 에셋, 게임에서 그런 에셋에
버전 컨트롤을 적용하면 안 된다고 그렇게 확대 해석하는 사람들은
그냥 졸라 멍청한 거야 제가 볼 때는
그냥 왜 그 얘기가 나오는지도 모른 채
그냥 멍청해서 그냥 그 상황에서
아 원래 이런 버전 컨트롤에는 바이너를 넣는 게 아니에요
이런 개소리를 하는 거거든요
그거는 다 개소리고
그리고 버전 컨트롤 시스템이 있는 거는
소스 코드냐 바이너리가 중요한 게 아니라
그냥 제가 해왔던 작업, 그 전에 했던 작업에
그런 버전들이 하나하나 적용이 되어야 나중에
뭐 이런 버전에서 이걸 왜 거쳤나 볼 때도 유용하고
아니면 예전 버전으로 돌아갈 때도 유용하고
그 히스토리를 잃지 않는다는 게 중요한 거예요
그래서 이제 어떤 의미에서는
뭐 버전 컨트롤, 버전 히스토리를 뭐
10년 치를 둬야 된다 이런 말을 하는 것도
가끔가다는 별 의미가 없는 이유가
어차피 10년 된 게 아니라
10년 된 코드로 돌아갈 거 아니고
그때 그 코드를 뭐 문제 삼지 않을 정도의 그런
뭐라 그럴까
회사라면
그러니까 이제 그것도 달라요
어떤 시스템을 만드느냐
어떤 소프트웨어를 만드느냐에 따라 다르는데
게임은 제가 볼 때는 10년 전에 거를 그렇게 신경 쓸
모든 히스토리를 신경 쓸 이유는 없는 거 같아요
그래서 그런 경우에는 그 히스토리를 뭐지 해버리더라도
상관은 없다는 거죠
그래서 다시 돌아와서 오늘 하려고 했던 얘기는 사실은
바이너리 데이터예요
그래서
지금 이 모든 버전 정보를 저작하고 있다는 거는
결과적으로 어딘가 리포지토리에 데이터베이스에
각 버전마다에 파일이 들어가 있다고 생각하시면 돼요
그게 제일 편해요
근데 모든 파일을 뭐
지금 버전 1에서 뭐 파일이 500키로고
버전 2가 500키로면 두 개 합쳐서 1메가잖아요
근데 이제 그걸 1메가를 보관하려면
뭐 용량이 커질 수도 있으니까 그걸 압축을 할 수도 있고
아니면 그 전 버전에서 그 다음 버전 차이에 디프를 저장할 수도 있고
그래서 그런 식으로 해서 뭐 용량을 줄이는 여러 가지가 있어요
그래서
그 서버전이라던가 퍼포스라던가 중앙처리장치였기 때문에
중앙 컨트롤 시스템이었기 때문에 서버에서 다 컨트롤하는 시스템이요
그런 모든 그 히스토리는 중앙 서버에 있어요
그래서 중앙 서버 용량만 엄청 크면은
히스토리 몇만 개 몇십만 개를 쳐봐봐도 상관이 없었던 거죠
그리고 클라이언트 그러니까 제가 소스 코드를 개발할 때
저는 개발할 때 당연히 대부분이 가장 최신 버전에서 개발을 할 거 아니에요
그러면 저는 최신 버전 파일만 그 리포에서 받아 갖고 하기 때문에
제 용량은 적었던 거예요
근데 여기서 이제 디스트리뷰티드 버전 컨트롤 시스템이 나온 거죠
Git이라던가 Mercurial 이런 거
그거의 문제는 뭐냐면 이 개념은 아주 간단했어요
중앙에 서버 있죠 제 컴퓨터에서 서버 하나 만드는 거예요
그래서 이 두 서버 사이에 싱크시키고
저는 작업할 때 이 서버에서 다시 다른 파일
다른 디렉터리로 최신 버전만 뽑아서 작업한 다음에
집어넣고 내 서버에 그리고 다시 다른 중앙 서버랑 싱크시키겠다는 개념이
솔직한 얘기로 그게 디스트리뷰티드 버전 컨트롤 시스템이거든요
그럼 문제는 뭐냐
여기 아까 서버가 엄청 크다고 그랬죠 1TB
제 서버도 그럴 수가 있어요
싱크를 해야 되기 때문에
그래서 바이너리 데이터를 Git이나 Mercurial에 넣기 시작하면
문제가 된다고 얘기하는 게 그런 거였어요 사실은
뭐 일단 자체 알고리즘 자체가 워낙 Git 자체가 Linux 커널 지원하려고 나왔던 거고
Mercurial 시작은 어떤 건지 모르겠는데
비슷한 개념으로 갔고
그렇기 때문에 그 바이너리 데이터를 저장하면은
바이너리는 DeFi가 굉장히 쉽지 않아요

예를 들어서 Max 파일 같은 거
Art 파일 만들었어요
그 다음 버전을 만들었어요
텍스트처럼 이렇게 한 단어 두 단어 바뀐 게 아니라
바이너리 이렇게 구워버리면 모든 게 바뀔 수도 있거든요
그러면은 그 DeFi라는 거 자체가 개념이 별로 용량을 줄이지 못할 수가 있어요
지금 파일 10메가 다음 파일 10메가 아무리 압축하고 별질을 해봐야
18메가로 최고로 들어갈 수도 있다고요
그러면 그게 쌓이다 보면 버전 천 개만 쌓여도 기가바이트 넘고 난리가 나는 거거든요
그 문제는 그거예요
그래서 Git에서 바이너리 넣지 말아라 라고 얘기 나온 게 그거예요
Mercurial도 넣지 말아라 나온 게
Mercurial은 또 내부 저장이 DeFi 기반 저장이기 때문에
또 느려지고 복잡하고 이런 게 있었고
그래서 이제 근데 뭐 게임 쪽에서 쓸 때는 안 할 수가 없잖아요
바이너리가 버전 컨트롤 안 할 수가 없잖아요
무슨 거기서 Recommendation이라고
무슨 Dropbox를 써 갖고 다른 폴더 해 갖고
정션 떠 갖고 뭐 쇼컴 만들어서 그건 Dropbox에서 관리하고
막 이런 얘기 있는데
Source Control 시스템은
이런 하나가 제일 좋은 거예요
왜 그 내가 게임 만들 때 필요한 모든 에셋이
코드가 들어가는 그 프로젝트에서 버전 컨트롤 여러 개 해놓으면
그 서로 간에 싱크하기도 귀찮고
물론 싱크하는 법은 있어요
내가 지금 코드에서는 어제 자 코드 쓰고 있는데
에셋은 오늘 자 에셋이야
근데 어제 그 오늘 자 코드 들어간 거에서 에셋 바뀌어 갖고
이 포맷이 바뀌었다라거나
결국에는 모든 포맷이 모든 버전이 같이 올라가야만 개발이 쉬워지거든요
그래서 큰 회사들 같은 데 보면은
그냥 뭐 최고의 버전 컨트롤 시스템 사요
퍼포스 같은 거 그래서 중앙 처리 해 갖고
모든 버전 그냥 프로젝트 하나에 다 박아서 그래요
아 페이스북도 그래요 페이스북도 머큐리오에 전부 다 박아요
전체 회사 코드가 리포 하나에 들어가 있는 건 전 알고 있어요
근데 이제 뭐 그렇기 않고 잘게 잘게 나누는 회사도 있어요
그건 이제 말 그대로 리포 문제가 아니라
그러니까 그렇게 올바른 게 아니라
제가 볼 때는 기시나 머큐리오에 그걸 지원하지 못하기 때문에 나눈 거고
그리고 이제 그걸 나눴기 때문에 합치려고 또 다른 스크립트 짜갖고 이래가지고

이거를 또 자기 클라이언트에 돌려갖고 합치고 이런 난리를 치는 거죠
뭐든 간에 게임을 만드신다면
제가 추천하고 싶은 방법은 이거예요
Git도 이 버전이 있고 머큐리오도 있는데
Git 지원은 아직 조금은 미미한 거 같고
Git은 아직도 그 퓨어리스트 자세가 되게 강한 사람들이 많아서
머큐리오 근데 Git은 또 비주얼 스튜디오가 지원하기 때문에
Git을 솔직히 쓰긴 써야 되는데
Git 쪽은 제가 안 써봤어요 근데 똑같은 익스텐션이 있긴 있어요
머큐리오에서 보면은 라지파일 익스텐션이 있거든요
그거를 쓰라고 해드리고 싶어요
뭐냐면 뭐 바이너리 파일이라던가 용량이 어느 정도 큰 파일들은
그냥 옛날처럼 써라 이게 전부예요
그러니까 소스코드를 집어넣을 때는
모든 버전이 있고 그게 제 개인 컴퓨터의 서버로 싱크가 돼요
그럼 그거는 용량이 별로 안 크니까 모든 히스토리가 있는 거죠
근데 어느 정도 크기 이상이 되는 파일이거나
바이너리 파일 다 컨피규어 가능하고요
그거를 하면은 그거는
최신 버전으로
받아오겠다는 거예요
싱크를 할 때 가장 최신 버전만 받아왔고
제 로컬 서버에 넣어놓고
예전에 있던 그 1TB는 다 없는 거죠
그거만 쓰다가 만약에 이거 과거 버전으로 돌아가야 된다
그럼 그때는 온라인으로 연결돼 있어야 돼요
근데 이제 뭐 한마디로 약간의 중간 단계죠
바이너리는 어쩔 때는 이렇게 뭐 뭐랄까
전 버전 돌아가려면 온라인 연결돼 있어야 되고
그거 아니면 로컬에서 자유롭게 쓸 수 있고
바이너리를 체크인할 때는 또 재밌어요
바이너리를 체크인할 때는
제 로컬 서버에는 그 히스트로가 남아요
왜냐면 제가 체크인했던 거고
제가 아무리 돌아갈 일이 더 많을 테니까
그래서 그거는 이제 뭐 템포러리 폴더 안에 지정해 놓고
거기에 이제 집어넣는 법이 있거든요
그럼 그거는 제 개인 컴퓨터에 저장돼 있고
싱크하면 당연히 서버 버전은 다 가지고 있고
근데 만약에 다른 사람이 그 제가 넣은 거를 받아가면
그 사람이 역시 또 최고 버전
제일 위에 버전만 받게 되고
그래서 라지파일 익스테이션이란 게 있고요
머큐리오에서는 빗버켓은 지원 안 하고
현재 지원하는 데가 킬런이 지원하는 걸로 알고 있고
자기 스스로 머큐리오를 깔면 당연히 켜서 지원할 수 있고요
클라이언트에서도 익스테이션 이네이브를 해줘야 되고요
깃도 똑같은 게 나오긴 했어요
있는데 제가 써보진 않았어요
저희 회사에서 요즘 뭐 어떤 프로젝트 하는 이미지 파일이 되게 많대요
그림 이미지 파일
그래서 저희 EA 한 명이 추천해 달라 그래서
뭐 이것저것 얘기를 해왔는데
제가 얘기한 거는 버전 컨트롤 하나로 가는 게 제일 맞고
머큐리오에서 이런 게 있었고
기대도 분명히 있을 거다
그러니까 그거를 제일 먼저 한번 살펴봐라
살펴봤더라고요
근데
있긴 있대요
테스트 해보겠대요
그래서 제가 지금 테스트는 안 해봤지만
머큐리오를 쓰시려는 분들
특히 인디라거나 이래서
각자 집에서 일하시는 분들이면
그건 해보셔야 될 거 같아요
한 가지 아쉬운 거는
킬러는 두 명까지가 무료고
빅, 그 빅바이 리턴이 지원하니까 좋고요
단지 단점은
뭐야
쟤네가 지원 안 한다는 거
그 빗버켓
그것도 여섯 명인가 다섯 명까지 공짜잖아요
그건 좀 아쉽고
아니면 말도 안 되게 비주얼 스튜디오 가서
깃에다 처박는 법도 있는데
아직 거기 빅파일 익스텐션 자체가
안 돼 있는 거 같아요
비주얼 스튜디오 온라인에
그래서 저는 그게
TFS 자체가 워낙 큰 파일을 잘 처리하니까
그걸 좀 이렇게 활성화
이네이블 시켜 줄 거라 생각을 했는데
아직 안 해 준 거 같고
뭐 좀 더 나아지면 되긴 되겠죠
근데 이제
요즘은 저도 코드를 많이
짜면 비주얼 스튜디오 온라인에 많이 넣는 편이거든요
왜냐하면 용량 무제한이고
뭐 빠르고
그리고 마이크로소프트 자체가 이제 좀
서버가 다운된 일이 다른 데보다 적어서
네
그리고 비주얼 스튜디오 연동도 잘 돼 있고
그러고 있는데
어쨌든
머큐열 쓰시는 분들은
그리고 이제 깃 쓰시는 분들은
라지 파일 익스텐션 생각해 보세요
특히 이제 게임 개발자 하시는 분들
바이너리 데이터 많은 분들
그냥 코드만 많은 분들은 걱정 안 하셔도 돼요
있는 거 그대로 쓰시면 되고
원래 깃은 그거는 잘 되니까
아직 그 정도
음
예
포프였습니다
