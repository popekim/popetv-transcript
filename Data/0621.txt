안녕하세요, 포프입니다.

오늘은 꿀팁 하나 풉니다. C++에서 Assert 사용하는 꿀팁! Assert 같은 경우를 대규모 팀에서 사용을 하다 보면, 이제 각 팀마다 각 프로그래머다 넣어 둔 Assert가 굉장히 많아요. 그리고 회사 따라 당연히 Assert의 의미가 다른데, Assert가 발생하면 무조건 크래시 나서 게임이 동작을 안 해야 되는 상황이라는 가정을 두고 Assert를 박는 회사도 있고, 그게 아니라 그냥 이 함수를 작성했을 때는 내가 다양한 가정들을 만들어 놨고, 그 가정으로 박아 놨어요. 내 의도를 보여준 거예요. 이 가정이 깨지더라도 그 함수가 올바르게 작동함에도 넣는 경우도 있어요. 그거는 그냥 내가 혹시 이 함수를 사용하는 거에서 뭔가 바뀌는 게 있으면 알기 위해서예요. 그런데 이렇게 Assert를 되게 많이 박아 놨어요. Release Build 실행 중에는 Assert가 사라지니까 상관이 없죠? 근데 디버그할 때 내가 프로그램을 돌리다 보면 갑자기 딴 사람이 박아 넣은 Assert 때문에 프로그램이 잠깐씩 멈추는 거예요. 물론 그걸 F5를 눌러 계속 진행할 수도 있어요. 근데 그게 Update Loop에 같은 게 있는 거라고 하면 Assert가 나오면 1초당 한 60번 이상이 나오게 되는 경우도 있어요. 그러면 이게 불편해서 내 코드에서 괜히 Assert 주석 처리 해놨다가 내가 이것저것 다 하고 커밋 넣을 때 깜빡 잊고 그거 그대로 들어가서 문제 생기고 이런 경우도 있거든요? 그래서 이런 경우에 Assert를 사용하다 보면 딴 사람의 Assert를 갑자기 주석 처리하는 경우도 있고, 딴 사람의 Assert 때문에 내가 간단히 뭐 테스트하고 싶은데 못 하는 경우도 있어요. 그래서 굉장히 Assert가 불편한 경우들이 많아요. 그러면 이제 또 무슨 빌드 단계에서 Assert를 끄고 내 컴퓨터에서 빌드 한 다음에 돌리는 경우도 있는데, 그럼 또 내가 넣은 핵심적인 Assert를 발견을 못 할 수도 있어요.

그래서 결과적으로 Assert에는 여러 가지 레벨이 있다고 보시면 맞아요. 내가 넣어 놓은 Assert, 내가 보기 위해서 넣은 Assert, 아니면 내가 소속된 소규모 팀이 있을 거 아니에요? 내가 그래픽 팀이라면 그래픽 팀이 봐야 하는 Assert, 게임 팀이 봐야 하는 Assert, 그래서 그런 그룹 단위로 보는 Assert, 그리고 모든 사람이 다 문제가 생기면 곧바로 달려와서 얘기해야 되는 글로벌한 Assert. 이렇게 3단계의 Assert가 일반적으로 대규모 회사에 있다고 보면 맞아요. 그럼 이 3단계의 Assert를 어떻게 만들어야 되는데 '그럼 어떻게 할 거냐?'는 얘기거든요. 생각보다 굉장히 쉬운 방법이 있어요. 그리고 이거는 제가 2005년부터 써왔던 건데 많은 게임 회사에서 이걸 잘 안 쓰더라고요.

어떻게 하는 거냐? 첫 번째 트릭은 뭐냐면. 당신의 사용자 이름, 윈도우 사용자 이름을 컴파일할 때 define으로 들어가게 할 수가 있어요. 찾아보세요. 방법이 있어요. 그러면 그걸 이제 윈도우에서 로그인 할 때, 회사 컴퓨터 로그인하면 일반적으로 제 사용자 이름이 들어가 있잖아요? 제 이름이 Pope Kim이니까 회사 규정 따라 다르지만 P Kim으로 들어가 있는 데가 있고, Pope Kim으로 들어가 있는 데가 있고, Pope 이렇게 들어가 있는 데가 있어요. 그러면 환경 변수를 #define을 Pre define 되게 할 수가 있어요. 그럼 딱 그게 들어가는 순간 이제 어떻게 할 수 있냐면 Assert를 집어넣는 코드가 있을 거 아니에요? 거기에 이게 만약에 Pope Kim이라는 Pre define된 게 있으면 이 Assert를 팀 단위로 할 수 있게 매크로를 또 만들어 줄 수 있어요. 한마디로 만약에 Pope Kim이라는 #define이 되어 있으면, 그 빌드 단계에서 들어오는 Preprocess define이니까 그게 되어 있으면 이 Assert를 살아나고 그래서 Assert마다 약간의 변형이 생기는 거죠. 근데 #define이 된 Pope가 없으면 아예 그 Assert가 사라지게 하는 식으로 할 수가 있고, 팀 단위에서 각자 사용자 이름이 생기면 '이 중의 하나라도 define이 되어 있으면, 팀 Assert를 한다'도 할 수가 있어요. 그래서 이렇게 하면 내가 로그인되는 컴퓨터, 내가 빌드하는 컴퓨터에 따라 Assert를 활성, 비활성 할 수 있기 때문에 최소한 우리 팀에서 하는 Assert를 다 쉽게 보고 내 개인 Assert도 다 볼 수가 있죠. 근데 다른 팀에서 돌릴 때는 그 Assert를 못 보죠. 정말 다른 팀도 봐야 하는 정말 중요한 Assert면 글로벌 레벨 Assert로 넣어버리면 되고요. 그래서 이런 식으로 하면 갑자기 많은 것들이 되게 행복하게 바뀌고요, Assert 때문에 겪어왔던 그 많은 문제점이 솔직히 거의 다 사라져요. 그리고 이 똑같은 방식을 비주얼 스튜디오 기반에 제가 C#에다가 썼던 기억이 있어요. 그래서 그렇게 쓰면 굉장히 도움이 되고, 그리고 약간의 트릭을 하면 또 역시 환경 변수로 해서 다른 언어에서 똑같이 쓸 수가 있거든요? 그래서 개발 머신에서 어떤 언어를 사용하든 간에 그런 식으로 약간 비슷하게 뭔가를 해서 내 컴퓨터에서만 발생하는 Assert를 만들 수가 있어요. 아니면 우리 팀에서만 발생하는 Assert.

근데 또 이런 얘기 해요. '아, 근데 저는 로그인을 회사 컴퓨터 로그인으로 안 하고 개인 컴퓨터로 로그인해서 안 됩니다.' 그러면 안 되는 거예요. 어쩔 수 없어요. 회사에서 컴퓨터를 당연히 개인 컴퓨터를 쓰게 할 수도 있고, 노트북을 제시하면서 회사 로그인이 아닌 개인 로그인을 쓰게 할 수도 있어요. 근데 그거는 회사의 IT가 구린 거예요. 그런 경우에는 저는 탈주하라고 전해드려요. 제가 보통 '이런 테크 회사 도망치세요'라고 얘기하는 경우가 있잖아요? 그중에 하나가 실제 회사 입장에서 주로 로그인 서버를 관리하는 거는 리눅스 쪽으로 가지 않는 이상 맥이든 윈도우 회사든 대부분의 큰 회사들이 Active Directory를 사용을 해요. Active Directory 서버를 돌리기 싫으면 Azure로 가서 거기서 Microsoft Entra로 돌릴 수도 있어요. 그러면 어떤 컴퓨터든, 맥이든 윈도우든 상관없이 그 로그인을 할 수가 있고, 그 로그인을 한다면 그 로그인에 관련된 사용자 이름, 회사 Active Directory에 정해둔 사용자 이름이 들어가거든요? 그럼 그걸 사용하면 돼요. 그래서 그렇게 사용하면 개발자가 볼 수 있는, 내 팀만 볼 수 있는 Assert가 생기고, 그로 인해서 Assert가 너무 많아서 '이것 때문에 디버깅을 하기 힘들어서 Assert를 꺼야 합니다.'라는 얘기가 나오는 경우는 굉장히 적어요. 제가 2006년도에 일했던 회사 자체가 그때부터 썼는데, 그 회사 자체가 개발 제대로 하던 굉장히 큰 회사에서 일하던 사람들이 나와서  만든 스타트업이었고, 그 스타트업에서 예전 회사에서 썻던 많은 방법을 가져왔던 것 중 하나가 이 Assert였고, 저는 매우 행복하게 쓰고 있고, 저희 POCU 아카데미에서도 C++ 프로젝트들이 있거든요? 개인 컴퓨터에서 돌리는 Assert, 팀별로 돌리는 Assert 다 그렇게 되게 되어 있어요.

그래서 C에서 Assert 쓸 때 가장 좋게 하는 법들, 여러 가지 꼼수들이 있지만 그중에 하나. 이게 팀별 Assert, 개인별 Assert고요. 그 외에도 여러 가지 트릭이 있죠, INT3라든가 기타 등등. 그런 꿀팁을 전해드리고 싶었습니다. C++ 하고 계신데 이 방법 모르시고 계셨던 분들은 한번 찾아보세요. 내 사용자 이름을 어떻게 Preprocess define로 넣을 수 있는지. 그걸 통해서 Assert 매직을 어떻게 만들 수 있는지 한번 보시면 되게 재미있을 거예요. C, C++의 매직의 절반은 매크로죠? 잘 쓰면 굉장히 좋아집니다.

포프였습니다.