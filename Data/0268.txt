예전에 한번 제가 유닛 테스트에 대해서 말한 적이 있어요
솔직히 말하면 몇 번 말한 적이 있는 것 같은데
한 번은 유닛 테스트를 하기 위해서 인터페이스를 남용하는 그런 행태를 좀
뭐 속된 말로 깠다
그냥 마음에 안 들고 이건 올바른 방법이 아니다라는 얘기를 좀 많이 했던 것 같고
정확히 얘기하면 보통 상황에서 올바른 방법이 아니다
정말 무슨 테스트가 필요한 데서는 필요하다고 하긴 했지만 그런 일은 별로 없다였고
두 번째는 유닛 테스트보다 더 나은 방법이
그 뭐라 그러죠? 오토메이티드 테스팅?
그걸로 해서 해라라고까지도 얘기했어요
외국에 있는 다른 개발자가 유튜브를 통해서 얘기를 했던 걸 제가 듣고 생각하고
'아 그게 올바른 방법이구나'라고 해서 소개를 드렸고
오늘 얘기하려고 하는 건
스태틱 어널리스틱이라는 거예요
그래서 이제 이거를 한국말로 번역하면 정적 분석 정도가 되겠죠
이게 C#에도 있긴 있지만 가장 이게 유용한 데는 솔직히 C++라고 보거든요
뭐 C#도 유용해요
그리고 이제 C#에 나오는 코드 컨트랙트 이런 거 있죠
새로 이제 나오고 좀 뭐 그러니까 프리 컨디션 포스트 컨디션 체크하거나 이런 것들
그걸 이제
컴파일러 수준에서 아직 지원은 안 되지만 컴파일러 수준에서 지원을 하려고 이렇게 좀
쳐넣은 게 이제 코드 컨트랙트인데
뭐 Assert+Exception 이 정도 생각하면 돼요
그걸 컴파일 타이밍 해주는
그래서 이제 제가 이제 그때 뒤져본 거로는 코드 컨트랙트도
스태틱 아날리스트 기반에다가 올렸던 거 같았어요
근데 제가 지금 정확히 기억은 안 나는데
뭐 그건 중요한 게 아니고 스태틱 아날리틱스라는 게 뭐냐?
음 C로 예를 들게요
제가 C에서 가장 유용하다고 했으니까 C++, C
C에서 이제 코드를 짜다보면은 어레이를 만들고
그리고 이제 이제 어레이를 접근을 하는데
그 분야 따라 다르지만
이제 게임 쪽이나 굉장히 많은 C++ 쪽에서
C++ 쓰는 쪽 C나 Exception을 꺼요
그러고 오면 이제 어레이가 10개를 잡았는데 11번째로 접근을 합니다.




접근하거나 그러면 그 순간에 엉뚱한 데를 참조해서 널포인트 에러가 날 수도 있고
엉뚱한 데 메모리를 덮었을 수도 있고 이상한 현상이 발생하기도 하죠
그뿐만 아니라 어떤 포인터가 있는데 이거를 new를 해서 만들어 놓지 않고
널포인트 상태에서 접근하면 bug이 나는 경우도 있고
아니면 그 포인터 변수 자체를 아예 초기화를 안 해서 이게 garbage 데이터가 들어가 있고
이상한 숫자, 그 숫자 메모리 참조해서 이상한 짓을 하다가 bug이 나는 경우도 있고
bug이 안 나고 엉뚱한 데 쓰고 넘어가는 경우도 있고
한마디로 C++은 잘못 쓰면
뭐라 그러죠?
온갖 거를 망칠 수 있는 언어 중에 하나예요 사실은
그래서 이제 그거를 없애보겠다고 추가한 게
이제 뭐 assert 같은 것도 추가해보고
나중에 exception handling을 쳐봤기도 하고 이런 다양한 경우가 많은데
static analytics는 컴파일 도중에 그러니까 실행을 하지 않고
이런 위험 요소가 있는 코드를 다 분석을 해서 에러로 띄워줘요
그럼 그 코드를 보고 나서 올바르게 고치면 되는 거예요
아까 예를 들면 array를 추가로 이렇게 접근하는 거 있잖아요
그거는 솔직히 변수에 들어오면 어느 순간에도 그 변수가 인덱스로 들어오면
parameter, 함수 parameter 같은 걸로
그거를 실제 이 값이 어떤 게 좋냐면
이게 들어올지는 아무도 모르잖아요
그러면 이거는 실행 시간에 어떻게 체크할 방법이 없다라고 할 수 있는데
static analytics는 좀 똑똑해서
이 들어온 인덱스 값을 assert로라도 확인을 하는지를 봐요
그래서 assert로 확인하는 코드가 있다면 에러를 안 주지만
assert까지 없는 코드라면
아 이건 좀 위험하니까 고쳐라 라고 에러를 줘요
그래서 최소한 assert를 넣거나
아니면 실제 도는 도중에 그런
범위가 넘는 인덱스가 들어와야 되는 코드라면은
그 인덱스가 넘을 경우에는 실제 접근 안 하고
뭐 너를 반환한다거나 뭐 이상한 거를 해야겠죠
그래서 그런 식의 어떤 로직이라도 안 들어가 있으면
그런 위험 요소가 되는 부분에 다 에러를 띄워줘요
그래서 이게 사실은 게임 업계에서 유명해진 게
존 카맥이 아마 한 번 퀘이크콘에서 얘기했던 것 같아요
그래서 이제 그때 존 카맥이 썼던 거는 분명히
그 스태틱 애널리틱스만 파는 솔루션이 있었거든요
제가 어떤 건지는 잘 기억이 안 나는데
인텔일 수도 있고 전혀 다른 걸 수도 있어요
그래서 그거를 따로 이게 코드에서 돌리면 보여주는 거였는데
지금 마이크로소프트 비주얼 스튜디오 안에는
이게 기본 동작으로 들어가 있어요
예전에는 그래서 막 스태틱 애널리틱스 돌리려면은
뭐 이상한 컴파일러 스위치 넣어줘야 되고
다시 컴파일해야 되고 이랬는데
지금은 그냥 빌드 아닌지 애널리틱스 아닌지
그 메뉴에 곧바로 스태틱 애널리틱스 하는 코드가 있어요
아니 메뉴가 있어요
지가 알아서 컴파일 다 해주고 쫙 애널리틱스 뽑아줘요
그래서 저는 이제 C쪽 개발자한테는 이거를
뭐 매번은 아니더라도 종종을 돌려보길 권하고
아니면은 매일매일 빌드를 만드는 프로세스가 있다면
릴리스 빌드 같은 경우에 한 번씩 돌려서
그날그날 들어온 것 중에 좀 위험한 코드는 없는지 보고
그런 거를 이제 처리해주고
그러니까 다음날 고치거나 아니면 정말 이게 의미 없는 워닝이라면
꺼주는 법도 있어요 그럼 한 줄 한 줄
그래서 그런 걸 해주다 보면은
나중에
그러니까 한마디로 제가 제일 좋게 보는 거는
이렇게 코딩을 짜다 보고
이렇게 스태틱 애널리틱스를 돌리다 보면은
제가 정말 놓친 것들이 많이 보여요
아 이런 위험도 있었구나
그리고 거기다 못하더라도 최소한 어설트를 박아서
나중에 디버깅을 돌릴 때라도
그 상황을 발견해서 어떻게 처리할 수가 있는 거죠
그래서 저는 스태틱 애널리틱스 한 번씩은 꼭 돌려보라고 얘기하고 싶고
그리고 코드를 정말 유지보술을 받아서
계속 이걸로 돌려서
언제나 워닝이 없는 상태
그러니까 스태틱 애널리틱스가 워닝을 안 주는 상태로 유지하길 바래요 사실은
그리고 이제 C# 기계 있다고 그랬잖아요
그래서 C#도 제가 한 번 돌려보긴 돌려봤는데
그때는 이 프로젝트가 워낙 유지보수가 안 되고 있으더라
워낙 막 그런 에러가 많아서 제가 고치지 못했고
그 당시에는 바쁜 상황이었고
C#도 잘 작동해요 C++만큼
그래서 음 이거는 이제 다른 컴파일러 스택에도 이게 들어오는지 모르겠어

근데 제가 확실히 아는 건
비주얼 스튜디오에는 기본적으로 들어가 있고 이제는
근데 예전에는 따로 돈 주고 막 몇 천만 원 주고 사갖고 돌리거나
몇 백만 원 주고 사갖고 돌려야 되는 제품이었는데
지금은 이제 비주얼 스튜디오가 있으면 공짜로 쓸 수 있는 그런 멋진 제품이 됐죠
그래서 그 세부적인 세팅을 조절하는 것도 있고
뭐 워닝 레벨 어느 정도, 어느 정도까지 잡기 이런 거 다 설정도 가능한데
저는 그냥 기본으로 보통 많이 썼고요 굳이 뭐 그거를 100% 잡으려면 미친 것까지 잡아놔야 되는데
그 정도만 할 수 있지만 그럴수록 노이즈도 많아져서
이제 제가 일일이 꺼져야 되는 것도 많기 때문에
일단은 시작이라는 단계에서는 그 정도로 시작하는 게 좋은 거 같아요
그러면 이제 이거랑 유닛 테스트랑 무슨 상관이 있냐라는 또 얘기가 나오거든요
그래서 이제 솔직히 말하면 유닛 테스트가 테스트하려는 것과
스태틱 어널리티스가 테스트하려는 건 좀 다른 거예요 어찌 보면은
유닛 테스트는 그 하나하나의 기능을 테스트하고 이 기능이 뽀개졌을 때 보기 위한 거고
스태틱 어널리틱스 같은 경우에는 좀
의도치 못한 버그 잘못 코드를 짜서 아니면 뭐 여기서 뭐라 그럴까
원하는 값이 이 정도 범위인데 엉뚱한 게 들어와서 코드가 깨질 때
그거에 대한 대비책이 아무것도 없는 걸 잡는 거 이런 개념이거든요
근데 제가 유닛 테스트를 이제 뭐라 그럴까
그니까 어차피 모든 거에 시간이 들어가게 돼 있어요 유닛 테스트를 만드는 데도 시간이 들어가고
이제 코드를 짜는 데도 시간이 들어가고 스태틱 어널리티를 돌리는 데도 시간은 들어가요
유닛 테스트를 얻을 수 있는 건 어떤 기능이 제대로 동작하냐 이게 어느 순간 깨지지 않았냐에 대한 보장이고
스태틱 어널리티를 잡을 수 있는 경우에는 정말 말도 안 되는 값이 들어와서 아니면 내가 생각지 못했던 값이 들어와서
코드가 완벽하게 뻗는 경우를 예측하는 뭐랄까 대비하는 거거든요
그러면 이제 근데 이제 재미있는 건 유닛 테스트를 작성하는 데 시간이 많이 걸려요
스태틱 어널리티를 돌리는 데는 시간이 거의 안 걸려요 안 걸려요 그냥 컴파이머면 되는 거기 때문에
그렇기 때문에 유닛 테스트를 할 시간이 있다면 저는 스태틱 어널리티를 먼저 돌려보라고 하고 싶어요 그만큼 투자비용이 적으니까
그리고 설마 유닛 테스트에서 안 잡힌 버그가 있더라도 어떤 기능이 안 잡 뭐 이제 안 돈다는 거
그거는 QA 과정에서 드러나고 일반적으로 이제 출시하기 전에 한 번 이렇게 또 계속 QA를 돌리잖아요 테스트도 해보고
그 과정에서 나올 수 있는 버그들인데 비해 스태틱 어널리티가 잡아주는 버그들은
음...
그런 순간에 못 잡는 버그들도 은근히 많아요 정말 라이브 가서 이상한 짓 해봐야만 뜨는 버그들도 많고
근데 그럴 때 만약에 이게 뜬다 그 경우에는 고치기도 정말 어려워요
왜냐면 디버그 인포도 잘 없는 경우도 많고 막 그런 문제가 많으니까
그래서 저는 뭐랄까 소프트웨어 개발을 할 때 언제나 위험을 잘 조절을 하는 게 중요하다고 생각해요 프로젝트를 할 때
그니까 조그만 위험이 있는 거는 조금조금 잘 조절하는 게 중요하다고 생각해요 프로젝트를 할 때

조금조금 터져도 상관이 없지만 정말 큰 위험이 빵 터지는 건 막아야 된다고 생각을 하거든요
그러면 저는 언제나 스태틱 어널리티를 먼저 하라고 할 수밖에 없어요
그래서 저는 유니트에 서고 스태틱 어널리티를 얘기한다면 스태틱 어널리티를 먼저 돌려보라고 해요
왜냐하면 그게 훨씬 빠르고 안전하고 그리고 그 가장 큰 위험을 잡아줄 수 있는 부분이라서
그리고 이제 거기서 시간이 나오면 유니트 테스트를 만들래요 만들 수도 있고
그 전에 이제 전에 말했던 그 오토메이션 테스트 배치 오토메이션 테스트
그거를 이제 만들어도 좋은데 제가 소프트웨어 업계의 여러 회사에서 일하다 보면은
결과적으론 소프트웨어 개발은 인건비가 돈이거든요
그러면은 그런 모든 테스트를 완평하게 하기 위해 인건비를 투자할 수 있는 회사도 많지 않고
해주는 회사가 좀 적어요 아 당연히 회사가 그래야 된다고 얘기를 하지만
음 뭐라 그럴까요 이제 스타크래프트 보면은 엘다가 뭐지 아 프로토스
프로토스가 이제 한 회사에서 일을 하고 있는 회사예요
Ник manageable
하야 업무 Truth

마켓
이나
인�
하에요
tiế
애
어느 순간에나 가성비 따지고 효율성을 따져야 되는 상황이고
만약에 제가 다른 회사한테 납품을 하는 그런 회사를 가지고 있다면
이제 그 회사가 정말 원하는 게 완벽하게 100% 작동하고
버그 하나도 없는 소프트웨어고
그런 게 아닌 이상, 그런 게 중요하지 않는 테크인 이상은
어느 정도의 위험 요소는 가지고 있지만
그게 터졌을 때 관리가 가능하고
그 대신에 지작비가 적게 되는 회사를 고를 수밖에 없다고 저는 생각을 해요
그래서 그런 의미에선 가장 시간에 인건비에 타격이 없는 순서대로 가야 된다고 생각을 하고
그래서 저는 아까 말했듯이 스태틱 어널리스트를 가장 먼저 추천하는 거고
유닛 테스트는 지금 굉장히 재밌는 일을 마이크로소프트에서 하고 있어요
아직 완성이 됐는지는 모르겠지만 1년 전쯤에 봤는데
걔네가 자동 유닛 테스트를 만들기 시작을 했어요
뭐냐면 함수를 보면 그냥 이 클래스를 주면
이 클래스에 맞는
유닛 테스트 코드를 자동으로 만들어준대요
그럼 이제 거기에다가 이제 한번 검토하고
뭐 조금 더 고치거나 이래갖고 돌리면 된다고
그래서 제가 C#쪽이었던 걸로 기억을 하는데
이게 완성이 됐는지는 모르겠어요
2015년 버전에 들어온다는 얘기만 예전에 한번 봤어요
근데 정작 들어왔는지는 몰라요
그래서 저는 모든 테스트 간에
이제 어느 정도 자동화 가능하고 쉽게 만들 수 있어야
오히려 더 해야 된다는 주의거든요
그래서 예전에 그렇게 손수, 손코딩
이런 것들에 대해서는
제가 진짜 유닛 테스트는 정말
일반 회사에서 하기 되게 힘든 인건비를 많이 차지하는 분야였다고 생각을 하고
이제 마소같이 훌륭한
뭐라 그럴까 제가 마소파라고 이제 얘기해야 될 것 같은데
여기서 정말 개발 프로세스 확실하게 이해하고 있는 회사는 마소밖에 없는 것 같아요
소프트웨어 개발 프로세스를
그래서 이걸 어떻게든 쉽게 만들어 주는 그런 회사
그럼에도 불구하고 비주얼 스튜디오를 이제
공짜로 뿌리고 있는 회사잖아요?
그 정도의 회사가 들어와서
정립을 해주면서부터 어떻게든 일반 회사도 도입할 수 있는 시스템이 되어가는 것 같아요
그래서 이거는 좀 더 지켜봐야 될 문제고
그거를 다 떠나서 스태틱 아날리스트는 이미 몇 년 전부터 계속 그런 삽질해오다가
이제 사용할 수 있는 단계가 됐으니까
사용할 수 있는 단계가 된 지 한 3~4년은 돼요
써보라고 해드리고 싶어요
한 번씩은 돌려보자
비주얼 스튜디오에서 매니처즘에 있어요
그래서 그 정도로 오늘은 포프TV에 유용한 정보를 전해드리면서
포프였습니다
감사합니다
