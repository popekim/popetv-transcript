예 안녕하세요 포프입니다
오늘 할 얘기는 제목을 지금 어떻게 낼지 모르는 그런 비디오에요
되게 멋있는 제목을 만들 수 있을 것 같은데
지금 당장 비디오를 만드는 순간에는
이제 어떻게 만들어야지 기억이 안나요
이 얘기를 하게 된 계기가 뭐냐면
벌써 몇 달 지난 것 같아요
그 몇 달 전에 얘기를 해놓고
언젠가 비디오 만들어야지라고 메모를 적어놨다 만드는 건데
제가 한번 되게 유명한 게임 쪽에서 되게 유명한 프로그래머
아마 교수이기도 할 거예요
그 사람하고 트위터로 약간 설전을 한 적이 있어요
그 계기가 뭐였냐면
그 사람이 한 얘기는 3D 그래픽 쪽에 보면
보통 오른손 좌표 왼손 좌표라는 게 있잖아요
이 사람이 뭐라고 했냐면
왼손 좌표 좀 쓰지 말라고요
실제 그러면서 하는 얘기가
모든 교과서에 그 사람도 말해 잘못했지만
제 생각에 99% 95%의 교과서가
다 오른손 좌표를 쓰고 있기 때문에
오른손 좌표로 그냥 모든 3D 그래픽 프로그래머를 만들면 훨씬 편한데
왜 왼손 좌표로 만들어서 사람들을 자꾸만 헷갈리게 만드냐
이런 식으로 글을 썼어요
제가 그걸 보고 나서 이제 이 사람한테 했던 얘기가 뭐였냐면
저는 반론을 한 거죠
그럼 제가 한 얘기가 뭐냐면
네가 지금 오른손 좌표가 옳다고 말할 수 있는 근거로
모든 교과서가 이걸 쓰고 있다 왜 근거를 댈 수 있냐고 물어봤어요
왜냐하면 나는 너한테 댈 수 있는 근거가
모든 AAA 게임들이 사실은 리눅스를 거의 무시하고
윈도우스 기반 그리고 아니면 엑스박스 기반
그리고 이제 PS로 가긴 하지만
기반으로 도운 게 되게 많기 때문에
실제 게임의 절반 이상은 왼손 좌표를 쓰고 있다라고 말을 해줬어요
근데 이제 이 사람은 반박을 하는데
계속 똑같이 교과서로 돌아가고 물리 교과서도 그렇게 쓰였고
수학 교과서도 그렇게 쓰였고 계속 이렇게 가는 거예요
그래서 제가 또 했던 얘기가
아니 그러면은 네가 프로그래밍 어떤 언어를 보든 간에
왜냐면 우리는 수학 책을 말하고 있는 게 아니지 않냐
모든 연산은 왼쪽에서 오른쪽으로 일어나고 있지 않냐 사실은
근데 그 오른손에 좌표결을 이용하다 보면은
매트릭스와 행렬을 곱할 때부터 시작해서
굉장히 이게 뭐 반드시 같이 가야 되는 건 아니지만
수학 책대로 따라가다 보면은
이제 일반 사람들이 실수하기 시작하면 굉장히 이상한 거를 만들어요
그래서 오픈지회를 해보신 분들은 알겠지만
매트릭스 곱하는 순서가 있잖아요
아 내가 이 위치가 있고 이거를 월드로 변환한 다음에
뭐 뷰 스페이스로 변환한 다음에
이제 프로젝션 스페이스로 변환을 하겠다
그럼 당연히 우리 머릿속에는
아 이 점에 월드 행렬을 곱하고
그 다음에 뷰 행렬을 곱하고
그 다음에 프로젝션 행렬을 곱한다고 얘기를 하잖아요
그러면 당연히 우리가 프로그래밍적으로 수학식...
아니 그 식을 쓸 때는 점 곱하기 행렬 행렬 행렬
뭐 그 행렬 순서가 월드 뷰 프로젝션
갈 수밖에 없어요 그죠?
근데 이제 오픈지회 계열 쪽은 특히 이제 수학책의 노테이션을 따르기 때문에
행렬을 푸쉬한 다음에 곱하게 되는데
그 푸쉬하는 순서가 정반대죠
그리고 이제 오픈지회를 보다 보면은
그런 여러 가지 이제 수학책과 맞추기 위해서
일반 수학 일반 프로그래밍 이제 코드를 짜는 거하고는
정반대의 오퍼레이션을 할 수밖에 없어요
그래서 제가 했던 얘기가
아니 그거는 네가 수학책에서 3D 그래픽을 할 때 얘기고
실제 요즘 사람들이 일반적으로 받아들이는 거에서
왼쪽에서 오른쪽으로 가는 게 올바르지 않을까?
라는 얘기를 해도 이 사람은 계속 수학책 얘기만 했어요
그래서 제가 그 외에 할 말이 없으면 일단 관두자고 얘기를 했어요
근데 제가 하는 얘기는 뭐냐면
역사적으로 당연히 3D 그래픽이라는 거 자체가 수학에서 시작을 한 거고
그럼 수학을 먼저 안 사람들이 3D 그래픽을 했다고 봐요
근데 요즘 프로그래머들은 이제
코딩을 먼저 한 다음에 3D를 배우는 기본이에요
그게 평균적으로 그런 거 같아요
굉장히 많은 사람들이
제 주변에 3D를 배우는 사람 중에 수학을 먼저 배우고 코딩을 배우고
3D 그래픽을 하는 사람보다는
코딩을 먼저 배운 다음에 3D 그래픽을 배워서
이제 그래픽 프로그래머가 되는 경우가 더 많거든요
그럼 이 사람들은 언제나 오픈지회에서 한 번씩은 이제 헷갈리게 돼요
그 곱하는 순서라던가 이런 거에서
그럼 이제 아 오픈지회는 왜 이래요?
그럼 아 원래 그게 맞는 거야
이런 얘기를 해요
디렉텍스가 틀린 거야
근데 예전에 3D 엔진 아키텍처라는 책을 쓰신 굉장히 유명하신 분이 있죠
이름은 기억이 안 나요 유명하신데
그분은 그냥 한순간에 다 웃기지 말라 그래요
왼손 오른손 필요 없는 논쟁이라고 어떤 거 써도 상관없다고
딱 그런 얘기 하거든요
그건 네가 쓰고 그대로 가면 되는 거라고
근데 제가 봐도 그래요
그래서 뭐가 맞냐 틀리냐는 없어요
근데 문제는 제가 지금 그 처음 말했던
그 교수라는 프로그램 사람을 어떻게 표현해야 되냐면은
훌륭한 프로그래머인데 이제 뭐라 그럴까
자기가 배워온 과정에만 막혀서
이제 일반 사람들이 어떻게 이걸 배워가는지를 판단을 못하는 그런 쪽의 프로그래머를 보거든요
그러니까 테크 쪽으로는 훌륭한데 사람을 이해하는 능력은 조금 모자란 거
아 저희 이제 글로아 사장님이 언제나 하는 얘기가 있어요
훌륭한 프로그래머는 될 수 있지만 제품을 이해 못하고 사람을 이해 못하면
그 이상으로 올라가서 뭐 비즈니스를 할 수가 없고
그냥 프로그래머 이상으로 올라가서 무슨 뭐 큰 아키텍처를 할 수 없다는 얘기를 해요
그런 개념이라고 봐요
그리고 제 입장에서는 그런 분들이 이제 뭔가를 이끌어 가는 게 되게 위험하다고 보고
기술적인 거 외에 업계의 트렌드라던가
그래서 저는 그냥 그분 어떻게 보면 사람을 이해 못하고 사람들이 어떻게 코딩을 짜는 지를 이해 못하는 거라고 봐요
그래서 제가 이제 그런 얘기를 할 때에
이제 얘기한 게 대부분의 인간들한테는 현재 왼쪽에서 오른쪽으로 글도 쓰고
수식도 왼쪽에서 오른쪽으로 하고 거의 모든 게 왼쪽에서 오른쪽 정렬이 되어 있기 때문에
그게 일반 사람들한테 훨씬 편한 거다
네가 그 순서를 바꾸는 순간 그 사람들은 가장 익숙한 걸 버리고
실수를 더 만들 수 있는 기회를 만드는 거다 얘기를 해서요
그럼 이제 다른 사람이 또 뛰어들어갖고 야 일본이나 이런 거는 다 오른쪽에서 왼쪽으로 쓰잖아 위아래로 쓰면서 이러는데
제가 또 했던 말이
한국도 그렇고
한국도 옛날에는 다 글이 이렇게 썼죠
오른쪽에서 위아래로 쓰면서 오른쪽 컬럼부터 하나씩 메꿔갔죠
일본도 그랬어요
근데 요즘은 일본도 그렇고 많은 한국 책도 대부분
거의 대부분의 한국 책은 그냥 영어식으로 쓰고 일본도 많이 따라갔고 중국은 제가 정확히 모르겠어요
그래서 그 얘기를 하면서 뭐 이게 컴퓨터의 발달이든 뭐든지 간에 그렇게 변화가 된 거고
이게 사람들이 이제 익숙하다고 느끼는 거기 때문에 사람들이 익숙한 게
이게 가야 된다
이게 기술적으로 특별히 단점이 있지 않은 거면
저는 그 얘기를 해요
이게 어쩌면 UX라는 거거든요
그래서 지금 이런 기술적으로 뛰어나지만 그리고 자기가 기술적으로 뛰어나기 때문에 자기가 말하는 게 트렌드가 될 거라고 믿고 있지만
실제 그러지 못하면서 이제 그러지 못하면 스스로 막 이렇게 열받아 하는 사람들이 있어요
이제 그런 거를 본 것 같아서 제가 이제 한마디를 해준 거고
제가 결국 걔가 뭐라 그럴 때마다 그래 수학 책이 그랬다는 거지 그 이외에 게 있냐고 그럴 때 아무 말도 못 했어요
그래서 제가 할 수 있던 말은 왜 게임들은 대부분 이제 왼손 좌표를 많이 쓰고 있고 어떤 거는 뭘 쓰고 있고
그리고 그거에 대한 기술적인 가치나 뭐가 옳다 그르다 없는 상황이면은 결국엔 사람들이 제대로 이해할 수 있고
새로 들어오는 사람들이 쉽게 이해할 수 있는 거 왜냐면 익숙한 거니까 그걸로 가야 된다는 말을 했거든요
근데 뭐 그 뒤에 대답을 못하더라고 아예
그래서 보면서 좀
뭐 대학 교수까지 한다는 사람이 이런 게 좀 어이가 없었긴 했죠 사실은
그래서 그런 게 논란이 되게 많았어요 그거랑 관련된 거하고
일단 예전에 노말맵 관련 얘기에서도 그런 얘기를 제가 했었어요
노말맵 xyz 좌표 얘기하면서 사실은 이제 하이라이트가 수학적으로 따지면 아래쪽하고 오른쪽에 있어야 되는데
이게 일반적인 아티스트가 봤을 때는
보통 태양이 위에 있기 때문에 하이라이트가 위에 없으면 이게 튀어나와야 이렇게 들어가 있게 보인다라는 얘기를 한 적이 있어요
옛날에 아마 노말맵 비디오에서 말했을 거예요
그래서 저희는 이제 게임 개발할 때 아티스트가 그런 불평을 하니까 어 그래 그 코드에서 뒤집는 거 어렵지 않으니까 뒤집어 줄게
그래서 이미지 자체는 이제 아티스트가 보기에 하이라이트가 제대로 들어가 있는 듯한 이미지 위에 들어가 있는 거
그러나 코드에서는 하이라이트 뒤집었죠 그거 해봐야 뭐 곱하기 한 번이니까 뭐 코드가 한 0.001% 늦어지겠지만
그래도 이제 아트를 이제 만드는 애들이 굉장히 매뉴얼, 레이버, 시간을 몸빵하면서 엄청나게 일을 하잖아요
그러면 걔네들을 편하게 해주고 걔네들이 실수를 적게 해주는 게 전체 프로덕션에 훨씬 좋다고 생각을 했어요
이렇게 UX적인 측면이었죠 그런 것도 있었고
제가 한동안 이제 예전에 한 번 블로그로 남긴 것 같은데 오픈GL에서 이제 UV 좌표 xyz 좌표잖아요
그것도 뒤집혀 있잖아요 그래서 그것 갖고 제가 뭐라고 말을 하는지 모르겠는데

많이 했었거든요
그리고 이제 유니티 쪽에서
제가 뭐라 그러기도 했고
그 개념은 또 뭐냐면
수학해보신 분들 알죠?
3,4분면 이런 거
4,4분면 이런 거 있는 거
그럼 1,4분면을 보면
X가 오른쪽으로 가고 있고
Y가 위로 가고 있잖아요
그래서 걔네가 좌표를 볼 때는
0,0이 제일 왼쪽 아래 코너고
위로 갈수록 Y좌표가 증가하는 거죠
그래서 오픈지엘에서 이미지
텍스처를 넣을 때도
그 이미지가 1,4분면에 있다고 보고
이미지 제일 꼭대가 0,0이 아니라
제일 아래가
제일 아래 왼쪽이 0,0이라고 봐요
그리고 이제 Y가 하나씩 올라가게 보고
그래서 실제 2D 이미지
이렇게 열심히 하던 사람도 있잖아요
포토샵이라던가 데오븐
그걸로 먼저 이미지 매니플레이션 할 테니까
그 사람들이 이제
3D 그래픽이 와서 오픈지엘을 잡으면
거기서 학을 뛰기 시작을 해요
왜 밑에가 왼쪽 아래가 0,0이냐고
그럼 이제
굉장히 프라이드한
프라이드를 가지고 있는 오픈지엘
이제
이제 뭐
뭐랄까 광신도라고 하죠
광신도들은 그런 얘기를 하죠
아 이게 올바른 거야
수학적으로 이게 올바른 거야
1,4분면이 이렇잖아
이런 얘기를 해요
저는 어이가 없어요 그냥
왜냐하면은
수학적으로 1,4분면이 있어서
그래서 좋은 거고
다 좋아
그럼 왜 1,4분면을
이 아래쪽에 안 만들었니
그래도 되는 걸
안 한 거잖아요 그냥
그거는 어쩌면 정해진 규칙이라고 좋아요
좋은데
이제는 대부분의 사람들이
이제 이미지
뭐 자르고 관리하고 이런 거 잘하잖아요
폰으로도 하고
포토샵으로도 하고
그리고 그 사람들이 그게 이제 숙련이 돼서
결과적으로 3D계로 넘어오는 건데
그 사람들한테는
그리고 온갖 2D 이미지 쪽에서는
0,0이 왼쪽 위라고요
그러면
디렉트엑스는
재밌는 거는
디렉트엑스는 왼쪽이 0,0
왼쪽 위가 0,0이에요
그리고 아까 말했듯이
디렉트엑스는 뭐
오른손 좌표계를 쓸 수도 있지만
기본은 왼손 좌표계예요
그래서 그런 여러 가지를 따지면은
디렉트엑스가 정말 일반 사람들의 사용법을
보통 사람들이 어떻게 이제 생각하는지를
잘 이해하는 방향으로
뭐 지네가 만들었든 따라왔든 그런 거거든요
디렉트엑스 창시자 말에 의하면
그냥 왼손을 골랐어 라고 얘기해요
오른손 뭐 오른손도 있는데 그냥
왼손 골랐어
그게 전부였어요 그 사람은
근데 어찌 보면은
이제 뭐 결과에
이유는 어떻든 간에
결과적으로는
디렉트엑스가 훨씬 더 사용자 친화적인
그런 그래픽 APA가 된 거고
아까 UB 코디넷 얘기할 때도
UB 좌표
오픈 GL은 말도 안 되게
00이 제일 아래쪽에 있는 거고
디렉트엑스는 00이 위에 있는 거예요
그래서 그런 이상한 현상이 되어 있어요 사실은
그럼 결과적으로는
아까 말했듯이 뭐가 기술적으로 틀리다 맞달로 나는 게 아니에요
그거는 거의 이제 차이가 없어요
사람한테 뭐가 익숙한 거냐라는 얘기를 하고 싶다면
수학자한테 익숙한 거는 오픈 GL이고 당연히
수학자가 아닌 사람한테 익숙한 거는
이제 디렉트엑스 쪽이라고 봐야 되는 거죠
그러면은 이미
어느 쪽에 수가 더 많겠어요
그러면 디렉트엑스 쪽이라고 딱 할 수밖에 없거든요
그래서 그냥 어찌 보면은
자기네가 가지고 있는 그라운드를 이제 잃어가는 과정
아니면은 이제 저희가 맞춤법 같은 게 있어도
옛날에는 뭐 씁니다 이게 없었어요
말은 씁니다라고 해도 다 음리다로 썼거든요
음리다에서 맞춤법이 사람들이 다
씁니다로 쓰니까 발음상
씁니다로 바꿨는데
아니야 음리다가 맞는 거야
이게 정통이야 라고 우기는 거하고 다를 수가 없다는 거예요
제 생각에
그래서 그거고
또 하나 제가 얼마 전에 한 번 되게
얼마 전이 아니라 계속 신랄하게
Git을 사랑하면서 Git을 까는 비디오를 자주 만들어요
Git이 왜 유저 프렌들리 하지 못한가
그리고 전에 라지파일 이거 관리 못하는 거
Git의 단점인데
Git에게 물으면 아 우린 그런 거 안 해도 돼
원래 Git은 그런 용도가 아니야
라고 우기고 있다가
결과적으로는 큰 기업들이 그 기능을 올리면서
아 이제 Git이 라지파일이 되는구나
하고 좋아하는 그런 거
그러니까
무신?
어찌 보면은 자기들이 장점이 있는데
그건 좋아요
그 장점은 유지하는 게 좋은데
단점을 하나 지적받을 때마다
그 단점을 인정 못하는
그 알 수 없는 자존심 상실
자신감 상실
이런 모습을 보여주잖아요
그것도 똑같은 거라고 봐요
어찌 보면은
뭐 여태까지 있던 그 소스 컨트롤 프로그램도 되게 많아요
그리고 뭐 지금 이제 최고의 소스 컨트롤 시스템이 뭐냐
라고 부르면은 저는 이제
뭐 용도 따라 약간 달라지는데
퍼포스 아니면은
Git이라고 할 수밖에 없어요
이제 그 두 개가 묘하게 이제 점점 접목이 되고 아니면
퍼포스나 비주얼 스튜디오 걔네들 개념으로 더 발전이 될 테지만
걔네가 주도하에
뭐 Git에 계속
컨트리뷰션을 하겠죠
근데 걔네도 똑같은 거였거든요
퍼포스나
SVN이나 다 커맨드 라인으로 할 수가 있어요 사실은
근데 이 회사들이 잘한 것 중에 하나는
기본적으로는
구이 툴을 만들어줘요 GUI 툴을
그래서 단순 프로그래머가 아니라 아티스트까지도
아니면 심지어는 프로그래머까지도
이제 가장 흔히 하는 그런 오퍼레이션들 있잖아요
뭐 싱크 한다거나 풀 한다거나 푸쉬 한다거나
이런 거는 버튼 하나 클릭으로 할 수 있게 해주고
어떤 파일이 바뀐지 한눈에 보여주게 하고
이런 것들이 있어요
그리고 그 툴들이 절대 커맨드 라인 툴보다 느리지 않았고요
그러면 웬만한 사람들은 그냥 간단하게
그 구이 툴로 버튼 클릭하면서 모든 소스 컨트롤을 할 수가 있거든요
근데 그러다가 정말 복잡한 걸 내면 이제 커맨드 라인 띄워갖고
뭐 이상한 것들 하는 사람들이 따로 있는 거고
하지만 이제 Git은 그 툴이 거의 없고 없었고
뭐 지금 나오고 있지만 여전히 굉장히 후지죠
그게 나온 상황에서 이제 아 이 툴이 나왔다
이걸 좀 더 좋게 만들라 그러면
아직도 거기서 하는 얘기들은 보통 아 그런 게 왜 필요하냐
Git은 그냥 커맨드 라인 하는 게 맞아 이러고 있어요
근데 이게 솔직한 얘기로 Git을 만드는 쪽에서
제대로 만들어주면 더 잘 만들 수 있거든요?
근데 그 외에 다른 회사들이 만들고 있는 거죠
그리고 그래서 괜찮게 나온 것들이 있지만
아직도 제가 아까 말했던 퍼포스나
심지어는 서브 버전 애들에 비해서 굉장히
이제 성능이나 수준이나 기능이 딸리는 게 사실이고
Git이 특히 왜 툴이 중요하냐면
Git 자체가 이제 워낙 중구난방적으로 개발이 되었고
그리고 Git을 이제 검색을 하다 보면 인터넷이나 이런 데서
보통 Git을 어떻게 쓰지 말아야 되는지가 얘기가 더 많이 나와요
이러면 날아간다
이렇게 쓰지 마라 저렇게 하지 마라 저렇게 하지 마라
어떻게 쓰냐보다는 이런 거 하면 완벽히 날아간다
이 얘기가 더 많아요
그만큼 실수로 하기 쉬운 그런 플랫폼을 만들어 놨다는 거예요
그리고 그 실수를 막기 위해 지금 점점 툴을 올리고 있는 거고
근데 어찌 보면 이것도 굉장히 UX를 생각을 못한 그런 툴 중에 하나예요
제가 Git을 쓰기 시작할 때 Mercurial도 같이 쓰기 시작을 했었거든요?
뭐 기술적인 내부가 뭐가 좋고 나쁘고를 떠나서
Mercurial 자체가 굉장히 이제 실수...
기술을 훨씬 적게 할 수 있었어요 Git에 비해서
뭐 브랜치 이런 거 다 포함해도
그래서 그런 면에서 이제 Git이 살아남은 거는 당연히 리눅스라는 굉장히 큰 이제
디스트로라고 해야 되나 리포라고 해야 되나 걔네가 쓰기 시작을 했고
그리고 코드 온리에 있어서는 뭐 Git이나 이제 Mercurial이나 거의 비슷했는데
리눅스의 정신 그쪽의 정신들을 가지고 있는 사람들이 똘똘 뭉쳐서
Git을 이제 굉장히 큰 마이너리티가 되게 만들었던 거였죠
새로 나온 Distributed Source Control System 중에
Git이 가장 많이 쓰니까 그리고 그쪽의 사람들이 좋다고 하고 있고
계속 거기서 이제 뭐랄까 종교화를 만드니까 이제
어 뭐 딴 애들이 봤을 때 어 Mercurial하고 Git 중에 뭘 지원해야 돼?
그럼 Git을 지원할 수밖에 없었던 거 같아요
근데 Mercurial은 이미 large file 이런 것도 굉장히 일찍부터 나와있었죠
그래서 Mercurial이 훨씬 기능적이나 이런 건 났었는데
뭐 나중에 들어가서 뭐 확장성 이런 거 따지면 또 얘기가 달라지지만
결과적으로는 이제 Git이 넘겨가는 상황이고 그렇게 약간은
새로운 이제 에러를 열은 건 사실이에요
그 열고 그게 굉장히 좋은 개념이기도 하고
그거를 잘 이용할 때가 되게 많아요
그렇기 때문에 이제 마소드 윈도우 사이드를 Git으로 옮긴 거고
이제 많은 게임에서도 이제 소울스 코드는 Git으로 점점 옮겨가고 있어요
아직도 바이너리 쪽은 이제 large file extension 그쪽 이제
열심히 이제 쓰면서 점점 옮겨가고 있을 것 같긴 한데
그전까지는 그게 없어서 못 옮겼죠 그래서
게임 인더스트리는 말도 안 되게 퍼포스를 계속 썼다거나
퍼포스를 갈라쓰거나 막 이상한 짓을 했었죠
그래서 이제 역시 Git은 기술적으로 훌륭하게 만들었지만
그 외에 UX라던가 그 외에 이제 제품화에 있어서는 굉장히 크게
이제 실패를 했던 제품 중에 하나라고 생각을 해요
그거를 이제 그 제품화를 잘 할 수 있는 사람들이 이제 만들고 있고
그리고 뭐 제가 볼 때는 3D 그래픽도 그런 것 같고
아니면 3D 그래픽은 그냥 시대가 변했는데 그 못 따라가고 있는
그런 예전 사람들이 계속 이상한 얘기를 하고 있는 것 같고
결과적으로는 이제 제품이 나오든 뭐하든 UX를 생각을 못하면
성장이 어렵다는 이제 그런 얘기거든요
아니면 사람들이 계속 실수를 하게 되고 이제 짜증내하다가
더 좋은 거 보면 그쪽으로 옮겨가는
근데 지금 Git도 그러고 있는 것 같고 그래픽은 뭐 이미 많이 넘어갔으니까
뭐 특별히 할 말은 없고
뭐 뭐 3D 수학 이쪽도 제일 잘 하는 것 같고
제가 볼 때는 지금이야 뭐 다 그런 책이 유명하지만
계속 이렇게 가다 보면 어느 순간에는 이제 한쪽 지금 이제 뭐 90%가
오른손잡이다라는 그런 게 점점 줄어들 계기가 있지 않을까 싶어요
근데 굉장히 먼 미래인 것 같고 굉장히 작은 그룹인 것 같기도 하기 때문에
안 일어날 수도 있는데 뭐 가능하다고 봐요 가능하다고
그게 이제 일반 사람들한테 익숙해진 거니까
아니면 프로그래밍 언어 자체를 오른쪽에서 왼쪽으로 하게 바꾸거나
그건 또 말이 안 되지
그쵸?
그렇게 생각을 하고
그러면은 또 이제 그럼 왜 그렇게 이제
아 그니까 또 하나가 이제 문제가 뭐냐면 이제 뭐 아까 말했던 Git도 그렇고
이제 그래픽 쪽도 그렇고
이제 자기네 진영이 아닌 사람들은 악마라는 식으로 되게 많이 몰아가요
그럼 이거는 제가 자꾸 종교라고 얘기를 하는 이유가 뭐냐면
이제 기독교 쪽에 좀 이렇게 잘못 빠지신 분들 보면은
나 갖고 이제 뭐 너 기독교 안 믿으면 지옥 간다고 하면은
막 패킷 들고 있고
막 그리고 무슨 애들이 길거리에서 치마 입고 있으면 뭐 미니스코트 입으면 지옥 간다
이런 얘기 하고
그런 얘기 하잖아요
전 거의 그 개념의 이제 행위를 그쪽에서 봤어요
예를 들어서 오픈GL 쪽에서 이제 마소가 디렉텍스를 만들어 갖고
독점 플랫폼을 만들어서 이꼴이다
막 이런 얘기 하거든요
근데 이제 그거에 대해서 그리고 디렉텍스를 까는 이유가 그거예요
이거는 한 회사에서 종속된 기술이 아니냐
막 이렇게 저렇게 까는데
근데 재밌는 거는
그 마소가 사실은 오픈GL의 부흥기를 가져왔던 회사죠
디렉텍스를 만들기 전에 이제 한참 윈도우스 3.1인지 9.5인지 나올 때
게임 윈도우스에 돌게 만들겠다고 오픈GL을 갖다 다 뜯어고치고
엄청 컨트리뷰션 해갖고 오픈GL 잘 돌게 만들어 놨고
그 다음에 이제 오픈GL에서 자기가 볼 때 문제가 있으니까
디렉텍스를 사갖고 디렉텍스를 자기 기반으로 만든 거죠
2차 부흥기는 역시 애플이었죠
애플이 이제 모바일로 만들었고
모바일폰을 만들어야 되는데
그래픽 라이브를 돌려야 돼
자체 개발 안 되니까 일단 오픈GL을 갖다 쓴 거죠
그러다가 이제 자기도 이제 오픈GL을 엄청 부흥시켜놨다가
우리 자체 API가 필요할 것 같아
오픈GL이 너무 비효율적인 것 같아
그래서 만든 게 메탈 API고
그래서 결국 오픈GL을 이렇게 주도를 했던
주도라고 하기에는 굉장히 부흥시켰던 두 큰 회사가 사실은 악마 회사예요
그리고 디렉텍스가 그 독과적인 문제라면은
그게 문제라면은
솔직히 리눅스에서도 디렉텍스 돌리게 드라이버 만들고 이런 애들이 있거든요
만들면 돼요 안 만들잖아요 그 사람들이
뭐 그거 아닌가?
그러고 똑같은 얘기로 이제 모바일에서 그러면은
야 안드로이드는 오픈GL만 되잖아
그러면 이건 독과점이잖아요
그러면 디렉텍스 당연히 지원해 줘야 되는 거 아닌가
이런 똑같은 논리를 펼칠 수도 있어요
그러면 오픈GL은 악마다 라고 얘기할 수도 있거든
말이 안 되는 거지 그 순간
그래서 그런 이상한 이념 싸움 하는 게 되게 신기했고
Git도 그런 게 강했죠
Git도 처음 나왔을 때
아 우리는 오픈소스 소스 컨트롤 시스템이고
뭐 다른 것들은 한 기업한테 종속이 된 거니까
뭐 이거는 오픈소스 정신이 아니다
이런 얘기를 했는데
결과적으로는 지금 Git을 엄청 발전시키고 있는 게
그 악마 같은 회사들이거든요
뭐 자기네가 필요하니까 뭐 오케이
근데 그 악마라고 부르는 사람들의 도움을 받고 싶을까?
이제 이거는 좀 어찌 보면은
그니까
그냥 자기가 잘하는 거라 잘한다 그러고
못하는 거 못한다 그러면 되거든요
근데 잘하는 거는 인정을 받는데
못하는 거를 인정을 하고
더 낮게 만들겠다는 생각을 하기보다는 그냥
아 우리는 원래 이런 거야
너네는 그냥 나쁜 놈들이라서 이런 얘기하는 거야
너네는 악마니까 말하지마
이런 분위기로 가는 거 자체가 저는
모르겠어요
아까 말했던 어찌 보면은
그 자랑스러운 엔지니어
그러나 자기가 뭐라 그럴까
불만이 있는 거 같아요 그냥
그냥 사회에 대해 내가 그만큼 인정을 못 받고 있다
뭐 그런 불만?
그래서 그런 게 자꾸만 그런 쪽으로 나오는 게 아닌가 생각이 들어요
그래서 제가 제 주변에도 그런 엔지니어들이 몇 명 있어요
되게 뛰어난 실력자 되게 뛰어난데
나이가 들어가면서 되게 힘들어지는 사람들
근데 이제 그 사람들은 점점 기술적으로 이제 의존하면서
굉장히 프라이드를 갖게 되는데
그 프라이드가 독소가 되는 경우가 가끔 있고
아니면 제품 자체를 망가뜨리는 프라이드가 나오는 경우도 있고
근데 이제 본인은 그 외의 것을 모르고
자기가 점점 가치가 상실되고 있다는 걸 느끼는데
그렇기 때문에 더더욱 거기에 들러붙어 있으려는 경향이 강한 거 같아요
그냥 아까 말했던 것처럼 좀 더 내가 똑똑한 건 이해해요
나는 그거 쉬워
나 오른손잡이 쉽고 다 쉬워 나 아니까
근데 그거를 떠나서
왜 이게 더 많은 사람들한테 가지 못할까를 고민하다 보면은
이제 이해가 되거든요
사람들은 이런 지식을 갖고 있으니까
내가 가진 지식이 없으니까
당연히 이게 어렵겠구나
그러면 이거를 다른 사람들 맞춰왔고
안 어려우니까 난 이미 둘 다 이해하니까
맞춰왔고 바꿔주면 되고
그럼 그걸로 인해 훨씬 더 퍼지는 효과가 커지면서
내 가치도 높아지는데
그 연결관계를 못 보거나 자신이 불안하거나 그런 거 같아요
그래서 오늘 여전히 비디오 제목이 뭐로 될지 모르겠지만
그냥 프로그래머가 UX를 알아야 된다 이러기도 어렵고
엔지니어와 UX 이러기도 참 애매하고
제품과 UX인가?
어쨌든 이거는 결과적으로는 사용자들이
어떤 경험을 내 제품에서 가지냐가 아니라
여태까지 살아온 경험들이 뭐냐
걔네들한테 익숙한 게 뭐냐
이걸 알아야만
나쁘지 않은 제품에서
정말 훌륭한 제품으로 갈 수 있는 그 교두보가 된다고 생각을 해요
그래서 아직도 제목을 뭐로 할지는 모르겠지만
오늘 비디오는 길어졌으니까 여기서 끝낼게요
포프였습니다
감사합니다
