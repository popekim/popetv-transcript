예 안녕하세요 포프입니다
오늘은 무슨 얘기를 해볼까
저희가 이제 프로그래머로 일하다 보면
소프트웨어 공학자로 일하다 보면
가끔마다 이제
핵이라는 걸 할 때가 있어요
그리고 비슷한 의미로 가끔마다
어쩔 수 없이 저희가 좀 멍청해서
버그를 만들 때가 있어요
뭐 버그가 뭔진 다 아실 거고
핵은 뭐냐? 핵이라는 건 이런 거예요
어떤 기능을 만들고 있어요
만들다가 뭔가 올바르게 만드는 방법
먼 미래를 위해 튼실하게 만드는 방법이 있는 반면에
지금 당장 어떤 일을 끝내기 위해서
쇼크컷 약간 보면 지름길 같은 거
약간 땜빵 치고 넘어가는
그런 기능들을 만드는 걸 핵이라고 해요
그래서 이제 그런 핵을 만들어야 될 때가 언제냐
우리가 예측하지도 못했던 것들이
갑자기 새로운 스펙으로 나왔어
근데 이 스펙에 따라 모든 걸
뒤집기에는 시간도 모자라고
일정도 모자란 거예요
그러나 아주 간단하게 정말
이 코드 한두 줄만 짜면
이게
나중에 먼 미래에
유지보수에 되게 어려운 코드가 될 수는 있지만
그 순간에 굉장히 빨리 기능을 주는 경우
그게 첫 번째고
두 번째는 그게 아니라
현재 어떤 기능이 들어왔는데
이 기능이 미래에 어떻게 쓰일지는 정확히 모르는 거예요
당장 필요한 건 알겠는데
이게 이쪽 방향으로 뻗어나갈 수도 있고
아니면 이거 한 번만 써도 끝날 수도 있고
이런 기능도 있어요
예측이 안 되는 거야
그럼 보통은 무슨 올바른 소프트웨어 공학적 디자인 이런 거 얘기하면
이게 어느 거에서도 쓰게 할 수 있도록
제대로 아키텍트 만들고 뭐하고
이런 얘기들이 있어요
근데 그것만 따라가다 보면
정말 말도 안 되게
정말 필요하지도 않은 거 왕창 만들어두고
나중에 평생 쓰지 않으면
오히려 유지보수가 어려워지는 경우도 있죠
그래서 이런 부분에 관해서는
저는 언제나 똑같은 얘기를 해왔었어요 사실은
핵을 하는 건 문제가 아니다
단 네가 어떤 핵을 넣었을 때
나중에 그 핵을 올바르게 바꿔서
제대로 아키텍처 만들어야 할 때
아니면 그 핵을 제거해야 할 때
그 제거하는 과정
올바른 아키텍처 만드는 과정이
가능해야 된다 나중에
그게 불가능한 핵을 만들어도
뭐 흔히 말하는 나쁜 코드 품질 이런 거죠
나중에 고칠 수가 없는 핵이 되어버려요
그 고칠 수가 없는 핵이 들어가는 순간
그 핵에 맞춰서 기존 프로그램을 돌려야 되고
새로운 기능을 또 추가를 하려면
그 핵의 또 다른 핵을 올려서
계속 고칠 수밖에 없는 거예요
그러다 보면 코드를 정말 처음부터 제대로 설계했으면
막 싹 세 줄 정도만 딱 써서
50만 가지를 이제 다 돌게 만들 수 있었던 거예요
이거는 50만가지의 핵이 들어가게 되는 그런 말전의 상황까지도 오게는 되죠
좀 과장법이에요
제가 이 이야기를 왜 하냐면
이거는 이제 핵을 만들고 이럴 때는 코드를 작성할 때는 누구나 내가 어떤 핵을 만드는지 판단이 돼요
물론 교육을 제대로 못 받았고 생각 없이 짜는 프로그램을 하면
자기가 핵으로 코드를 짜면서도 핵인지 모르죠
그런 사람들은 어찌 보면 업계에서 어차피 오래 못 버텨야 하는 사람들이니까 일단 예외로 하고
그러면 만약에 내가 핵을 만들 때 핵인 줄 안다라는 전제하에
그리고 내가 그 핵을 만들 때
그러면은 이거를 나중에 다른 방향으로 코드가 바뀔 때
그럼 스펙이 바뀔 때 이 핵을 손쉽게 올바른 방향으로 교체가 가능하냐
이 판단은 서야 한다는 거죠
그 판단이 안 서면 뭐 주니어 프로그래머고
그게 10년 뒤에도 안 서면 평생 주니어로 계셔야 하는 분이고
근데 어쨌든 간에 이거는 좀 더 명백하고 명시적이라는 거예요
근데 버그도 똑같이 돌아요
그게 그게 문제인데요 사실은
제가 최근에 겪었던 문제들 중에 하나인데 사실은
프로그래머로서 프로그래머로서 버그를 만드는 거는 어찌 보면 당연한 거예요
내가 버그가 나왔을 때 그게 내 문제인 거를 말을 하고 인정을 하고
그리고 서로 고쳐나가는 방법을
내가 고치든 남이 고치든 서로 도우면서 고쳐나갈 수 있다
왜? 내가 실제 그 버그를 만들었는데 나는 다른 기능을 만들고 있을 수도 있어요
그 버그가 발견됐을 때
그럼 나는 이것 때문에 바쁘니까 다른 사람이 대신 이 문제를 고쳐줄 수도 있어요
그리고 그건 나쁜 게 아닌 게 이 사람이 제 버그를 고쳐줄 때
이제 그 분야를 아는 사람은 두 명이 돼요
처음 만든 사람 나 버그 고쳐주는 사람 두 번째
그래서 제가 떠나더라도 버그 고쳐주는 사람이 그 분야를 좀 더 이해를 잘하기 때문에
회사에도 도움이 돼요
그리고 당연히 이제 그 사람이 만든 버그를 또 내가 가서 고쳐주고 도와줄 때가 있죠
근데 이거 문제는 이게 언제나 서로 상부상조가 돼야 되는데
뭐 굳이 프로그래머뿐만이 아니어도 어떤 직원하고 얘기를 할 때도
언제나 나는 이 사람을 이제 구해줘
언제나 뒷바라지 해주고 있는데 저 사람은 나한테 도움이 되는 게 하나도 없어
그럼 그거는 이제 공존할 수 없는 관계가 점점 되는 건 있죠
서로 윈윈이어야 하는 건 있어요
그러나 다시 본론으로 들어와서
이런 버그를 만들 때도 버그는 당연히 실수에 의해 만드는 거예요
근데 버그가 다 똑같지 않다라는 걸 말하고 싶은 거예요
어떤 버그는 발생하는 순간 그 문제가 발생을 해서
어떤 데이터베이스 자료가 좀 바뀌었다거나 뭐가 바뀌었다거나 해도
복구가 가능한 버그들이 있어요
그 문제 찾았을 때 아 그러면 이렇게 좀 돌려갖고
이런 식으로 수동으로 처리해서 처리를 할 수가 있겠구나
그런 버그라면은
만들어도 그렇게 쪽팔려할 건 아니에요 사실은
내가 만들어 놓고도 아 그래 뭐 이거는 서로 도와가면서 고치는 거고
사람이 완벽할 수 없는 건 당연히 알고
그리고 뭐 그 모든 버그를 안 만들면 당연히 좋지만
그럴 수 있는 사람을 거의 못 봤어요
정말 초천재 프로그래머도 그런 버그는 쉽게 만들고
그 사람들 자세도 내가 만든 거에 버그가 있을지 모르니까
QA 하시는 분들 있죠 테스트들 분들한테 버그를 좀 잘 봐달라
그리고 그분들이 버그 찾아오면은 다 보고
심지어 내가 만든 버그가 확실하지 않을지라도
아 이거 내가 만든 것 때문에 혹시 생긴 게 아닐까라는 의심을 가지고
한 번씩은 확인해 보는 사람들이 정말 잘 아는 사람들이에요
누가 버그 줬을 때 어 이거 내 버그 아니에요 남 줬는데
실제는 그 남이 봤을 때 이 사람 버그였던 거야
그런 게 반복되는 사람은 그냥
자기 기준보다 자기를 너무 높게 평가하기 때문에 민폐를 주는 사람이고
그러나 오늘 얘기하려고 하는 얘기는 그것도 아니야
더 큰 문제는 뭐냐면요
가끔 버그를 만드는데 돌이킬 수 없는 버그를 만드는 사람도 있어요
무슨 얘기냐 이 버그가 이제 나갔어요
제품으로 나갔어 그 버그의 기초에서 어떤 사람들이 뭐 이렇게 뭐 고객이라던가 어떤 일을 했어요
근데 그 뒤에 버그를 발견했는데 이미 고객들이 그 버그의 기초에서 어떤 일을 했어요
근데 그거를 되돌릴 수가 없는 거야 되돌리는 순간 다른 고객과의 형평성이 너무 깨져서
이런 버그를 이제 저도 4Q 아카데미 하면서 겪은 부분이 있어요
특히 뭐 자세한 것까지 제가 말할 수는 없고 자세한 것까지 말하면
이 버그를 만든 사람이 좀 이제 너무 타겟이 되는 것 같아서 그건 어려운 것 같고
어떤 프로그래머가 그 버그를 만든 거예요 그 버그를
그래서 그 문제를 찾아낸 것도 보고를 한 것도 저희 고객이 보고를 했음에도 불구하고
실제
저희 내부 개발팀에 들어오게 된 계기는 그 버그를 만든 프로그래머가 사실은
가장 먼저 그 얘기를 들었지만 저희 내부 개발팀에 전달을 안 했어요
본인이 고치고 있지도 않았고 그냥 그게 뭐 당연히 자기 버그가 아니라고 생각을 한 거지 어떤 의미에서
그러다가 제가 어떻게 며칠 뒤에 보고 나서 이거 좀 이상하다고 생각해서 파보니까 그 버그였고
그리고 그 버그를 결국에 고친 거는 또 다른 프로그래머였는데 저하고
고치면서
고치면서 이게
이게 되돌릴 수가 없는 버그인 거예요
그러면서 이제
과연 이 버그가 왜 생겼냐를 당연히 저희는 고민할 수밖에 없고
그러면 되돌릴 수 없는 버그인데
이럴 때 그나마 손해 본 사람들이 손해 보지 않게 어떤 이제 혜택을 줘야 될 거며
그렇다면 그 혜택을 줌으로 인해 이 손해를 보지 않은 다른 사람들이 그 반대로
아까 처음에 손해 봤던 사람이 혜택을 얻으면서
그 반대 사람들이 오히려 더 손해를 볼 수도 있거든 상대적으로
그래서 그런 것들이 말도 안 되게 나오는 거야 수학적으로 떨어지지도 않고
그래서 어쩔 수 없이 진짜 이제 뭐 제가 대표로 있으니까
제가 정말 미안하다고 빌고 이제 하고 이런 식으로 뭐 대처하겠다고 말하고
그런 보상이라던가 이런 걸 다 처리를 했어야 됐어요
그로 인해 다른 개발자의 수동 작업도 굉장히 많이 늘어났고
저도 일일이 처리해줘야 될 것들이 굉장히 많았고
여기서 문제가 뭐였냐면은 이 되돌릴 수 없는 버그가 사실은 나오면 안 되는 버그였던 거야
이게 저희 자체는 이제 코드 이제 리뷰도 되게 잘 보고 이런 시스템이기 때문에
처음에 이 기능이 들어갈 때 다른 개발자가 뭔가 이상하다고 판단을 해서
처음 개발한 사람한테 정말 이게 맞냐고까지 확인을 들어간 부분이 있어요 사실은
처음 개발자가 그냥 맞아요 라고 해서 확인하는데 맞아요라고 해서
맞아요라고 해서 그냥 나갔던 건데 사실은 그 확인도 제대로 안 해보고 맞다고 했던 거야 그 개발자가
그래서 누군가 이상하다고 누군가 이렇게 고민할까 나갔던 거죠
근데 이 버그가 나온 이후에 이 버그를 발견하고 고친 이후에
그 중간에 뭔가 이상하다고 질문을 했던 개발자가 저한테 그랬어요
내가 그때 이상하다고 한 거를 상대방한테 컨펌을 물어봤는데
그 컨펌을 전혀 믿지 말고 내가 계속 이상하다고 믿고
내가 직접 두 눈으로 보고 확인했었죠
내가 직접 두 눈으로 보고 확인했다면 이런 일이 안 일어날 수도 있지 않았을까 이 고민을 하는 거예요
그래서 제가 그 친구한테 한 얘기가 그건 말이 안 된다
그렇게 말하면 앞으로 우리가 뭔가 사소한 이제 의문이 있을 때마다
그 일을 하는 사람한테 물어보고 확인하라고 시키잖아요 그 사람이 가장 잘 아니까
근데 그 사람이 얘라고 했는데도 너는 그걸 의심해야 되고 모든 걸 다시 봐야 된다면
그거는 그 사람을 채용 안 하는 게 훨씬 맞는 거다라는 얘기까지 했어요 사실은
그래서 그런 문제가 있었고
지금 말한 내가 좀 더 신경 썼으면 나았지 않았을 거라 고민을 한 개발자는
자기 일이 아님에도 불구하고 이미 되돌이킬 수 없는 버그가 나갔다는 거
그것도 자기가 어쨌든 간에 어떤 방향으로 간접적으로도
연관이 되어 있던 부분에 나갔다는 것만으로도
개발자로서의 수치심을 느끼는 거예요
되돌이킬 수 없는 핵을 만드는 것도 당연히 수치심을 느껴야 하지만
되돌이킬 수 없는 버그를 만드는 것도 굉장히 수치스러워요
그런데 또 하나의 문제점은 처음에 그 버그를 만든 사람은 그런 자세가 아니었다는 거죠
그 뒤에 그거에 대해서 물론 자기가 잘못했다는 얘기는 당연히 했지만
다른 사람들이 생각하면서 이걸 어떻게 방지할 수 있지
이런 일이 왜 일어났지를 고민하는 그 고민도 안 하는 것 같았어요
그냥 그 순간에 미안하다는 말은 넘어가고
이게 다른 버그랑 거의 그냥 똑같은 동급의 버그라고 생각하는 그런 느낌
그리고 그 뒤에 그런 버그들 때문에 여러 가지 수작업을 하고 있는 것 같아요

그걸 해야 했던 것도 본인이 책임지고 하기보다는
다른 사람들이 계속 하게 되는 그런 상황도 조금 있었어요
그래서 결과적으로는 그거거든요 사실은
그러면 이런 문제가 있을 때 제가 말했어요 아까도
핵을 만들 때는 뭐가 돌이킬 수 있고 돌이킬 수 없느냐 판단하기 쉽다고 그랬어요
버그는 어려워 왜 버그는 실수로 나오는 거니까
그래서 그게 문제인 거예요
그런데 이런 부분들은
아까 제가 말했던 그 사람 있죠 중간에 내가 확인을 좀 더 잘했으면
내가 간접적으로 연관이 돼 있었으니까 더 문제가 없지 않았을까
그런 자세를 가져야만 되돌이킬 수 없는 버그를 안 만들더라고요
무슨 얘기냐
내가 어떤 코드를 짜던 간에 버그가 날 수 있다는 걸 인지를 해요
그리고 그거에 대한 테스트를 적당히 하죠
내가 어느 테스트를 말도 안 되게 내가 짜는 코드 하나하나 다 테스트 케이스 만들어서 돌리는 거는
그건 일반적인 상황에서는 시간 낭비고 말도 안 되는 일이고 사실은
그래서 일반적으로 돌이킬 수 있는 버그라면 이 정도만 테스트하면 된다
아니면 나는 간단하게 한두 가지 테스트하고
QA 넘겨서 전문 테스트들이 좀 더 적당히 테스트하고 넘어가면 된다
그러면 OK예요 근데 그게 아니라 내가 이 코드를 짰어요
이게 바뀜으로 인해서 굉장히 이게 만약에 버그가 있다면
되돌이킬 수 없는 일이 나는 거예요 그러면 나도 테스트를 충분히 하지만 그죠?
그 외에
이제
내가 가지고 있던 이 기능이 어떤 거라는 전제하의 시간
뭐 프로그램을 짜는 거잖아요 데이터가 어떻다는 전제하에
그 전제가 틀리지 않나를 고민을 할 수가 있는 거예요
고민을 하면은 실제 있는 데이터랑 비교를 해볼 거고
아니면은 그걸 좀 더 잘 아는 사람한테 코드 리뷰를 던져왔고
요 부분은 내가 정말 확실치 않으니까 요것만은 좀 꼼꼼히 봐달라
그리고 내가 한번 돌리더라도 다른 QA한테 얘기를 해서
아 요 부분을
아 요 부분을
조금 더 깊게 봐달라 요거는 만약에 버그가 있으면은 우리가 되돌이킬 수 없으니까
즉 무슨 얘기냐 내가 기능을 100개를 만들었을 때
솔직히 거기서 되돌이킬 수 없는 버그가 나오는 경우는 아마 10% 미만일 거예요
그럼 10개 정도를 정말 누군가한테 꼼꼼히 봐달라고 하고
90개 정도는 적당히 체크하고 이 정도면 충분해 혹시라도 버그가 나오면 좀 이따 고치지
라고 하는 마음을 가지면 된다는 거예요
그니까 뭐가 중요하고 뭐가 안 중요한지를 판단할 수 있는 기능 그...
능력이 있어야 되고 내가 만드는 기능이 실제 유저가 어떻게 쓸 거며
거기서 이런 버그가 생겼을 때 어떤 버그가 생겼을 때 뭔가 꼬였을 때
과연 우리가 이거를 고칠 수 있느냐 그 문제가 생긴다는 거죠
이거를 보니 스스로 모를 수도 있어요 당연히 주니어 프로그래머라면 그죠
근데 코드 리뷰를 제대로 봐주는 회사였다면은 어떤 이제 코드 리뷰 보는 사람 중에
한 명은 분명히 의심을 가질 거예요 이게 정말 올바른 거야 그때 자기 머릿속에서
올바른 게 아니라 그걸 데이트하고 비교해 보고 뭘 비교해 보고 아 내가 좀 게을렀구나
저 사람이 의문을 가지니까 이건 좀 더 한번은 확인해야겠구나 라고 확인을 한 다음에 답을 해야 되는데
그 자세가 안 되어 있고 경험이 적고 생각이 약간은 모자랄 수밖에 없는 주니어 프로그래머들은 그런 문제를 만든다는 거죠
그래서 여러 가지가 복합되어 있는 거예요 당연히 사람이 버그도 만들 수도 있지 그게 문제요라고 한다면은 버그 만드는 건 문제가 아니야
아니라는 거야. 근데
되돌이킬 수 없는 버그를 만드는 게
문제라는 거야. 저는 그냥 일 하라는
대로 했어요. 그 하라는 게 뭐였는데?
어, 요 기능 만들라고요.
그 기능 만들 때 버그를 만들라고 했어요?
아니죠. 버그 없이 만드는 게 원래 할 일이죠.
근데 그게 안 되니까
다른 시스템들이 있는 거지.
그래서 그거를 보면서
이제 프로그래머의 자세라는 거에
대해 조금 생각을 많이 했어요. 사실은.
그 가장 큰 문제가 뭐였냐면은
내가 만든
코드에 대한 책임감
그리고
어떤
버그를 만들었을 때 그냥 아 뭐
이 정도는 뭐 다 할 수 있는 거니까 하면서
약간은 너그러워지기도 하고
왜냐면 모든 버그에 내가
자책을 하기 시작하면 그거는 코딩 못해요.
코딩 못해요. 그래서
아 이런 거는 누구나 할 수 있는
버그니까 아 이거 실수했구나.
다음부터 조금 더 조심해야지라
아 요 부분에 문제가 생기면은
큰일이 나겠구나.
그러면 만약에 그게 만약에 정말 그래도
낫다면 그거에서 정말
쪽팔려야 할 줄 아는 정신 아 내가
정말 진짜 큰
과오를 해 뭐 만들었구나
그리고 그거에서
어떤 의미에서는
한 일주일 정도
아니면 그보다 길게도 와 진짜 내가
와 이걸 정말 해야 되나
내가 개쓰레기 아닌가 내가 정말 실력이 없지 않나
이런 고민을
가지는 것도 나쁘진 않아요. 그 뒤에
정신 차리고 돌아올 수만 있다면
근데
그런 고민도 안하고
그 뒤에 돌아올 수 없는 사람이면은
사실은 어느 정도
이상해진 프로그래머가 될 수 없다고 생각해요.
자
그럼 이 얘기를 잠깐 정리할게요.
핵을 만드는 거
버그를 만드는 거 일반적인 일이에요.
그거 전혀 안하고 코딩할 수 있냐?
있겠죠. 남들보다 시간 한
10배 100배 더 들여서. 그런 일은
뭐 특정 분야를 빼고는
일어날 수 없는 일이에요.
프로그래머한테. 그래서 어느 정도
버그와 어느 정도 핵은 감수하고
넘어가는 게 맞아요.
but
그러나
돌이킬 수 없는 핵
돌이킬 수 없는 버그는 만들지 말자.
돌이킬 수 없는 핵은
다시 그니까 뒤집을 수 없는 핵이죠.
원래대로 빼버릴 수 없는 핵
그 핵은 그나마 판단하기 쉬워요.
그런 핵을 만들었다면
본인이 알면서도
만들었다면 그거는 그냥
별로 신경 안 쓰는 거예요.
내가 만드는 코드에. 아 뭐 위에서 이렇게 하라고 했으니까
일단 만들고 뭐 문제 생기면
위 탓이지 뭐 내 탓이야. 뭐 나중에 이거
복잡해지면 회사 떠나고 말지. 이 마음가짐인 거고
요거는 어찌보면 조금 더
그냥 자세적인
문제가 있는 거고
버그
같은 경우. 그죠? 버그 같은 경우
돌이킬 수 없는 버그를 만드는 거는
자세적인 문제도 어느 정도 있지만
그 외에
이제
자기 자신에 대한 판단을
못하고 있는 것도 있고
내가 어디에서 어떤 버그를
만들 수 있는지 내가 작성하는
모든 코드가 사실 버그가 발생할 수 있으니까
어떤 때 좀 더
중심을 둬서
뭐 테스트를 더 해야 되는지
이런 판단을 아예 못하고 있다는 거예요.
즉 내 머릿속에서
나는 버그를 만들지 않는
슈퍼머신인 거야. 그러나
실제 남들이 내 버그를 딴 사람보다
10배, 20배 찾아와. 그래도 나는
나는 괜찮은 프로그래머야
라고 믿을 수도 있다는 거예요.
사람마다 이유는 다르겠지만
어쨌든
되돌이킬 수 없는
핵, 되돌이킬 수 없는 버그
만드는 거 둘 다 문제는 있어요.
근데
되돌이킬 수 없는 버그를
만드는 사람들은 그리고
그거를 당연하게 여기는 사람들은
이제
단순하게
그냥 뭐
알고 하는 게 아니라 모르고
아니면 자기 뭐 암시에 걸려서
자기 최면에 걸어서 자기 무슨 뭐 이유 때문에
자기 자신에 대한 판단을
잘못하고 있을 가능성도 굉장히
높다라는 말을 좀 하고 싶었어요.
어쨌든 간에 뭐
이 포프TV 보시는 분들은
내가
정말 엄청나게
큰 버그 만들어서
누군가한테 혼난 게요
그거 되돌리킬 수 없어 정말
엔지니어링 쪽이 아니라
뭐 비즈니스 쪽에서 사업 쪽에서
아니면 회사 오너가
어떻게 처리해야 됐던 경우가 없는지
생각을 해봐요. 그런
경우가 있다면
그거는
본인 스스로 본인 평가를 되게
못하고 있는 걸 수도 있어요.
그래서 그런 얘기를 좀 해드리고 싶었어요.
어쨌든
되돌이킬 수 없는 핵, 되돌이킬 수 없는
버그는 최대한
만들지 말자.
설사 만들었더라도 만들 수 있죠.
정말 쪽팔린 거 알고
그 쪽팔림을 이제
기본 삼아
아 다시는 이런 거 만들지 말아야지 정말 내가
내 직업인데 내가 이렇게 쪽팔린
짓을 했다니 그런 느낌을 가지마.
그래서
그냥
그냥
그냥
코드 몬키처럼
적당히 돈 받고 일하는 데서
만족을 찾고 그냥 그런 회사
다니는 게 더 좋을 거예요.
그럼 된 거 같죠?
포프였습니다.
