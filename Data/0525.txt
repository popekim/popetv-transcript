안녕하세요 포프입니다
최근에 저한테 그런 댓글을 달아주신 분이 있어요
제가 자꾸만 버그를 만드는데요
어떻게 하면 버그를 줄일 수 있을까요? 이런 얘기들
그래서 그 얘기를 좀 해드리려고 하는데
이거에 대한 답은 사실은 명백한 거는 없어요
굉장히 경험이 중요한 건데 왜 그런지를 설명을 드릴게요
근데 뭐 그거를 떠나서 제일 마지막쯤에
비디오 제일 마지막쯤에 그래도 한 이 세 가지 정도는
언제나 확인하는 습관은 드리는 게 좋다라는 얘기도 드릴 테니까
앞부분에 각설 싫으신 분들은 뒤로 적당히 돌려서 보시면 될 것 같아요
첫째 그럼 왜 사람은 개발자는 버그를 만드는가
이거는 똑같은 얘기예요
왜 사람은 실수를 하는 거랑 똑같은 얘기예요
일단 개발자에 한해서만 말씀을 드릴게요
뭐 우린 사람이니까
개발자가 기본적으로 무언가를 만들 때는
어떤 동작을 하는 프로그램을 만드는 과정이잖아요
그러면 그 동작을 하게 만드는 거는 잘 생각을 해보시면요
결과적으로는 알고리즘을 만드는 건데
알고리즘을 만드는 것 자체가 우리 라면 끓일 때 라면 뒤에 라면 끓이는 법 있죠
물 몇 고람 넣고 뭐 넣고 뭐 넣고 뭐 넣고 뭐 넣는다
이거 제대로 써 있는 거예요 솔직히 누구나 따라할 수 있어요
근데 그 명령이 뭐냐 하면은
그 명령어를 라면 끓이는 법 가이드를 많은 사람들한테 줘보세요
그 사람들이 그거를 제대로 따라 하는지
생각보다 따라 하지 않고 이상한 일 하는 사람도 있을 거예요
그럼 아 그거에 대비되어 있는 가이드가 없구나라는 걸 깨달으실 거예요
그게 궁금하시면 최근에 뭐 백종원 그 유명하신 분이 하시는 뭐 백파던가
그런 프로 있어요 그 프로 보시면은 정말 라면도 못 끓이시는 분들이 있거든
그런 얘기예요
자 개발자로 돌아올게요
개발자가 하는 거는 그런 라면 끓이는 법 같은 거를 코드로 만드는 거죠
내가 설계하고 내가 만드는 거예요
그럼 내 코드는 그 라면 끓이는 법 같은 정형화된 가이드에 따라서 돌게 되어 있어요
내 프로그램을 다른 사람한테 줘요
그 사람이 그 가이드 따라 그대로 해요
아니 우리는 가이드를 적어주진 않잖아
상식적으로 프로그램은 이렇게 동작하는 가이드로 잡혀 있으니까
그거를 따라 하기만 하면은 아무 문제가 없어요
그러나 프로그램에 버그가 생긴다는 건 뭐냐
내가 아닌 다른 사람의 입장에서 이 프로그램을 어떻게 사용할지 생각을 못하는 거예요
어느 순간 무슨 숫자를 입력하라고 했어요 프로그램에서
나는 양수를 의미한 거야 자연수
근데 그 사람은 0을 넣거나 아니면은 음수를 넣어버리는 거예요
그럼 그 순간에 프로그램은 고장날 수가 있죠
그럼 질문하는 게 이거예요 너는 왜 굳이 음수를 넣냐
그 사람은 난 몰랐지 아니면?
그냥 제대로 작동하나 보고 싶었어 이럴 수도 있는 거야
즉 이게 어떤 거냐면 저는 프로그램으로서 제대로 동작하는 상황
그거를 해피 패스라고 해요
행복한 길이죠 행복한 과정
실제 CS 하시거나 고객 상담 다른 거 하시는 분들은 이 해피 패스라는 개념 잘 아세요
아무 문제 없이 시키는 대로만 따라 하면은 되는 것
그러나 고객이 뭔가 하나를 이상한 일을 하는 거야
전원을 110V에 꼽아야 되는데 220V에 꼽는다던가
전원을 자르면 안 되는데 자른다거나
이런 일이 있을 때는 어떻게 상담을 할 거냐까지도
잡혀 있어야지 예외 상황들을 처리할 수 있는 거죠
프로그램도 똑같다는 거예요
내가 정말 해피 패스를 조차 못 만드는 개발자라면은
아직 개발자로서 취직할 준비조차도 좀 안 돼 있는 사람이긴 해요
그걸 일단 잡고 내가 기본적인 기능은 구현할 수 있다
그러면은 그때부터는 이상한 버거들이 나오는데
왜 내가 그걸 못 잡았을까 고민할 수밖에 없는 거죠
간단하게 요약하면은 내가 내 기준에서 행복한 생각만 하면서
행복하게 코딩을 짰기 때문에 그래요 행복하게
그럼 나 외의 것에 안 행복한 게 뭐가 있냐
다른 사람이 프로그램 사용하는데
그 사람이 나보다 이 분야를 잘 몰라
뭐 그냥 편하게 말하려고 저보다 멍청해라고 얘기할게요
진짜 그분이 뭐 지능이 낫다 이런 게 아니라
나보다 그냥 이 분야에서 멍청해
그러면 나는 안 할 짓들을 이분은 하시는 거죠
그러면 그거를 했을 때 프로그램이 여전히 제대로 동작해야 되냐
아니면 뽀개져야 하냐 크래쉬가 나야 되냐
이건 개인의 선택이지만 버그를 고민하고 있다는 거는
고쳐야 할 걸 안 고쳤다는 얘기죠
첫 번째 두 번째는 이 사용자가 저보다 똑똑하신 분이야
나는 전혀 생각도 못 했던 사용법인데 근데 올바른 사용법
그분을 생각해서 사용하시려고 했는데 버그가 나는 거야
그러면 내가 그 사람보다 똑똑하지 못했기 때문에 나오는 버그가 있는 거예요
나보다 멍청한 사람을 생각하는 거는 쉬워요
그냥 열심히 하면 돼요
왜냐면은 나도 멍청했었거든
나도 그런 실수를 했었거든
그 옛날에 내가 얼마나 멍청했는지를 생각해 보면서
아 나는 이렇게 멍청했으니까 그런 사람들을 위해 이런 거를 하자라고 했으면
그만큼 되는 거예요
나보다 똑똑한 사람 거는 제가 하기가 어렵죠
왜냐면 내가 모르는데 뭘 어떻게 해
과거를 돌아보면 뭐 타산지석이거든
그래서 그런 경우에는 경험이 늘어야지만 도움이 된다는 부분이 그런 부분이에요
그래서 뭐 프로그래밍 초짜 학교가 졸업하고 기능 구현 겨우 하는데
내가 버그를 하나도 안 만든다 생각하시는 분들은 그냥 약간
현실 왜곡하시는 분이에요
오히려 내가 버그를 많이 만들 수 있구나
그럼 만들었을 때 빨리 고쳐야지 그걸 이해해야지
이런 자세를 가지는 게 중요하죠
그게 두 가지
사람에 대한 이해
내가 옛날에 못했던 나를 고쳐야지
나보다 잘하는 사람이 이런 거 찾으면 배우고 이건 좋아요
세 번째
요거는 솔직히 누구나 했어야 하는 건데
지금 컴공 교육이 많이 망가져서 못하는 거 같아요
참고로 좋은 컴공 교육 받으시려면
POCU 아카데미 오시면 됩니다
자 광고 했고
제가 작성하는 프로그램은요
사람도 있지만 실제 이 프로그램을 돌리는 컴퓨터를 알아야 돼요
내가 사용하고 있는 언어
그 언어가 컴퓨터에서 말하는 거예요
그래서 어떻게 도는지
특히 내가 사용하고 있는 데이터
이 데이터가 컴퓨터에서 어떻게 표현이 되는지를 알아야지만
나중에 누군가 이상한 일을 해도 그 문제가 안 생기겠다는 걸 알죠
즉 제일 중요한 거는 또 우리가 이제 공부하는 사람으로서
학교를 졸업하고 컴퓨터 프로그램을 공부를 했다면은
알아야 할 것들이죠
컴퓨터 구조 컴퓨터의 데이터 표현법
이거를 알면은 최소한 학생 수준에서는 할 수 있는 게
데이터 표현법 잘 알아갖고
이 데이터가 이렇게 표현되는데
내가 프로그래밍 하면서 그 생각을 못하고 작성을 한 거야
그러면은
아는 사람이나 아니면 그냥 일반 사용자들이 사용할 때 망가질 수 있겠죠
그거 그리고 아까 말했던 나보다 똑똑한 사람들
나보다 멍청한 사람들이 이해하는 거
그 세 가지예요
근데 셋 중에 가능한 두 개는 컴퓨터 이해하는 거
당연히 컴공 공부하는 도중에 해야죠
내가 옛날에 멍청했을 때 생각하면서 하는 거
그것도 당연히 할 수 있어야죠
그걸 못 하면은 그냥
나쁜 사람이지
소식적 생각 못하고 나보다 잘난 척하는 사람이죠 어떻게 보면
그래서 그렇게 하면은 그건 정리가 돼요
자 이거는 굉장히 중간적인 굉장히 뭐 구름 뜬 느낌 그런 느낌이죠
자세를 일단 말씀드렸어요
그리고 이 자세라는 거는
결과적으로 내가 과거에 했어야 하는 것들
컴공 했으면은 컴구조 잘하고
내가 옛날에 모르던 사람이었을 때 그거
그리고 배우는 자세
그리고 내 코드는 내가 모르는 것들이 이만큼 있기 때문에
언제든 버그가 나올 수 있고
버그가 나오면 고칠 수 있는 자세
그 자세는 잡아야 돼요
참고로 말씀드리면 개발에서
뭐 시니어가도 마찬가지고
주니어서도 마찬가지고
버그 고치는 시간이 기능 만드는 시간에
거의 비슷하거나 그 이상이 들어갈 수밖에 없어요
그게 아니고 나는 기능 작성에 99%의 시간을 쏟아붓고 있다
그럼 너는 버그를 엄청 만들고 있는 사람이고
네 버그를 누군가가 고쳐주고 있는 거예요
다른 사람들한테 고마워하면서 살아야 돼요
자 자세는 여기까지 됐어요
포프TV는 주로 자세만 얘기하죠
그러나 제가 뭐 교육도 많이 했고
제가 실무에서도 많이 하면서
사람들이 굉장히 많이 만드는 버그
그 이후 한 세 가지 정도 객관적으로 들어드릴 수 있는 거
그거를 말씀을 드릴게요
요 세 가지 정도 아시면은 그래도 최소한의
확인은 하고 넘어갈 수 있고 버그가 있는지 없는지
요게 되면은 욕을 덜 먹어요
이거조차 안 하면은 아직 주니어도 안 되는 사람이야 사실은
주니어 프로그래머도
뭐냐 첫 번째 바운더리 케이스
경계 케이스를 반드시 확인한다
어떤 얘기냐면요 예를 들어 4문을 돌려요
0부터 뭐 10보다 작을 때까지
그러면 언제나 테스트해야 되는 거
0에 있는 데이터가 제대로 작동을 하냐
마이너스로 있는 게 작동을 하냐 1에 있는 게 작동을 하냐
아까 10까지라 그랬죠 10보다 작을 수도 있고
아니면 10보다 이하인 경우를 테스트할 때도 있고
그래서 10을 테스트해야 돼요 10을
10 테스트하고 9 테스트하고 11까지도 테스트하는 게 좋아요
그래서 언제나 어떤 범위의 데이터가 있으면
그 범위 경계 거기서 사람들이 실수를 진짜 많이 저질러요
특히 초보자들은 왜냐하면은 4문 같은 거 작성할 때
뭐뭐 다 작거나 아니면 작거나 같을 때까지
이런 식으로 작성을 하는데 그 생각을 잘 못하는 거예요
아니면은 배열 같은 걸 뭐 10개로 잡았는데
실제는 배열 인덱스가 9잖아 마지막 개
특히 웬만한 언어에서는
그런 경우에 그걸 못 잡는 거예요
그것뿐만이 아니라 이거는 약간 데이터 형을 알아야 되는 것도 있는데
unsigned int 같은 거 작성할 때 4문을 10부터 0까지 돌렸는데
-1 되면 멈출 줄 알았거든 데이터 표현상 -1이 안 돼요
그래서 무한 루프에 빠지는 경우가 있어요
그런 경우들 이거는 전부 다 경계 체크만 잘하면 해결할 수 있어요
이 경계 체크로 나오는 문제 정말 많이 봐요
두 번째 이거는 데이터예요
데이터에 관한 거예요
내가 사용하고 있는 데이터가 있잖아요
integer든 unsigned int든 string이든
이런 데이터가 표현할 수 있는 다른 값들을 넣어봐야 돼요
예를 들어서 제가 열거형 대신에 옛날에 이런 비디오 만든 적 있어요
열거형 대신에 문자열을 사용을 해서 사용자 입력을 받아요
그럼 나는 사용자가 그냥 abcd 중에 하나를 넣어줄 거라고 생각을 하고 작성을 한 코드야
나는 코드를 그렇게 작성을 했고
나중에 누군가 그 코드를 변경할 수도 있고 호출하는 코드를 사용자가 잘못된 입력을 넣을 수도 있죠
그래서 f라는 게 들어왔어요
그럼 f가 들어온 순간 코드가 이상하게 작동하는 거야
d처럼 작동한다거나 abcd에 d 그럼 문제가 생기는 거예요
그렇기 때문에 내가 사용하는 데이터 타입 이 타입이 표현할 수 있는 값이 뭔지를 고민을 하고
내가 생각하는 해피패스가 아닌 값들을 넣어보면서 테스트를 해보시는 게 좋아요
그래서 그게 깨지는 경우가 있어요
그러면 그 순간에 그거에 대한 방지책을 만들거나 아니면 프로그램 종료시키거나 그것도 방지책 중에 하나죠
그런 식으로 갈 수밖에 없어요
정수에서도 마찬가지예요 unsigned int 범위가 달라요
그리고 마이너스 표현이냐 플러스 표현이냐도 달라요
차 타입 이거 캐릭터라고 생각하면 사실은 정수형이에요
이것도 모르시는 분도 있죠 제대로 공부 안 한 거예요
그것도 unsigned냐 signed냐에 따라 달라지고 범위가 뭐냐
내가 사용하는 값
이 함수에서 기대하는 값의 범위가 0부터 500까지다
그럼 굳이 unsigned int를 사용을 해서 그걸 망가트릴 이유는 없는 거거든요
다른 이상한 값이 들어오게
그래서 최대한 내가 필요한 값에 가까운 자료용의 범위를 정해두고 그걸 넘어갈 때 어떻게 할지 그 고민도 해야 되는 거예요
그래서 그런 값이 외부에서 들어올 수 있다면 테스트해보는 게 좋아요
경계 케이스랑 느낌은 비슷하죠
근데 이거는 경계보다는 어떤 데이터가 표현할 수 있는 범위 값의 종류 그리고 값의 범위를 정해서
그렇게 생각하시면 좋을 것 같아요
자 그건 됐고
뭐 참고로 말씀드리면 좀 전 거에 대해서 그 플롯이나 더블 같은 거 있잖아요
그것도 표현할 수 있는 범위가 다르고 유효 숫자 이게 달라요
그거 POCU 아카데미에 수학 과목 들으셨으면 100% 아시죠
그거 안 하신 분들은 잘못되게 써갖고 잘못된 오류 만드는 경우도 있어요
어쨌든 그게 두 번째
세 번째
이거 옛날에 비디오 만들었어요
null 체크에 관해서 null 가능한 데이터형
어떤 거에서 null이 들어올 수 있냐 없냐에 대한 판단이 있어야 돼요
만약에 어떤 자료형이 들어왔어요
이 자료형은 당연히 참조형이기 때문에 null이 가능해요
근데 내 함수에 들어오는 순간 얘가 null이 될 수 있냐 아니냐라는 결정을 함수마다 내려줄 수밖에 없거든요
근데 그게 아니라 모든 함수에서 null이 들어올 수 있다
null이 들어오면 함수가 작동을 안 해
이거 뭐 어떻게 해야 될 수가 없는 거야
그러면 null 체크를 안 해서 예외를 던지나
아니면 null 체크에서 리턴을 하나
아니면 null 체크 아무것도 안 하고
null을 catch해서 exception 던지지도 않고
리턴하지도 않고 예외 던지고 이런 여러 가지가 있는데
그런 거는 어쩔 수 없이 프로그래머들끼리의 규약을 정할 수밖에 없어요
예외 처리하는 거 이런 두 시스템의 경계가 바뀔 때 해라라는 말을 제가 강의 중에도 많이 하거든요
그래서 null 같은 게 들어올 때 얘가 null이 가능한지 아닌지 그 판단이 100% 되기는 돼야 돼요
근데 중요한 점은
그 함수를 호출하고 그 함수에서 예외도 던지지 않고 자동으로 crash
exception 예외죠 보통은
그거를 나지 않고 그냥 문제를 꿀꺽 삼키고 그냥 계속 진행을 되게 했다
그럼 진행이 된 순간에도 원래 함수를 호출한 사람의 의도와 동일하게 함수가 작동을 해야 되거든요
그러긴 진짜 어렵거든요
그런 상황까지 생각을 한다면
내가 null 체크 제대로 안 하고 null에 대한 결정 제대로 안 내려놨을 때 나오는 버그도 어마무지해요
그래서 이런 null 같은 거 자체가 아예 허용이 안 되게 하려고 아니면 이런 거 실수를 막으려고 C#8인가 부터는 nullable reference type인가 그런 게 들어왔죠
그래서 그런 것도 이제 업계가 나가는 방향이에요 null 안 되게 데이터형 구조 잡는 것들 null 되는 거 따로 만드는 것들 이런 것들이 워낙 우리가 말하는 실수를 받기 때문에 그쪽으로 가고 있는 거예요
툭하면 null 포인트 에러나시는 분들 이런 분들은 null을 어떻게 처리해야 되는지 그걸 좀 잘 공부해야 되는 거죠


공부하시는 게 좋아요
어디서 공부할지 모르시면은 POCO 아카데미의 개체지향 프로그래밍 과목이 있거든요
거기서 제대로 확실히 정리를 해드렸어요
물론 다른 과목들 인문 과목이라든가 뭐 C++ 과목에서도 설명들은 다 했어요 올바른 예외 처리 방식 이런 거
그러나 결과도 예외가 무엇이고 예외가 정확히 어떻게 분류가 되고 이런 예외 처리를 올바르게 하는 법
업계에서 한 90%는 말도 안 되는 얘기에요
그 업계가 아니라 업계 학교 합쳐서
그거를 통해서 공부하시는 게 좋아요
그걸 좀 제대로 정리해 놓은 과목이 거기긴 해요
그래서 그것도 광고로 좀 빠지는데
어쨌든 요약을 할게요 요약을
아 힘들겠다 요약 어떻게 하지
자 처음에 내가 버그를 만드는 이유 그거는 나는 해피 패스만 생각하기 때문이다
내가 어떤 기능을 만들고 난 다음에는 딱 모드를 스위치해서
아 이제 뭐를 뽀개일 수 있는지 고민해야 된다라는 마음가짐으로 바뀌어야 되는데
그게 자세적으로 보면은 할 수 있으려면은
내가 컴퓨터에 대해서 잘 알아야 되고 데이터가 어떻게 표현되는지
내가 소싯적에 무엇을 몰랐는지 잘 기억해서 그런 사람들을 위해 대책을 세워야 되고
나보다 뛰어난 사람들 나는 아직 모르는 거 그거 알고 있는 사람들
그 사람들은 뭔가 버그를 찾을 거에요
제 버그를 그럼 그때 그 버그를 빠르게 고치고 그 사람들이 알려주는 내용이 뭔지 이해할 수 있는 그런 것들
그런 자세가 세 가지가 필요하고
그 자세는 경험 따라 특히 마지막 거는 경험 따라 쌓이는 거에요
쌓이는 거기 때문에 시간이 필요할 거에요
처음 두 개는 신경 쓰면 되시는 거고
하지만 그 거기 가지 가기까지도 우리가 쉽게 볼 수 있는 세 가지 것들이 있다
세 가지 고칠 수 있는 거 하나가 언제나 경계 케이스 테스트하는 거
두 번째가 내가 원래 의도했던 값을 넘어서지만 데이터가 표현할 수 있는 값들
그런 거 갖고 테스트해보는 거
그리고 세 번째가 null 포인터 같은 거
이거는 비디오 하나에서 어떻게 설명을 요약해서 하긴 어려워요
그래서 제 비디오 중에서 null 체크 관련한 거에 대해서는
비디오들 그런 것 좀 보시거나 아니면 제대로 배우시려면
POCU 아카데미의 개체장 프로그래밍 과목을 들으시면 됩니다
라는 말로 오늘 길고 길었고 말도 빨랐던 비디오를 마치겠습니다
포프였습니다
