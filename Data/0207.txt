안녕하세요 포프입니다. 제가 예전에 뭐지 그 코딩 스타일에 대해서 몇
번 얘기한 적이 있어요. 제 블로그 에서 주로 얘기했던 것 같은데 코딩
스타일이 이렇게 빡셀 필요가 있냐 그리고 어떤 아키텍트 클래스를
갔다 오고 나서 그 사람이 말하기를 코딩 스탠다드는 뭘 해야 되고
뭘 해야 되지 말지만 쓰고 이유는 쓰지 않아도 된다. 왜 그렇게 따라
가야 되는지 이런 얘기를 했는데 저는 개인적으로 코딩 스탠다드
가 되게 간단하게 원하는 사람 중에 하나예요. 그러니까 실수를 크게
만들지 않을 만한 그런 코딩 스탠다드 라면은 아니 어떻게도 실수를 만들지
않는 경우라면은 그리고 가독성을 해치지 않는 경우라면은 굳이 두
사람의 코딩 스타일이 완벽하게 맞지는 않아도 된다고 생각을 하거든요
. 물론 이제 사람마다 굉장히 코딩
스타일에 적응을 잘하는 사람도 있어요.
그리고 자기만의 그 세상에 빠져 왔고 코딩 스타일 회사에서 원하는
걸 적응을 못하는 사람도 있어요. 근데 그 쓸데없는 시간을 그런
트롤들한테 뭐 이거 고치려고 쓰는 것보다는 차라리 어느 정도 유연
하게 가고 정말 문제가 되는 것만 잡자는 게 제 주의거든요. 그래서
이제 최근에 이제 포프tv 채팅방에서 누가 그런 걸 물어봤어요. 이 if else
스무 쓸 때 보통 언어들에서 이제 중괄호를 많이 쓰잖아요. 이렇게
컬리 브레이킷이라고 하는 거나 컬리 브레이슬렛인가 그걸 많이 쓰
는데 이제 한 두 가지 방법이 있죠 . 가장 큰 거로는 이제 if가 있고
if 바로 옆에서 괄호를 연 다음에 그러니까 if 바로 오른쪽에다 괄호
를 열고 실제 괄호를 닫을 때는 i 하고 맞춰 갖고 닫는 방법. 주로
이제 자바 진영에서 많이 쓰는 방법 이고 자바 id에서 주로 많이 썼
고.
c 옛날 코드에서도 많이 이랬었 긴 했어요. c++도 그러고. 최근에
하는 언어들은 보통 if를 쓰고 세 줄을 만든 다음에 i에 맞춰서 브레이킷
열고 그리고 i에 맞춰서 마지막에 브레이킷을 닫거든요. 이 둘 중에
뭐가 더 편하냐 뭐 이런 얘기가 나왔는데 사실 이 부분에 있어서는
제 생각은 그래요. 이게 나한테 편한 건 언제나 제가 익숙한 게 편해요
. 누구나 그래요.
저도 이제 시작을 당연히 꽤 오래 전에 코딩을 했으니까 if 옆에 브레이크
열고 이렇게 if 밑에다 괄호 닫는 걸로 했는데 저는 현재로는 if 아래
다가 열어요. 그 이유가 뭐냐면 일단 옛날에 이 if 옆에서 열기 시작한
이유가 뭐냐면 둘 다 아래 열든 오른쪽에 열든 똑같은 거거든요
사실은. 신텍스 정으로는 아무 문제가 없고 둘 다 컴파일 다 돼요. 웬만한
언어에서. 정말 이상하고 괴기한 언어가 아닌 이상은 제가 이렇게
말하면 어떤 언어인지는 모르겠어요 .
제가 별로 안 좋아하는 언어가 하나 있어요. 최신 언어 중에. 그런 언어가
아닌 이상은 돼요. 근데 예전에는 왜 굳이 옆에다 붙였냐 예전에는
화면에서 볼 수 있는 코딩 라인 수가 적었어요. 옛날에 처음 제가 코딩
시작할 때 막 도스 창으로 해갖고 이렇게 열면은 제가 정확히 기억은
안 나는데 최대 볼 수 있는 줄서가 40줄인가 24줄인가 밖에 안 됐거든
요. 해상도가 649x480이라고 보면은 .
아.

폰트 하나당 뭐 한 24픽셀은 먹어줘 야 되니까 그럼 20줄일 거고 329x200
썼잖아요. 그러면 말 그대로 10줄 나오는 거예요. 10줄. 그래서 뭐
제가 볼 때는 제 기억엔 24줄인데 제가 기억이 틀릴 수도 있어요. 40줄
일 수도 있어요. 그래서 코드를 보다 보면은 한눈에 안 들어오잖아요
. 그러니까 한눈에 쫙 봐야 보이는데 그러면 스크롤 올리고 내리고 올리고
내리고 이게 갑갑해서 가능하면 한 페이지 정도 코드를 많이 넣는
게 코드를 읽을 때 편하다라고 해서 주로 많이 썼던 게 옆에 붙여서
붙이는 거였어요. 그 좀 이따 다른 얘기도 그거랑 비슷하게 해 드릴
게요. 근데 요즘은 화면이 보통 1080p는 쓰고 뭐 안 돼도 720p는 쓰
잖아요. 그럼 거기서 나올 수 있는 이미 라인 수가 충분하거든요. 이걸
브래킷을 아래에 붙여도 충분히 볼 수가 있어요. 굳이 얘를 뭐 이렇게
줄이면서까지 그럴 필요 없는데 그러면 왜 이 밑에다 넣는 방식이
낫냐. 제가 왜 그렇게 느끼냐라고 보면은
일단은 사람 눈은 언제나 패턴을 찾는 걸 되게 잘해요. 그니까 대칭
되는 거 있잖아요. 이렇게 여는 모양이 있으면 이렇게 닿는 모양이 있다
거나 뭐 위를 화살표도 위 아래 좌우 가 반대층이라고 하나 뭐 대칭
이잖아요. 어쨌든 간에. 그러는 이유가 사람이 그 패턴을 잘 보는
거예요. 그래서 실제 만약에 제가 여기 코드 닿는 곳이 있어요. 그러면
이 코드를 어디에 여는 거냐. 이 브래킷을. 그럼 쭉 갔을 때 위에
브래킷이 있으면 훨씬 사람 눈이 빨리 캐치를 한다고요. 그래서 저는
저는 본인이 어떤 걸 익숙해졌는지 모르겠지만. 앞으로는 모든 언어
가 다 이렇게 대칭형으로 갈 거라고 봐요. 가만 갈수록 그 이유가 당연하게
새로운 프로그램에 하는 사람이 있으면 굳이 쓸데없는 거에 시간
낭비하면서 이런 걸 익숙해질 필요가 없잖아요. 사실 그냥 밑에서 쭉 보고
아 여기 있으면 끝 이러고 넘어가면 되는 거니까. 그래서 저는 그렇게
할 거라고 보고 그리고 어찌 보면은 그게 올바른 코딩 스탠다드라고
저는 봐요. 그냥 나한테 익숙한 게 아니라. 이렇게 아예 그냥 본인이
사람들이 전반적으로 1분이라도 아낄 수 있는 거
어느 쪽으로도 상관없는 거면 그래도 그나마 난 거
그리고 굳이 예전에서 그렇게 줄여야 했던 이유도 없으니까
한 줄 이렇게 올려갖고 저는 그렇게 보고
물론 이게 굉장히 종교적인 논란으로 가요 사실은
나는 이게 좋다 저게 좋다 이게 맞다
근데 제가 여태까지 오른쪽이 오는 게 맞다라고 하는 사람의 얘기를 듣는 건
딱 두 가지예요 여태까지
나한테 익숙하다
그리고 또 하나가 아 이게 한 페이지에 코드가 많이 나와서 좋다
근데 이제 제가 말씀드렸지 한 페이지에 코드가 많이 나와서 좋다 얘기는
굉장히 많이 사라진 얘기고요
왜냐하면 지금 현재 아이디 지금 현재 화면 해상도에서 보면은
이미 충분히 많은 줄이 나오고 더 많이 나와봐야 오히려
눈이 올라갔다 내려갔다 하면서 이게 로직에 사람이 따를 수 있는 한계 정도가 있는 거 같아요
코딩이 사실은 그 줄수를 이제 거의 넘어간다고 봐요
그리고 만약에 제가 안 그렇더라도
내가 코드가 천 줄이 한 페이지에 나와도 난 이해할 수 있어
이 정도의 사람일지라도
어차피 협업을 하다 보면은
그 수준은 하향 평준화시키는 게 맞거든요 어느 정도까지
그럼 결과적으로는 제가 볼 때 사람들이 평균적으로 읽을 수 있는 코드 수만큼
이미 이 브래킷을 밑으로 내려 가서 써도 보이기 때문에 굳이 브래킷을 줄일 필요는 없고
그래서 그거고 이제 아까 첫 번째 말씀드린 사람들이 하는 얘기 나한테 익숙하니까
이거는 저는 보통 굉장히 무시하는 것 중에 하나예요
그냥 나한테 단순히 익숙해서 이게 낫다라고 우기는 거는
그냥 여태까지 해온 게 내가 바꾸기 싫고 내가 불편하니까
그냥 이대로 밀고 갈 거다 니네가 바꿔라
이게 내 방법이 굳이 의미는 없지만 내가 편하니까 바꿔라는 거고
굉장히 이기적인 거고 그리고 그런 얘기 있죠 이제
뭐 한국에서 예전에 많이 하는 얘긴데 이제
아름다운 전통은 유지하고 잘못된 관습은 고쳐야 된다
이런 얘기 있잖아요 제가 볼 때 이게 잘못된 관습적인 거 같아요
가면 갈수록 오히려 그래서 그거는 그게 맞는 거 같고
물론 이제 콘솔에서 코딩하시는 분들 있죠 아직도
이렇게 막 콘솔장 띄워놓고 터미널에서 하시는 분들
그런 분들에게는 여전히 한 줄이 맞을 수도 있어요 이렇게 줄여 하는 게
저는 일단은 기본적으로 사람들이 뭐
굉장히 모던한 오퍼레이팅 시스템을
훌륭한 툴을 쓴다고 가정을 하고 얘기하는 거기 때문에 그렇게 얘기하고요
그리고 이거랑 아까 비슷한 얘기 그 있죠 이제 if문 밑에 코드가 한 줄 있을 때
괄호를 열어야 되냐 말아야 되냐 if 코드 한 줄 else에도 상관없어요
if 한 줄 하고 끝나면 되거든요 인정되는 문법이거든요
근데 저는 언제나 괄호 누라고 보통 얘기해요
물론 두 줄 다 먹죠 밑에 이렇게 괄호 붙이면
이유가 뭐냐면 예전에 그
이거는 그냥 뭐 반드시 이 문제가 그것 때문에 생긴 건 아니지만
하트블리드라는 얼마 전에 오픈 ssh죠
그러니까 http secure 그런 연결하는 그런
아니지 secure shell이니까
그런 거를 이제 secure connection을 연결하는 그런 프로토콜에 주로 쓰는 오픈소스가 있는데
거기서 한번 엄청난 시큐리티 홀이 나왔어요
그 이유가 사실은 뭐였냐면은 이것 때문이었어요
그니까 제가 정확히 끝까지는 안 읽어봤는데
분명히 코드가 이렇게 돼 있었을 거라는 생각을 해요
if문이 있었고 여기 if문에 하면은 뭔가 이걸 해라
근데 이게 이제 무슨 로그인을 해야지 면 되는 거나
secure 채널이 만들어지면 되는 거 겠죠
그렇게 코드가 있었고 잘 작동을 했어요
언젠가 어느 순간 누군가가 와서 아 이 if문 로직에 한 줄을 더 코드
해야겠다
추가해야겠다 라고 했고
실제 if문 밑에다 코드를 추가했어요 전에 있던 코드 밑에
근데 indentation 다 맞췄는데 깜빡 잊고 브래킷을 치나서
그런 걸 까먹은 거예요
그게 문제였던 거예요
그러면은 이 첫 번째 줄은 if문에서 작동이 되는데
indentation 아무 상관이 없으니까 어차피 c 같은 언어에서는
그 if문에 걸리지 않아도 두 번째 줄은 실행이 됐던 거예요
근데 그게 문제가 되는 거거든요
그래서 이거는 말 그대로
이거를 제가 언제나 브래킷을 치라고 하는 이유는
그런 실수를 막기 위해서라고 생각하면 좋겠어요
그니까 저는 코드를 잘 짤 수도 있는데
제가 나중에 와서
제가 안 돼서 코드를 치거나 아니면 저보다 조금 못한 사람이 와서
아니면 그냥 조금 이렇게 정신이 없었다거나 그 사람이 바빠서
코드를 짤 때 그런 버그가 생길 수가 있다는 거예요
그냥 단순히 indentation이 돼 있으니까
아 indentation이 돼 있으니까 여기다 넣으면 되겠지 라고 생각할 수가
있어요
id가 그걸 안 잡아주는 id일 수도 있고
그리고 또 파이썬에 익숙해진 사람이라면 그게 당연하다고 생각할
수도 있어요
이제 파이썬을 안 좋아하는 이유 중에 하나도 그거지만
그런 것 때문에 실수를 막기 위해서는 차라리 명시적으로 말하는 게 좋습니다
그래서 공식적으로 범위가 필요한 게 아니라
뭐 어떤 버그라고 그러죠 스코프
그 코드의 범위를 정해주는 게 좋아요
버그를 막을 수 있고 이런
이게 재밌는 게 오픈소스예요
누구나 다 리뷰하는 거고
뭐 컨트리뷰션 했을 때 누가 컨트리뷰션 했는지 모르겠지만
풀 리퀘스트 해서 당연히 리뷰하고 놓을 거예요
눈으로 볼 땐 맞아 보여요
근데 문제는 이 오픈소스 엣지가
전 세계 웹페이지에 뭐 70% 50% 쓰던 거였거든요
그래서 이 문제가 생겼을 때 이미 전 세계 50% 70%는 그 위험에 있었어요
있어요. 모든 패스워드가 도난 당할 위험이었는지 뭐였는지 까먹
었는데 그래서 코드를 안전하게 짠다라는 게 있어요. 실수를 덜
하기 위해. 저는 그런 개념에서 if 밑에 한 줄 코드가 있어도 언제나
브래킷은 여는 걸 추천하고 그리고 아까 말했듯이 if 옆에 여냐 밑에
여냐는 그냥 가독성을 높이게 해서 밑에 누라고 하고 싶어요. 제가
보는 제 코딩 스탠하드고 이거는 어찌 보면 제가 앞으로 어쩌면 그냥
제가 쓰는 코딩 스타일을 좀 더 얘기할지도 모르겠어요. 그런 식으로
반드시 제 방법이 옳은 것도 아니고 제 방법과 다른 방향으로 써야만
되는 것도 있죠. 아까 터미널 같은 경우나. 그래서 좀 의미 있게 왜
코딩 스탠하드 그렇게 써야 되는지 좀 이해하면서 쓰고 싶어요. 그리고
이제 예전에 비해 많은 기계 발전 모니터 발전 툴의 발전도 있었
으니까.
거기에 맞는 거를 좀 생각하고 싶은 것 같아요. 그 정도고 포프였습니다.
