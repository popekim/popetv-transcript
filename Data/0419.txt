예 안녕하세요 포프입니다
오늘은 다시 기술? 기술 얘기인가?
문서화 얘기 좀 얘기할게요
예전에 이제 뭐 API 문서화라던가
그런 비디오에서
문서화를 어디까지
해야 되는지 얘기를 했어요
그때 이제 나왔던 얘기 중에
제가 그런 얘기를 한 게 뭐냐면 다른 것 다 떠나고
그 중 하나의 문서화를 해야 될 게
외부에
라이브러리를 주는 것들
그런 이제 우리가 라이브러리를 외부에 주면은
퍼블릭 함수들이 있잖아요
그 사람들이 호출할 수 있는
그럼 여기에 어떤 매개변수가 들어오고
이 함수는 무슨 일을 하는 거고
어떤 것을 반환하느냐
이런 거를 이제 함수 헤더 같은데 박아주고
그거를 자동으로 문서화 시키는 프로그램을 돌리면 좋다라고
얘기를 했어요
사람마다 다 원하는 거 다르고
사람마다 하는 방법 다 다르지만
저는 그렇게 하고 있다라고
그리고 또 예로 하나 더 들었던 게
요즘은 이제 웹 API가 많잖아요
구글도 이제 뭐 데이터 API 이런 거 있고
맵 API 있고
그래갖고 외부로 가서
레스트풀 API
액션이 있고

HTTP 웹 호출로
데이터 가져오고 뭐 이런 것들 있잖아요
그러면 보통 그런 회사에서도
그런 공개되어 있는 API들에 대해서
이건 이런 거다 라고 문서 작성을 하죠
그래서 저도 얘기했던 게
그 위에 역시 이렇게 코멘트를 달아 놓으면 좋다
라고 얘기를 했어요
그리고 이제 그걸 자동으로 만드는 프로그램이 있다
그때 제가 그 프로그램을 제가 썻
어떤 거를 썼는지 얘기했는지도 모르겠지만
그 얘기를 지금 하려 그래요
어쨌든 간에
당연히 닷넷 쪽으로 일단 얘기를 할 거고
이거는 웹 API
아까 말했던 레스트풀 API에 한정된 얘기예요
그래서 예전에 그냥 ASP 닷넷을 썼을 때는
ASP 닷넷 페이지를 만들면
MBC 애플리케이션을 만들면
거기에 헬프 페이지가 딸려왔어요
그럼 헬프 페이지가 뭐냐
그러면 이미 컨트롤러 있고 다 라우트 있으니까
그리고 주석도 달려 있으니까
그것 따라 지가 알아서
다른 웹 페이지를 만들어주는 거였어요
스태틱 웹 페이지가 아니라
그 주소로 가면은 어떤 API가 있고
이게 매개변수가 어떤 데이터형을 받는다
라고 보여주는 페이지가 있었어요
마이크로소프트만의 스택이었고
기본적인 거는 API 익스플로러를 써가지고 하는 거지만
어쨌든 간에 그게 실시간으로 계속 보여주는 페이지가 있었죠
전에 비디오에서도 말했지만 저는 그거를 안 좋아했어요
왜냐하면은 아니 내 서비스는 서비스를 하는 거고
다큐멘트 페이지는 다큐멘트 페이지지 왜 이거를 한 군데다 넣냐
API, RESTful API는 서버는 따로 분리하고
다큐멘트는 따로 분리하는 게 좋다
그게 첫 번째 이유였고
두 번째는 실제 외부에 다큐멘트를 줄 때
제가 코드에 코멘트를 단 거에 기초해서 나오는 건데
그 코드에 코멘트를 달 때마다
테크니컬 라이터라던가 이런 사람들 리뷰를 안 하잖아요 어차피
그러면 내가 새로운 API 만들고 실수로 잘못해왔고
그냥 프라이빗으로 안 만든 API도
서버가 어느 버전에 가느냐에 따라 잘못된 다큐멘트가 나올 수가 있는 거죠
한마디로 한 번도 눈을 거치는 과정이 없어서
조금 위험할 수도 있다 코드를 위로 당연히 잡을 수도 있지만
사람은 또 실수를 하니까 이런 거를 한 번 더 누군가가 눈을 거쳐서
검수하고 내보내는 과정을 따로 만들면 그게 차라리 훨씬 더 안전하다
이게 스태틱 페이지를 만드는 과정이죠
그래서 스태틱 페이지를 만드는 방법 자체가 없었어요
그 ASP.NET 코어 말고 그 전에
제가 어디서 코드 샘플 보고 어디서 비슷하게 한 거 보고 가져와서
제가 심지어는 고쳐왔고 GitHub에 올려놓은 게 있어요
여기서 스태틱 페이지 만들어내는 그 코드를
그러면 그 스태틱 페이지 뽑아갖고 이제 공유만 하면 되는데
문제는 아까 말했듯이 이거는 마이크로소프트 자체의 기술이었고
흔히 저희가 요즘 보는 그런 API 다큐멘트도 있잖아요
GitHub 가면 이게 GitHub API요 하면서 막
까만 화면에 옆에 샘플 나오고 이런 다큐멘트가 아니라
그냥 자체 걔네 포맷이 나오고 그 포맷이 더 낫다고 생각하기도 좀 어려워요
그래서 좀 혼자 동떨어진 느낌도 있었고 그래서 이제 좀 안 좋아했는데
저희가 이제 .NET 코어로 넘어왔잖아요
.NET 코어에서는 훨씬 나은 방법이 있더라고요
그래서 이제 그거를 설명드리려고 해요
.NET 코어에서는 그렇게 헬프 페이지가 딸려오질 않아요 일단 무겁게 안 오는 거죠
기본적으로 딸려오지 않아요
그러면 이제 어차피 헬프 페이지는 내가 안 쓸 거였으니까 워낙 포맷이 구리니까
보다 보니까 이제 Swashbuckle이라는 그런 누계 패키지가 있어요
그걸 다운받으면 헬프 페이지처럼 그런 약간 API 스펙을 뽑아줘요
뭐 커멘트의 기초에서 무슨 패러미터 기초에서 다 뽑아줘요
리턴 타입은 이거일 거다 이런 것까지
근데 이걸 이제 JSON 파일로 뽑아줘요
그래가지고 그 JSON이 뭐냐면 저희가 요즘 많이 쓰는 거예요
웹 쪽에서 Swagger라는 게 있어요
Swagger가 이제 이런 다큐멘트 같은 거 JSON 스펙을 만들어서
이제 이 스펙대로 이제 다큐멘트를 만들어주면은
나중에 다른 어떤 Swagger UI라던가 이런 뷰를 꼽으면 그거를 볼 수가 있다
그래서 실제 Swashbuckle을 집어넣고 스타트업에서 이거 세팅만 잘해주고
이 API 그룹 버전 1으로 달린 거는 버전 1 URL로 들어가야 되고
그 UI는 여기서 다운받을 수 있게 해줘
JSON은 다른 건 여기서 다운받을 수 있게 해줘 이렇게 잡아주고
심지어는 그 아래에 UI는 이 페이지고 그 UI에 가면은 내가 지금 아까 JSON 파일이 있는 그런 정해준 것들을
드랍다운 박스로 골라가면서 아 이거는 퍼블릭 API 버전 1 퍼블릭 API 버전 2
이렇게 보여주는 UI가 나왔어요
그럼 이거는 말 그대로 저희가 생각하는 Swagger
Swagger 쪽에 있는 똑같은 스펙을 뽑아주기 때문에
뭐 기터밖에 Swagger는 아니지만 굉장히 눈에 익숙한 그런 문서화가 나오고 설명도 꽤 괜찮게 나와요
그리고 닷넷 코어의 장점 중에 하나인 이제 C#의 장점이죠
그 모든 리턴 타입이나 모든 인풋을 스트롱 타입으로 할 수가 있잖아요
강타입화? 강성화?
그니까 이제 뭐 무조건 스트링으로 받는 게 아니라 얘는 DTO는 이런 클래스 오브젝트로 받는다 이런 걸 해줄 수가 있기 때문에
그런 설명이 되게 잘 나오고
그 애트리뷰트 위에 아 이 밸리데이션 할 때 인풋 밸리데이션 할 때
스트링 길이는 뭐 몇부터 몇이고 숫자 범위는 몇부터 몇이고 이런 걸 달아주면은 그것도 다 문서화에 제대로 나와요
그러면 이거를 하는 것만으로 그 헬프 페이지 아까 말했던 것처럼
그냥 라이브 서버에서 그 URL을 가면은 모든 현재 있는 커멘트에 기초한 문서를 볼 수가 있는 거예요
나쁘지 않지만 아까 말했던 한 두 가지의 문제가 여전히 있죠
헬프 페이지에서 내가 싫어했던 문제들 두 가지가 그대로 있어요
단 좋은 점은 아 이거는 다른 거하고 이제 사람들이 많이 웹에서 쓰는 거라고 비슷한 포맷이야
그래서 그게 좀 이질적이지 않아 그런 건 좀 좋은 거죠
그럼 그 다음에 제가 해야 할 일은 뻔했죠
아 여기서 스태틱 문서를 만들자 그래서 그 만드는 법을 찾아 냈어요
어떻게 했냐면 아 잠깐만요 제가 이것도 적어놓은 게 있어요 제가 문서화를 해놓은 게 있기 때문에 잠깐 보면서 얘기하는 게 좋을 것 같아요
일단 아까 말했던 것처럼 그 스태틱 문서를 만들자고 하면은 그 스태틱 문서를 만들자고 하는 거예요

그리고 그 동 showing 요건 이게 surprisingly review 필요하잖아요
한번 보시면 그거 보겠습니다



doesn't show up
not 아이씨
난
하昔
으
이게 아닌데 Br cartoons
완벽히 자동화를 시키면
빌드를 하잖아요
새로운 서버 버전을 빌드를 해요
그러면 이 빌드한 거를 저희 테스트 서버에 올려요
그럼 테스트 서버는 아까 말했듯이
내부 서버니까
JSON 파일을 다운받을 수 있는 URL이 있어요
그러면 빌드 스텝 등의 하나로
그 JSON을 다운받아요
그럼 JSON 파일을 다운받죠
그럼 그 다음에
Node.js에서 쓰는 어떤 패키지를 써서
이 JSON을 HTML로 바꿀 수가 있어요
그리고 그 HTML을
그리고 다른 스타일이 따라 나오죠
이거를 이제 저희 실제
도큐멘트 서버에 업로드하는 것만으로
딱 끝이 나요
그래서 그 과정을 저희가 만들었고
아직 완벽히 자동화 안 됐지만
이제 그 자동화를 조만간 할 거예요
그러면
아 이
스웨거
JSON 파일을 HTML로 바꿀 수 있는
그 Node.js 패키지가 뭐냐
발음이 내가 될까
스펙테클
아 스펙테클
스펙테클 닥스라고 있어요
그러니까 이제 저는 npm에서 다운받는데
뭐 밑에 당연히 링크는 제가 걸던가 할게요
그냥 뭐 npm install하고
이제 스펙테클 닥을 한 다음에
스펙테클 마이너스 닥스예요
그런 다음에 그냥 스펙테클
뭐 어쩌고 JSON 실행하면
곧바로 HTML이 나와요
그리고 그것만으로 이제 아까 말했던
이제 GitHub에서 보는 것 같은
까만 화면에 흰 거 가운데 있고
옆에 샘플 나오는 그 닥이 나와요
그 닥이 나와요
그러면 이제 재밌는 건 뭐냐면
이걸 자동화해서 닥이 나오고
실제 닥 서버까지 올라갈 수가 있다고 얘기했잖아요
그럼 닥 서버에 올라가기 전에 저희는
일단 라이브에 꼽아두고
라이브가 아니라 저희 내부 서버에 이제 꼽아두고
그걸 딱 보여주고
이게 실제 스펙 나갈 거다
그리고 이제 저희는 테크니컬 라이터한테 리뷰를 시키는 거예요
아니면 저희가 검토를 해갖고
아 이거 빠졌다
그럼 추가해서 다시 빌드하고
테크니컬 라이터가 보면서
이제 개발자 영어보다는 테크니컬 라이터 영어가
훨씬 좋을 수밖에 없잖아요
아 이 문장 이렇게 고치자라고
저희한테 첨언을 해주면
저희가 가서 다시 주석에서 바꿔서
빌드하고 나가고
다시 검토받고 최종까지 나가면 되는 거죠
그래서 자동화 플러스 딱 게이트 막는 거
허가 안 나가면 라이브로 안 나가
이거 다 이제 비주얼 스튜디오
온라인에서 빌드하고 디플로 하면
다 설정할 수 있는 기능들 중에 하나거든요
그래서 그거를 저희가 이제 만들었고
저희는 그래서 라이브 닥은
일단 같은 서버에 안 두니까 좋고
스태틱으로 html 나왔으니까
굉장히 캐시 빠르고 빠르고
그래서 아 이게 갈 길이구나
단 중간에 테크니컬 라이터를 꼭 꼽아야 하지만
뭐 거의 어쩔 수 없는 거고
당연히 비즈니스의 일부인 거고
그래서 그렇게 api 닥을 자동화를 하되
스태틱 페이지를 나오게 하고
다이나믹 페이지가 아니라
그리고 남들이 다 기대하는 그 예쁘고
까맣고 하얀 그 api 닥을 만드는 과정을 저희가 찾아냈어요
그래서
닷넷코어 쓰시는 분들 중에
닷넷코어만은 아닐 것 같아요
json 파일만 나올 수 있다면 그죠
어떤 거에도 똑같은 과정이죠
근데 이제 그 스웨거 쪽을 특히 보시는 분들이나
좀 더 포맷을 제대로 손 포맷을 안 하고 좀
코멘트해서 뽑고 싶은 사람들
그런 사람들은 이런 방식으로 하면 될 것 같아요
물론 이제 스웨거 닥은 만드는 문제고
스웨거 닥을 나오게 하는 다른
누계 패키지나 아니면 다른 이제 언어용
다른 프레임워크용 뭐 패키지가 있겠죠
그런 패키지를 잘 쓰는 게 중요한 거겠죠?
그냥 닷넷코어 자체는 이미 예전부터 그런 일을 해오고 있었기 때문에
xml 문서화라던가 그 코멘트의 기초에서
자바닥이랑 비슷한 거죠?
그래서 그거를 써서
이걸 이걸 이걸 연결하면은 우리가 기대하는
가장 좋은 문서가 나올 수 있다라는 걸 발견하고 좋았고
저희 회사에서 하고 있고 그래서 공유를 했어요
그래서 문서화를 하셔야 하는 분들은
그런 방향으로 좀 고민을 하시면
삽질하는 시간이 좀 적겠죠?
그리고 아마 문서를 따로따로 손으로 짜는 것 때문에
그래서 공유를 하셔야 하는 분들은 그런 방향으로 좀 고민을 하시면 삽질하는 시간이 좀 적겠죠? 그리고 아마 문서를 따로따로 손으로 짜는 것 때문에
시간 낭비하는 건 좀 적겠죠?
그래서 그거를 이제 알아보시라고 지식 공유
허접한 거지만 지식 공유를 했어요
예 포프였습니다
