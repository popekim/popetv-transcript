다들 면접을 많이 보잖아요
회사 들어갈 때 처음 면접보고
기술 면접 많이 보죠 저희는
근데 기술 면접이
대우분 뭐 기술 면접이 아니라 일반 면접도 그러죠
그냥 사람들이 그렇게 생각을 많이 해요
회사에서 나를 채용하기 위해
나를 평가하기 위해 보는 면접이다?
근데 이거는 솔직히 어떻게 보면은
제가 들어갈 회사를 미리 고를 때
판단하는 모임이기도 해요
그래서 당연히 처음에 학교를 나와서
어느 회사에도 취직을 해야 될 경우에는
그게 안 보이겠지만
이미 내가 회사를 다니고 있는 상황에서
지금 회사가 좀 마음에 안 들거나
아니면 지금 회사에서 이제 다른 회사를 좀 옮겨가야
내 커리어에 도움이 되겠다 생각을 하면은
다른 데 면접을 보기도 하잖아요
아니면 그게 아니라 그냥 놀고 있는데도
아 이제 다시 이런 옛날 같은 회사 가기 싫어
그럼 좀
좀 더 잘 골라가고 싶잖아요
그러면 그 회사에 대해서 당연히 제가 물어보면은
거기 면접하는 사람들한테
당연히 다 좋은 얘기만 해요
누가 우리 회사가 야근을 뭐
하루에 50시간씩 해
그런 얘기를 하겠어요
그래서 그런 거는 중요하지 않아요
뭐 우리 회사는 컬처가 적고
똑똑한 사람하고 일할 수 있고
사람들이 너무 똑똑하다 다 구라예요
제가 어느 회사를 가봤고
정말 아주 훌륭한 회사를 가봤지만
뭐 평균적으로 조금 나을 수도 있는데
정말 정말 탤런트
그니까 이 탤런트라는 게 굉장히 뛰어난 기술
기술이 아니라 뭘까
능력을 가진 사람들을 의미하거든요
그 정도의 세계 최고의 탤런트를 가진 회사는
본 적이 아직도 없어요
그래서 그거는 그냥 광고 문구고
그리고 무슨 우리는 뭐 회사는 직원들을 생각한다
음 광고 문구예요
어차피 회사에서 그러는 이유는
이제 저를 두기 위해서고
그러면 이제 저를 두기 위해서는
그게 정작 뭐를 잘해줄 수도 있지만
아니면 광고만 할 수도 있어요
그래서 보통 그렇게 열심히 떠드는 회사들 중에
그렇게 훌륭한 회사를 못 봤고
그리고 정말 훌륭한 회사라면은
그걸 떠들지도 않을 거예요 사실은
그래서 그런 거는 다 의미가 없다고 말씀드리고
결과적으로 그 프로그래머로서
내가 이 회사에 정말 일하고 싶냐라는 거는 모르겠어요
사람마다 다를 수 있는데
저는 일이 재밌어야 돼요
그리고 일이 재밌어야 되고
제가 일하는데 뭐라 그럴까
발목을 잡는 애들이 좀 적었으면 해요
그러니까 각자 자기 일은 적당히 할 수 있으면서
서로 도와줄 수 있는 사람이 필요한 거지
자기 건 아무것도 못 하면서 발목만 잡는 애들도 있거든요
그런 애들이 많은 회사도 있고
그런 것들 싫어해요
그리고 뭐라 그럴까
서로 자기 할 일을 하면 서로 존중이 되잖아요
그런 이렇게 존경하면서 동료로서 뭔가를 할 수 있는데
그러니까 혼자 일하려면 회사를 안 들어가죠
여러 명의 사람들이 같이 일해서 뭔가를 내야 되니까 회사를 가는 거고
그거만큼 그 회사에서 어느 정도 팀원끼리의
뭐라 그럴까
치고 박고 싸우는 관계는 적으면 좋은 거예요
그래서 이제 보통 전에 비디오 한 번 만들었듯이
무슨 컴퓨터 같은 거 만들었을 때
거만한 개발자라고 만든 적이 있고
겸손한 개발자를 만든 적이 있어요
그래서 거만한 개발자에서 한 얘기는
자신을 가지고 자기를 잘 셀링을 해라
세일스피치를 잘 해라 그거였고
겸손한 개발자는 내가 틀릴 수 없다고 생각하는 개발자는
그 순간에 이미 좋은 개발자가 아니라고 얘기를 했어요
저는 훌륭한 개발자도 틀리는 거 언제나 봤고
그리고 그런 개발자일수록 자기가 어떤 사람인지 알고
실수를 만들 수 있다는 것도 알기 때문에 그만큼
어느 정도 겸손하고 주변 사람들하고도
잘 이야기하고 뭐라 그럴까
음 약간 내 코드에 약간 뭐라 그럴까
어떤 이게 이렇게 하면 더 나아지지 않냐라는 그런
건설적인 비평을 했을 때 서로 토론할 수 있고 이런 것들
그런 게 되게 중요하거든요
그래서 저는 면접을 볼 때
그것도 기술 면접을 볼 때
그 문제가 나오는 걸로 그거를 판단을 해요
그리고
그리고
뭐라 그럴까
예전에 한번 페이스북이 상장이 되기 전에
페이스북에서 연락이 와서 한번 면접을 본 적도 있어요
근데 제가 결과적으로 1차 면접
그것도 기술 면접이었는데 1차 면접 통과하고
2차 면접 보자고 할 때 제가 페이스북에서
이런 회사라면 일 안 하겠다고 관둔 이유도
사실은 면접 문제 때문이었어요
그래서 제가 왜 면접 문제를 중요시 하냐면
회사 따라 면접 문제가 굉장히 다양해요
그리고 제가 모든 회사의 뭐라 그럴까 면접을 봐도
전부 다 붙지 못해요
그 회사 문제를 봤을 때 제가 전혀 신경이 안 쓰는
전혀 생각도 못했던 문제도 있고
그러면 이거는 웬만한 프로그래머라면 풀어야 될 문제라고 믿는
그 문제의 가치도 많이 다른 것 같아요
그래서 제가 왜 이런 얘기를 하냐면
솔직히 웬만한 프로그램 면접을 볼 때 저도 면접 많이 들어갔지만
몇 가지 문제만 물어보면
그 사람이 과연 기초가 잘 되어 있냐가 보여요
뭐 이게 C를 쓰는 회사면 C로 테스트하면 되고
C#을 쓰는 회사면 C#으로 테스트하면 돼요
뭐 Java면 Java를 해도 되고
저도 이제 회사 따라 여러 가지 언어로 면접을 봤는데
결과적으로 면접에서 나오는 문제는
C가 아닌 이상은 C에는 포인터가 들어가기 때문에
그 외에는 대우분 다 비슷한 문제를 내게 되어 있어요
왜냐하면 기본기를 확인하고 싶거든요
그러면 기본기라는 게 말 그대로
이 코드를 짰을 때 이 코드가
몇 가지가 있죠
첫 번째는 이 코드가 과연 하드웨어에서 어떻게 돌아가는지 순서대로 논리적으로 생각이 가능한 사람인가가 있고
두 번째가 기본적인 알고리즘이 있어요
흔히들 많이 쓰는 알고리즘
그 알고리즘에서 얘기하는 그런 뭐라 그럴까
베네핏 이득들이 있거든요
뭐 해쉬를 쓰면 이게 O1이라던가
그럼 이런 거를 봤을 때
이 사람이 이게 왜 O1인지를 알고 있냐
이런 걸 테스트하는 문제들이 다 있어요
그리고 그런 게 중점이 되면은
나머지 실제 소프트웨어 엔지니어링 쪽에
대부분의 우리 저희 있는 소프트웨어 엔지니어링 업계에서 있는
대우분의 문제는 그거에 기반해서 쌓아 올린 거거든요
그래서 그런 코어 아이디어를 아느냐를 솔직히
굉장히 중요하게 여기는 게 기술 면접이에요
근데 회사가 좋지 않은 회사는
문제를 낼 때
이런 류의 문제를 많이 내요
일단은 좋지 않은 회사가 제가 뭐냐라고 보면은
정말 괜찮은 개발자 못 뽑고
좀 쭉쩡이 같은 애들 많이 뽑는 애들
그러니까 정말 기술로 뽑는 게 아니라
그냥 무늬로 뽑는 애들
아니면은 회사 컬처 자체가
이렇게 정말 제대로 일하고 조용히 제대로 일하고
서로 협력을 잘하는 애들을 뽑는 게 아니라
서로 그냥 나대면서 잘난 척하면서
남까기 바쁜 그런 애들을 뽑는 회사
왜냐면은 이제 그 제가 말한 두 개가 전부 다 공통점이 있어요
세상에 사기를 치는 사람들은 처음에는 잘 안 잡혀요
사기를 치셔도 진짜 같거든
그러니까 사기를 칠 수 있는 거고
그런 사기를 치는 사람들이 소프트웨어 엔지니어링 쪽으로 오면은
그냥 기술 막 이름만 막 이런 거 써봤어 써봤어 써봤어
이런 거만 막 얘기하는 사람
그리고 두 번째가
그 학교에서 보면은 교과서에 책에 보면 이상한 거 있잖아요
막 알고리즘 책이라고 그러면 정말 우리는 죽어도 안 쓸 법한
막 이런 이런 알고리즘 있는 거
그리고 남들은 보고 아 이런 게 있어 넘어가고 까먹는 건데
혼자 열심히 기억해 놓은 다음에 애들하고 토론하기 시작할 때
너 이런 거 알아? 모르지 나 졸라 똑똑해
이런 애들 영어로는 그게 스마트했으라고 하거든요
그래서 그런 게 두 부류예요
근데 그게 이제 면접을 볼 때는
얘를 처음에 따지면은
딱 보고 나서 이런 막 멋진 얘기하면은
아 진짜인 거 같거든
그래서 그거에 속아서 채용하는 회사들이 있어요
근데 대부분 그런 면접관이 들어오는 회사들은
그런 애들을 점점 많이 채용을 하게 되고
그만큼 걔네들이 실력이 없어서 나가거나
다른 애들하고 부딪혀서 나가거나
아니면 다른 애들이 나가거나
제일 중요한 거는 다른 애들이 나가는 거죠 사실은 짜증나서
정말 괜찮은 애들이
그런 문화가 반복이 되면서 회사가 귀찮아지거든요
그래서
그런 문제를 내는 회사가 있다면
솔직히 좀 이렇게
그냥
다른 데를 좀 더 보시라고 하고 싶어요
정말 그 회사가 필요한 게 아니면
그래서 주의해야 될 그런 것들이
첫 번째가
그런 기본적인 프로그래밍 실력이 아니라
이 언어를 써봤냐
이 뭐 뭐라 그럴까
라이브러리를 써봤냐
이런 거에 되게 목매는 사람들이 있죠
그거를 하는 회사는 일단은
저는 무조건 제외예요
저는 실제로 웹회사 들어갈 때도
시뻣불로 들어갔고 C#을 쓰는 회사에서
그리고 제가 채용을 할 때도 언제나 그랬어요
그래서 그거는 제외고
두 번째는 이건 특히 좀 알고리즘 문제나 이런 거 같은 건데
정말 절대 쓰지 않는
그러니까 한 절대 이 회사에서 쓸 것 같지 않은
그런 알고리즘 문제를 묻는 애들
그러니까 뭐
제가 요즘 들어서 많이 하는 얘기 중에 하나가
자료 구조 쪽은 많이 쓸 일이 많잖아요
자료 구조로 물어보려면 보통 물어보는 게
Array는 당연히 물어보고
거기다 뭐 Linked List라던가
제일 중요한 게 Hash Map
아니면 Dictionary라고 하죠 C#에서는
그거를 많이 물어봐요 뭐 Queue, Stack도 물어보고
근데 가끔마다
절대 이 회사에서 쓸 것 같지 않은데
Tree를 물어보는 회사들이 있어요
그러니까 뭐 Tree도 이제 뭐
뭐라 그럴까 Sorting이나
그 아니면 이제 Ordered List 있잖아요
그러니까 처음부터 이제 언제나
그 순서를 정렬을 잘 해놓는 그런 List 개념을 이해하고
그리고 이제 뭐 Binary Tree Search할 때
이런 데에서는 꽤 도움이 되는 아이디어거든요 그걸 이해할 때는
그래서 뭐 Tree에서 Even Tree에서 이제 뭐
이게 왜 O log N인지 이런 거를 Search할 때
그런 거에 개념에서 Tree를 주면 말이 되는데
그게 아니라 이제 그 저희 알고리즘 이제
Course 듣다 보면은 알고리즘 Complexity 이런 거에서
그래프 Theory 같은 거 하면서 이제 Tree를 많이 다루거든요
근데 그거를 쓰는 회사들도 있어요
근데 그거를 안 쓸 것 같은 회사에서
굳이 Tree 문제를 열심히 물어보는 회사들도 있어요
저는 그런 문제를 볼 때마다
얘네가 과연 이 문제를 왜 물어볼까를 신경을 많이 써요
왜냐하면 이거는 그냥 흔히들 많이 썼으니까
그 뭐라 그럴까 시험 문제로
아니면은 이게 뭐 모든 거를
그러니까 굉장히 어려운 문제 중에 하나가 될 수 있으니까
Tree를 열심히 공부하지 않으면
근데 아무리 봐도 제가 실제로 만약에
정말 잘하는 프로그래머들 제가 회사에서 일했던 애들한테
이런 좀 미묘하고 복잡한 Tree 문제 그래프 문제를 물어봤을 때
과연 이거를 제대로 풀 수 있는 애들이 얼마나 있을까 생각이 들 정도의 문제도 나온 적이 있어요
그래서 재밌는 게 뭐냐면
이런 문제를 푸는 애들은 또 재밌는 게
그냥
면접을 위해 열심히 공부하는 애들
그런 애들이 또 이런 문제를 잘 풀어요
저는 면접을 위해 공부하고 온 애들은 별로 안 좋아하거든요
원래 실력으로 뽑고 싶지
그래서 오히려 저희가 뽑으려고 하는 제가 바라보는 올바른 프로그래머 상보다는
아까 말했던 스마트 S 쪽에 가까운 애들을
이렇게 조장하는 그런 문제에 더 가깝다고 보거든요
그래서 그런 문제를 내는 회사를 제가 다녀봤고
그리고 그런 회사일수록 오히려 애들이 뭐라 그럴까
업무 능력이 굉장히 딸리고
아 이건 책에서 이랬어 라고 말하는 스타일이 좀 많았어요
그래서 페이스북 문제는 그건 아니었어요
솔직히 까먹었어요
뭔 문제였는지
그래서 페이스북 문제 1차를 봤을 때
1차에서도 무슨 리크루터가 저한테 그러더라고요
그래서 우리는 이런 이런 문제를 많이 보니까
이걸 공부해서 오도록 해
그래서 내가 어이가 없어가지고 일단 공부 안 했어요
왜 면접에 공부를 하지 이 생각이
그래서 면접을 봤는데
제가 이렇게 좀 질문을 갖게 하는 의심을 품게 하는 그런 문제들이 많이 나왔어요
거기서 제 기억에는 제가 시니어급 정도로 들어가는 거였기 때문에
처음부터 굉장히 높은 사람하고 면접을 봤는데
문제는 다 풀었어요
제 프로그래밍 문제였고 뭐 2시간 정도 졌나 1시간 정도 졌나 기억 안 나는데
다 풀고 제가 약간 머리 긁으면서 아 이거는 이거겠지 라고 풀었어요
그러니까 제가 물어볼 것 같은 질문도 아니고
여기서 물어보는 이유도 솔직히 크게 없는 질문인데
그냥 이거는 뭐라 그럴까
무슨 그런 거 있죠
트리비아 퀘스션 뭐 이렇게 뭐 뭐 뭐
일반 걸로 생각하면은 뭐 이 영화에 나왔던 여배우는 누굴까요
이런 정도의 수준 아무 의미 없는
그렇게 쉽다는 게 아니라 그냥 정말 엔지니어 쪽에 크게 쓸 일이 아니라 그냥
분명히 책 어딘가 어떤 어떤 책 어딘가 구석에 있을 법한 내용들
그래서 풀었어요 그래서 풀고
그래서 뭐 나쁘지 않게 본 거 같아요
그래서 통과했다 2차 면접을 보자고 오는데
또 리크루터가 똑같은 얘기를 하는 거예요
아 요번에도 뭐 이런 이런 이런 걸 좀 공부를 더 해서 와라 이런 식으로 했고
제가 듣다가 찾음이 나서 리크루한테 이메일을 보내서 그냥 그랬어요
나는 일단은 너네가 낸 문제가 그렇게 올바른 프로그램으로 뽑는 그런 문제도 아니라고 생각을 하고
두 번째가 네가 정말 이렇게 나서서 뭐를 공부해서 면접을 보라고 얘기할 정도면
많은 사람들이 그렇게 본다는 건데
난 그렇게 공부해서 면접 공부를 해서 시험을 봐서 들어와야 되는 애들 정도하고도 일하고 싶지 않다라고 하고
접었어요 그때 그래서 저는 한마디로 얘기하면 리크루터가 저한테
똥을 싼 건데 정확히 얘기하면 리크루터가 오히려 안티야
페이스북에서 애들을 데려오는 게 아니라 애들을 안 데려오려고 하는 것 같은 느낌인데
저는 그랬어요 그래서 제가 말하고 싶은 거는 그 면접 문제가
자기 실력 일반적으로 회사에서 쓰는 실력
내가 정말 회사 업무를 할 때 필요한 실력을 벗어나는 문제가 말이 안 된다고 보거든요
그럴 거면은 그냥 면접 기술 문제 보지 말고 토플 문제 보고 그걸로 취업하고 말지
어차피 상관없잖아 영어 잘하면 개발도 잘하겠지 이게 이 개념이잖아요
아니면 여태까지 본 책을 쓰시오 해서 책 목록 따라 취업을 시키던가
그래서 그런 면접도
그런 면접으로 일단 회사를 판단하고
판단할 수가 있다는 거를 기억해 주셨으면 좋겠어요
아니면은 회사로 여러 번 돌아다니는 사람들이면
면접 문제의 패턴이 다르잖아요 회사마다
그러면 그 패턴을 이렇게 분류를 해봐요 내가 좋았던 회사 나빴던 회사가 있잖아요
그럼 지금 새로 보는 면접 보는 회사의 문제는 어느 쪽에 가깝냐
그것 따라 좋고 나쁜 회사가 판가름이 될 수도 있어요
생각보다 면접 문제를 내는 사람들도 뛰어난 프로그래머가 아닌 경우도 많고요
그 사람도 그냥 열심히 일을 하고 있을 뿐이지
근데 본인의 성장을 위해서는
확실히 좀 뭐라 그럴까
평균적으로 그나마 좀 괜찮은 프로그래머가 많은 데가 훨씬 나은 거 같아요
그래서 이것도 어찌보면은 제가 회사를 여러 군데 돌아다니면서 면접을 보고
그리고 안 가고 가고 갔다 후회하고 안 갔다 후회하고
뭐 안 갔다 후회한 적은 없나? 없는 거 같아요
그런 경험과 제가 면접관으로 들어가서 면접을 여러 번 봐 본 결과
내린 결정입니다 그래서
면접을 볼 때 반드시 회사가 나를 판단하는 기준이 아니라
내가 회사를 판단하는 기준이 될 수도 있도록 생각하면 좋겠어요
아까 말했듯이 무슨 회사에서 이건 어떻니까라는 직접적인 질문을 했을 때
그거를 진솔되게 솔직하게 말해주는 면접관은 거의 없고
그보다는 실제 객관적으로 나와있는 패턴에서 패턴 분석해야 하고 머신러닝이구나
거기서 회사를 판단할 수 있다는 거를 말한 포프티비였네요
포프였습니다
