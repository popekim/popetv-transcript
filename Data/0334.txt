예 안녕하세요 포프입니다 오늘은 그 얘기를 하려고 닷넷 얘기를 하려고
해요 그 특히 웹 쪽으로 그 뭐지 mbc asp닷넷 그래 asp닷넷을 쓰시는
분들이 있을 거라고 믿어요 아직도 자바 스프링 쪽을 쓰시는 분도 계시
겠지만 이제 뭐 돈 있는 회사는 마술을 쓴다고 믿고 있는 저니까
그런 좋은 회사에 다니시는 분들 이면은 분명히 웹을 만들 때 이제
asp닷넷을 써갖고 뭐 좀 오래된 프로젝트 들은 웹폼으로 많이 만들었을 거고
그 다음에 이제 좀 새로 하는 프로젝트 들은 아무래도 mbc5라던가 뭐 웹
api 등을 써서 많이 만들었을 것 같아요 저도 이제 한 2년 전인가
3년 전에 있던 회사였어요.

회사도 이제 그걸 넘어가는 과정 이었고 저는 이제 운 좋게 mbc하고
웹 api 쪽으로 해서 많이 썼었고 그러다가 이제 그 뒤에 많은 것들이
조금씩 변해갔죠 이제 예전에는 그 모노리틱 서버라고 해서 서버
하나에서 모든 거를 처리하는 그런 뭐 굉장히 비싼 서버 이런 식으로
써 거기다 최대한 많은 접속을 처리 하자 이런 방식이었다면 이제 그
다음에 이제 마이크로 서비스라는 이제 뭐 신종 서비스라는 그런 서비스

서비스라는 이제 뭐 신종 서비스라는 이제 뭐 신종 서비스
이제 뭐라 그래야 될까 패러다임 이라 그래야 될까 이제 뭐 그런 게 나오면서 사람들이 또 그쪽으로 좀 많이 약을 빨면서 마이크로 서비스로 많이 넘어가다 보니까
as 기단에서 너무 무겁지 않냐 이것보다는 굉장히 라이트 웨이트한 그런 서버가 더 필요하지 않냐 라는 부분에서 이제 노드 js 가 많이 각광을 받았던 것
같아요 그래서 뭐 노드 js 는 솔직히 싱글 스레드로 도는 거였고 아 그렇게 그러고 이제 뭐 뭐
그래서 뭐 노드 js 는 솔직히 싱글 스레드로 도는 거였고 아 그렇게 그러고 이제 뭐
그래서 뭐 노드 js 는 솔직히 싱글 스레드로 도는 거였고 아 그렇게 그러고 이제 뭐 싱글 스레드라고 하지만 블락킹이 아니라 보통 이제 뭐
싱글 스레드라고 하지만 블락킹이 아니라 보통 이제 뭐
싱글 스레드라고 하지만 블락킹이 아니라 보통 이제 뭐 뭐 뭐
뭐 뭐 코 루틴 이런거 생각하시는 것 처럼 그냥 타이그 슬아이 씽 Treating 이런거 생각하시는 것 처럼 그냥 타이그 슬아이 씽 Treating

그냥 타임 슬라이� 필요로 이제 하나씩 하나씩 시간을 주는 거였죠 여러 가지 이제 에이셍 쿨러 눌리기 시작하면
그건 자바스크립트가 도는 원리와도 비슷한 것 같으니까
그거는 굳이 설명 안 해도 될 것 같고
멀티스레딩 기반이 아니라 그런 식으로 돌게 되면
메시지 핸들링을 빨리 할 수 있다느니
컨택스 스위치가 없기 때문에 훨씬 낫다느니
이런 여러 가지 장점들이 있었고
결과적으로는 어차피 마이크로 서비스가
해야 되는 기능 하나가 되게 작은 거니까 서버마다
그거 용으로는 오히려 그렇게 모든 게 왕창 들어가 있는
ASP단넷보다는 정말 뭐라 그럴까
아주 베어본 그러니까 아무것도 없고
네가 원하는 것만 딱 올려왔고
설정에서 올릴 수 있는 그런 서버가 낫지 않냐
라는 쪽으로 해서 노드JS가 많이 각광을 받았던 것 같아요
그리고 뭐 어찌보면 그거에 대한 차이는
이제 모든 기능이 들어가 있어서
그냥 곧바로 아무 생각 없이 쓸 수 있는 윈도우스가 좋냐
아니면은 정말 내가 필요한 것만
갖다 구워갖고 OS를 만들 수 있는 리눅스가 낫냐
뭐 이런 개념인 것 같기도 한데
사실은 뭐 개발자 입장에서는 어찌보면은
그렇게 왕창 들어가 있는 게 편하긴 편하죠
내가 쓸 수 있는 것만 쓰면 좋으니까
거기서 내가 때로 설치할 거 없이
근데 이제 문제는 속도상의 문제였고
그래서 노드JS가 많이 각광을 받았고
여태까지 많은 상승세를 거쳐 왔던 것도 맞는 것 같아요
그래서 그 순간에 이제 뭐 노드JS를 보고 배웠던
그런 그때 비슷한 움직임이 있어서 똑같이 시작을 했던 간에
이제 마이크로소프트에서는 이제
B-Next라고 한동안 했었거든요
뭐 넥스트 버전이라고 해서 그랬던 것 같은데
그게 지금 이제 .NET Core라고 나와 있는 거고요
그래서 ASP.NET Core 이런 식으로
그래서 이제 그거를 똑같이 만들기 시작을 했고
그리고 뭐 벤치마크를 100% 믿으면 안 되지만
음 벤치마크를 이제 최종
아니 얼마 전인가 작년인가 만든 거에서는
노드JS 속도를 눌렀다고 나와 있긴 한데
저는 뭐 어떤 사양에서 어떻게 돌렸는지에 따라 다른 거기 때문에
뭐 그렇게 중요한 건 아닌 것 같고
그냥 노드JS만큼 빠르다?
그리고 제가 실제 체감하는 거로는
실제 뭐 돌려보면서
ASP.NET Core보다는 빨라요
그래서 그렇게 굉장히 라이트웨이트한 새로운 게 만든 게
이제 .NET Core였죠
그럼 이제 그런 신기술이 나오면
이제 음 뭐라 그럴까
그런 언제 기술을 도입해야 되고
언제 지금 있는 그 거를 갈아엎어야 되고
그리고 이 갈아엎을 때 과연 문제가 없을까
괜히 갈아엎기로 결정하고 두 달 동안 쳐박았는데
갑자기 이런 문제 때문에 못 쓰면 어떡하나
아니면은 뭐 갈아엎는 게 너무 시간이 많이 걸리면 어떡하나
근데 안 갈아엎으면 너무 뒤쳐져서
이제 더 이상 새로운 이런 성능 향상을 뭐랄까
받을 수 없고 점점 서버를 늘려가야 되는데
이걸 어느 순간 바꿔야 되는 게 옳은가 라는
고민을 하는 위치에 있는 분들이 많을 것 같아요
이제 뭐 저도 그런
위치 중에 하나고
그래서 작년까지만 해도 정확히 얘기하면은
몇 달 전까지만 해도 누군가 저한테 .NET Core를 쓸 거냐고 물으면
아직은 시기상조라고 했어요
그 첫 번째 몇 가지 이유가 있었는데 사실은
아 이제 새로 나온 기술을 처음 쓴다는 거 자체가
일단 제가 벡터 테스터가 된다는 거고
제가 Early Adapter라고 뭐 좋아하고 이런 건 있을 수 있는데
결과적으로는 그거는 뭐랄까
저 혼자만의 새로운 거 만져보고서는

하고 싶다는 생각 때문에 오히려
회사에 누를 끼치는 거라고 생각을 하거든요
그래서 어느 순간에서는 당연히 넘어가야겠지만
그냥 Early Adapter로 새로운 걸 시도하고 싶어서
넘어가는 건 아니었던 거 같아요
그리고 그 몇 년 전에 이제 저 옆에 있던 사람이
.NET Core가 이제 맥에서도 돈다니까
맥에서 시도해 보려고 했는데
뭐 이런저런 잔손 가야 되는 게 좀 많았어요
툴도 완벽하지 않았었고
그래서 아직은 시기상조였다고 생각을 했고
그때 .NET Core 버전도 뭐 Release Candidate이라거나 뭐
Preview 버전 이랬거든요
그리고 이제 또 하나 문제는 이제 .NET Core 팀하고
제 생각엔 Visual Studio 팀하고 같이 작업을 할 수가 없잖아요
같은 프로덕트니까 서로 돕긴 하지만
모든 버전을 같이 갈 수는 없기 때문에
바로 전 버전 .NET Core만 하더라도
Visual Studio 자체에서 지원을 잘한다고 보기에는 되게 어려웠어요
자체 프로젝트 포맷 파일이 따로 있었고
그리고 거기다가 무슨 좀 약간 JSON 파일 이런 걸로
직접 세팅해 줘야 할 것도 있었고
물론 그런 세팅해 주는 게 나쁘다는 거는 아닌데
솔로 세팅이 한 번에 가능한 거면
굳이 손으로 세팅하지 않는 게 좋지 않나
대부분의 사람들은 그렇게 생각을 하거든요
그래서 그런 부분도 있었고
툴 기능도 좀 모호했고
버전이 프리뷰 버전이었다는 것도 좀 기분이 나빴고
그 말인즉슨 뭔가 많이 바뀐다는 얘기니까
그리고 그 당시에 이제
엔티티 프레임워크 쪽도
이제 지금도 그건 똑같은데
MSDN을 읽어보면
예전 엔티티 프레임워크에 비해
이런 이런 이런 거는 안 된다고 써 있는 게 있어요
그런데 이제 상황이 조금 바뀌었죠 그 뒤에
이제 비주얼 스튜디오 2017이 나왔어요
그리고 2017이 나오면서
이제 프로젝트에서 CS 프로젝트를 쓴 거 안에서
이제 .NET Core가 자체적으로 지원이 되고
뭐 쉐어드 프로젝터를
뭐 이렇게 프로젝트를 링크하는 거라든가
이런 것도 예전보다 잘 돼요
그래서 뭐 약간 버그는 있는데
여기저기 그렇게 중요한 버그는 아니고
비주얼라이제이션 버그 쪽이에요
그냥 툴에서 잘 안 보이는 버그 정도
그 외에는 모든 게 작동하기 시작을 했고
아 그리고
뭐 .NET 아까 아까 말했던
그 엔티티 프레임워크 쪽 문제는 그대로 있는데
그 외에 굉장히 많은 것들이 좋아졌거든요
일단 버전도 정식 버전 올라왔고
툴 지원도 괜찮아졌고
맥 쪽에서도 이제 비주얼 스튜디오 맥이 정식으로 나왔잖아요
뭐 자마린 기반이라고 알고 있는데
자마린 스튜디오 기반으로 올렸다고 알고 있지만
그것도 나왔고
뭐 그게 안 되면 비주얼 스튜디오 코드도 있을 거고
툴 지원도 웬만큼 괜찮아졌고
이제 뭐 패키징이라던가
이런 것도 웬만한 진짜 괜찮아졌고
비주얼 스튜디오 온라인 쪽에서 뭐 CI를 돌리거나
이것도 자체적으로 지원이 잘 되고요
그래서 모든 툴이 이제 아 이제 고생을 안 하고
이거를 들어갈 수 있을 상황이 왔다 라고 생각이 들었어요
그래서 제가 지금 있는 회사에서 제가 이거 뭐죠
제가 기술 결정을 다 내리는데
그 회사에서도 이제 겨우 닷넷 코어로 돌아섰고
그리고
비디오를 만들고 있는 시점에서
오늘 아침에 실제 닷넷 코어 서버가 나갔어요
프로덕션으로 라이브로
그래서 이제는 닷넷 코어에 있는 기능들을 잘 쓰면 되는 건데
일단 닷넷 코어가 이제 뭐라 그럴까
아까 말했던 단순히 성능만 빨라진 거 외에도
몇 가지 장점이 있어요
그 장점도 있고 한 가지 단점도 있다고 저는 보는데
이제 단점부터 얘기해요 단점부터
일단은 Dependency Injection에 엄청나게 의존을 해요
물론.. 그러니까 기본적으로
기본적으로 나온 게 이제 모든 게 DI가 되게 이제 나왔기 때문에
그거를 굳이 뜯어고쳐 하고 안 쓰고 싶은 마음은 없지만
DI를 제가 별로 안 좋아하는 이유가 있고
참 쓰고 싶어 하지 않는 부분들이 몇 군데 있거든요
그렇게 하기가 조금은 이제 조금 번거롭다는 거 그런 단점은 있어요
그래서 그게 뭐 이제 뭐 새로운 프로그래밍의 패러다임이어서
좋다라고 말하는 사람도 있지만 제가 볼 때는
이것도 옛날에 OOP에서 막 디자인 패턴 가끔 미친 듯이
약 빨고 엉뚱하게 갔다가 다시 좀 제정신으로 돌아오고 있는 것처럼
DI도 좀 왕창 갔다가 좀 돌아올 것 같은 느낌인데
닷넷코어가 좀 왕창 갔다는 느낌이 들어서 조금 아쉬운 부분이 있지만
뭐 그거는 일단은 뭐 단점 하나로 생각하고 있고
장점으로는 이제 예전에 굉장히 제가 직접 라이브러리를 만들어 갖고
해줘야 했던 일들이 있어요
예를 들면은 내가 뭐 여러 가지 서버가 종류가 있잖아요
프로덕션 서버, 라이브 서버가 있고
스테이징 서버가 있고 테스트 서버가 있으면
지금 내가 디플로이된 서버가 어디냐에 따라
이제 뭐 제가 뭐 변수를 정해줘갖고
뭐 대시 뭐랄까
애지오 같은 경우면 거기 애지오 웹 대시보드에 있는 앱 세팅 같은 데 넣어주고
그걸 읽어갖고 이런저런 다른 걸 처리해줘야 되는 일이 있었거든요
이제 그거 자체를 이제 호스팅 인바이러먼트에서 자체적으로 지원을 해요
이제 뭐 이름을 디벨롭으로 넣으면은 그거에 맞는 테스팅을 따로 읽어줄 수 있다거나
그게 제가 하는 한 가지 장점
다른 것도 있으니까 뭐 두 번째 장점이라고 하죠
그리고 또 하나의 장점은 굉장히 많은 것들이 세세하게 모듈로 나눠졌어요
예전처럼 그냥 자 ASP.NET 하면 하나로 오는 게 아니라
아 나는 여기다가 이제 뭐 콜스를 올린다거나 CORS 그거만 올릴게
아니면 나 여기는 그 레이저 뷰 엔진을 넣고 싶지 않으면 뺄 수도 있고
아 뭐 그러니까 하나 옛날에 있던 그 모든 기능들을 하나하나씩 추가를 할 수 있게 됐어요
뭐 구글 쪽에 이제 뭐
SDK를 이제 빌더를 통해 쓰시는 분들은 알겠지만
무슨 빌더하고 나서 뭐 add 뭐 add 뭐 add 뭐 이런 식으로 추가 추가 추가하는 과정이 있잖아요
그런 식으로 제가 원하는 것만 골라 쓸 수 있어서 굉장히 가볍게 돌릴 수 있다는 장점이 있고
아 그게 이제 세 번째고 네 번째는 이제 로깅 자체가 기본으로 들어왔어요
옛날에는 여기다 로깅을 누르면 트레이스를 해갖고 하거나 NLOG를 꼽아갖고
무슨 제가 로고 트랜스포트로 만들든 뭐 뭐 트레이스 파일로 아니 트레이스 파일이래요
그 뭐 디스크 파일로 쓰든 이런 걸 설정을 해줘야 됐는데
이젠 기본적으로 일단 거기서 나오는 모듈 누겟 모듈이나 아니면 그런 거에서 로깅을 이제 트랜스포트 할 수 있는 게 잘 나오고
그리고 기본적으로 닷넷코어에 이제 로거 팩토리가 있어서 NLOG 쓰듯이 그냥 로깅을 할 수가 있어요
그리고 이제 그거를 잘 설정을 하면은 음 뭐라 그럴까
그 애저에서 제공하는 애플리케이션 인사이트로도 곧바로 로깅을 쏘게 할 수가 있어요
그래서 그런 장점이 있고
뭐 애플리케이션 인사이트 설정하는 것도 그런 식으로 간단하게 되고요
그래서 그런 게 있었고
그리고 또 하나 제가 가장 좋아하는 거는 옵션 리딩하는 게 좋아졌거든요
그니까 제가 항상 예전에도 얘기했던 거지만 이제 엔티티 프레임워크 같은 거 얘기할 때도
아 SQL을 따로 쓰고 나서 뭐 셀렉트하고 긁어온 다음에 거기서 하나씩 뽑아갖고 뭐 데이터를 뽑는 것보다는 ORM을 하는 게 맞다라는 식으로 얘기했어요
오브젝트를 만들어 놓고 코드 퍼스트면 더 좋고
그럼 그게 곧바로 데이터베이스 뒤에 어떻게 저장되는지
지네가 알아서 할 일이고 나는 프로그래머는 몰라도 되는 게 훨씬 좋다
그렇게 얘기를 했는데 옵션도 그런 식으로 많이 갔어요
그러니까 옵션은 이제 어떤 개념이냐면
결과적으로 옵션 그 세팅들 있잖아요
앱 세팅 이런 게 결과적으로는 JSON파일로 들어오는데
그 JSON파일에 있는 구조가 있잖아요
무슨 뭐 이렇게 뭐 nested 구조도 있고
그 구조랑 똑같이 그냥 그 클래스 파일을 만들은 다음에 옵션이다라고 하면은
제가 지정해준 그 로그 파일 중에서 아니
파일들 중에서 세팅 파일들 중에서 그거랑 이름이 맞는 걸 찾아갖고 그 오브젝트에 놓고 돌려줘요
그래서 뭐 이것도 다 DI로 되어 있기 때문에 DI로 모든 걸 하면 간단하게 불러올 수 있고 그게 아니어도 그냥
아 뭐 withSection이라던가 이런 걸로 해갖고 getSection 한 다음에 그 섹션을 가져온 다음에 그거를 이제 이 클래스로 집어넣어 줘 라고만 하면은 그
클래스를 불러와서 그냥 옵션을 쓸 수가 있죠 예전처럼 무슨 한 줄 한 줄 앱 세팅 넣어 놓고 그거 하나씩 읽어와서
컨피귤 매니저라던가 이런거에서 읽어왔어야 했잖아요 옛날에 그런거에 읽어와서 뭐 앱 세팅서에서 읽어와서 하나하나 읽을 필요가 없이
그냥 그 cs 파일 c# 파일로 그냥 클래스를 만들어 놓고 옵션을 한번에 읽어서 쓸 수가 있어요
뭐 지금까지 저희가 쓴 것은 그 정도고 아 또 하나 제가 좋은 것은 아까 말했지만 모듈화해서 똑같은 얘긴데
제
제가 지금 만들고 있는 서버는 대부분이 이제 웹 api 에요 그러니까 api 서버고 뷰가 거의 없어요 그냥 보통 데이터를 주고받는 서버기 때문에
예전에 이제 asp.net 같은 거 쓸 때 mbc 따라오는 거 별로 안 좋아했거든요 그런거 다 걷고 그냥 솔직하게 그냥 원하는 것만 쓸 수 있다는 거
그래서 그런 것도 되게 좋아졌고 간편해 졌어요 그리고 실제 지금 느끼는 제가 체감하는 속도도 빨라졌고
그래서 뭐 닷넷코가 제가 보는 장점들을 이렇게 얘기했고 그리고
음
음 왜 닷넷코를 내가 안 썼냐 뭐 그리고 이게 왜 나왔는지 다른 거에 비교를 좀 했는데 결과적으로 이제는 써도 될 때가 온 것 같아요
뭐 제가 아직 그 뭐랄까 mbc 쪽에서 뷰 쪽을 제대로 지금 테스트 해보지 않았지만 그게 굳이 안 돌 거 같은 이유는 없고 아까 말했듯이
엔티티 프레임워크 쪽에서 문제가 있을 수 있는 부분들 한번 문서 제대로 읽어보시고 본인한테 크게 문제가 없는지 확인을 해보고 그게 없다면 은
단아 고구를 서서히 넘어가는 게 이제 맞다 라고 봐요 그래서 닷넷코를 이제 이제 써도 될 것 같다 라는 얘기를 하고
으 단 내 코을 쓰는 순간 이제 노드 js 는 좀 더 이제 약간 줄어들지 않을까 생각이 되는데 제가 닷 넷 코에서 지금 문제점이 또 한두 개의 지금 막
떠오르는 게 뭐냐면 만약에 그 뭐라고 이 서비스버스 쓰시는 분들 있으면 그쪽 sdk 가지가 내 코가 제대로 지원이 안 될 거에요 서비스 버스 들을 때 그 서비스버스가 조금 더 줄어들지 않을까 생각합니다.
쪽을 조금 생각을 해보셔야 되고 그쪽 쓰시는 분들은 그리고 두번째는 아 그 보드라
뭐지 말하다 까먹었어
뭔가는 또 안되는게 있었는데 이렇게 까먹고 그냥 닫은 다음에 그게 문제가 생겨도 나중에 뇌퇴사 가진 않겠죠
음 근데 기억이 안나니까 관둬야 겠어요 그래서 그 단점이 몇가지가 있는데 나중에 기억이 나면 또 다른 만들거나 할텐데
그렇게 중요한 단점 아니어서 까먹었겠지 라는 생각을 하고 그냥 끝내야겠네요 그래서 저는 닷넷코어 가다 지금 마음이 되게 편하고
되게 이렇게 편해요 자잘한 것들 좀 많이 안해줘도 돼서 아 이게 옛날에 윈도우스 xp 에서
7 올릴 때 기분인 것 같아요
그때 xp 가 10년 동안 머무르다가 x7 딱 올렸을 때 아 10년만에 운영체제는 이렇게 발전할 수가 있었구나 라는 걸 느끼게 해준
기회거든요 그게 어쩌면 지금 제가 asd 닷넷에서 이제 닷넷코어 넘어가면서 아 이런 많은게
편해졌구나 느끼는 기계랑 거의 똑같은 것 같아요 그래서 음 닷넷코어
써보시는게 좋을 것 같아요 이러면 학교 코스가 또 바뀌어야 되나 앞으로 제 생각에 한 2년 뒤 지금부터 2년 뒤에는
새 프로젝트 모두 닷넷코어로 하지 않을까 생각이 들어요 사실 아 그리고 닷넷코어의 마지막 장점이 어느 플랫폼에서도 돌아요
프로그램 뭐야 윈도우스에서 해도 니눅스에서도 돌고 그래서 어느 서버에 돌려도 상관이 없다고 알고 있어요 물론 저희는 윈도우스 서버를 씁니다
예 보표였습니다
