예 안녕하세요 퍼프입니다.
오늘은 무슨 얘기를 해볼까 고민을 하다가
예전에, 예전이 아니지 저번주에 제가
OOP에 대해서 얘기를 한 김에 똑같은 개념으로
도메인 드리븐 디자인에 대해서 얘기를 하려고 해요.
DDD라고 많이 하는데
솔직한 얘기로 제가 도메인 드리븐 디자인을 소개하고 싶은 마음은 아니고
제가 웹회사 쪽에 제대로 가서 일을 하기 시작을 했을 때
거기서 애들이 도메인 드리븐 디자인을 하겠다고
굉장히 많은 일들을 하고 있었어요.
도메인 드리븐 디자인이 꼭 뭐라 그럴까
굉장히 대단한 것인 것처럼 저한테 얘기를 했었는데
저는 문제는 도메인 드리븐 디자인이 뭔지를
그전에는 전혀 들어본 적도 솔직히 없었고 관심도 없었어요.
그래서 뭔지 모르는 거니까
아 이게 뭘까 잘 모르겠다
그런 생각이 들면서
뭐라 그래
나중에 결정을 과연 좋은 건지 나쁜 건지 모르겠는 거예요.
들으면서 누가 제대로 설명해 주지 않고
도메인 드리븐 디자인이라고 하면서 코드를 보여주는데
아 이런 거구나
그러면서 뭔가 좀 이상한데
왜 이런 걸 할까라는 고민을 좀 많이 했어요 사실은
그러다가 나중에 애들 이끌고 이러면서 제대로 좀 보고
애들 실제 도메인 드리븐 디자인을 어떻게 하는지도 보고
되게 유명하다는 책도 읽어보고
강의도 한번 보면서
그때부터 도메인 드리븐에 대한 게
아 이런 거구나 라는 개념이 잡혔는데
그 개념이 잡히면 잡힐수록
어 이거 뭔가 좀 이상한데 생각이 더 많이 들었어요.
사실은 왜냐면 도메인 드리븐 디자인이
이제 정확히 뭐냐라고 얘기를 하면은
그 도메인이 뭔지 알면 좀 이해가 되거든요.
웹도메인 이런 게 아니라 보통 그런 거 있잖아요.
내가 이 회사에서 10년을 일하면서 이런 제품을 만들었으면
제가 그 제품에 대한 이해가 되거든요.

그게 높잖아요.
그런 거를 도메인 지식이라고 많이 해요.
그래서 그 어떤 비즈니스에 맞는 프로그램 만들 때도
그 회사가 돕는 거에 대한 도메인 knowledge가 있거든요.
도메인 지식이란 건데 예를 들어서 제가 무슨 애견샵을 운영한다
그러면서 그 애견샵에 구축해야 되는 시스템이 있잖아요.
판매 시스템이라던가 결제 시스템 이라던가 고객 관리 시스템 이런
것들을 할 때 우리가 고객 관리를 어떻게 하고
우리가 실제 판매를 어떻게 하고 이런 비즈니스 쪽에 대한 지식이
이제 도메인 지식인데 그거를 알지 못하면은
그거에 맞는 제품을 만들기가 좀 어렵다는 거에
시작을 하는 거 같아요 전제가 그러면 그런 도메인 지식을 가지고
그 도메인 지식을 중점으로 해서 서비스를 만들어라 이런 개념이에요.
그래서 그 전 예전에는 분명히 이제 그러니까 이게
결론부터 말하면 저는 OOP랑 굉장히 비슷한 걸 봤어요.
오브젝트 오리엔티드 디자인이라는 것도 오브젝트 오리엔티드 프로그래밍
아니면 OAD 오브젝트 오리엔티드 에너지 디자인 이런 게 보통은
현실에 있는 물체를 가져다가 그거하고 맞게 비슷하게 프로그래밍
만들면은 그만큼 프로그래머가 이 개체라 그러죠.
물체를 이해하는데 도움이 되고 그래서 그거에 맞는 비애별을 좀
이렇게 로지컬하게 만들 수 있고 로지컬이라기보다는 이 개체로서는
좀 상식적으로 누가 들어와도 상식적으로 아 이게구나 이게 이거구나 볼
수 있는 그런 오브젝트를 만들 수 있고 그거에 대해서 그거를 기초로
프로그래밍을 하다보면은 좀 더 낫다 이런 개념이었어요.
제가 볼때 근데 도메인 드리븐 디자인도 되게 비슷해요.
원하는 바는 그래서 그거는 그렇고 그러면 이제 도메인 드리븐 디자인이
왜 이게 굳이 나왔을까 저는 그 생각을 되게 열심히 했거든요.
결국 OOP랑 되게 비슷한 개념인데.
왜 이거를 굳이 ddd라고 따로 뽑아서 이거를 굳이 하면서 이게 왜 좀
약간 그런 느낌이었어요.
신처럼 모시는 느낌이 제가 예전에 자바교신자 이런 얘기 비슷한 얘기
했잖아요.
무슨 특정 언어신자라고 해서 아니면 특정 OOP바라던가 이런 거에 대해서
저 정도로 이거를 광신하고 맹목 적으로 추종할 이유가 있나라고 생각이
들 정도로 좀 고민을 많이 했는데 제가 이제 그때 데이터베이스 프로그래머
많이 일해보니까 이해가 되더라고요 조금씩 왜냐하면 소프트웨어 엔지니어링
쪽을 하는 사람과 달리 DB쪽을 많이 다루는 엔지니어들은 세상의 모든
기본을 DB로 생각을 해요.
DB에 들어가는 관계형 DB에 들어가는 어떤 디노멀라이제이션인가 노멀라이제이션
이죠.
그걸 많이 하잖아요.
공통되는 거 분리해서 다른 테이블 넣고 포링키로 연결하는 이런 것들
그런 거를 하다보니까 모든 프로그래밍 을 그 데이터베이스 테이블에 맞게
만드는 거예요.
그러다 보니까 예를 들면 이제 OOP 제가 예전에 컴포넌트를 하는 게
좋다라는 식으로 얘기를 많이 했 잖아요.
그러면 컴포넌트 하나하나를 다른 개체로 보고 그거에 대해서 프로그래머
에 막 짜는 거예요.
이걸 하나로 보는 게 아니라 그래서 이 모든 걸 하나로 뭉쳤을 때 도메인
이라는 개념이 솔직히 나오거든요 .
그렇게 해서 이제 오브젝트 개념 이듯이 도메인 개념으로 만들기
위해 그거를 주장하기 위해 만들었던 게 DDD인 것 같고 그래서 오히려 DB쪽
프로그래머가 아니었던 전화체.
제 예전에 같이 동료들은 DDD를 몰랐던 이유가 아마 그게 이제
OOP라는 개념으로 이미 정립이 돼 있었고 데이터 스토리지를 어떻게
하는 거에 대해서 문제는 주로 메모리 에 있고 DB에서 성능을 높이기 위해
이걸 뭐 노멀라이저 하고 뭐 이렇게 이거 유지하고 이런 게 없었기 때문
이었던 것 같아요.
결과적으로 제가 느꼈던 거는 DDD나 OOP나 되게 추측하는 건 비슷한
데 DDD는 이제 DB 프로그래머 어찌 보면 소프트웨어 엔지니어링 쪽에
대한 개념이 잘 없었거나.
아니면 그냥 데이터 위주로 코딩을 했던 사람들을 위해 나왔던 OOP의
약간의 아류장 느낌이었고 그래서 이제 재밌는 게 그래서 저는 그걸
느끼면서 아 그래서 DDD가 OOP보다는 덜 알려진 거구나 생각이 들어서
DDD 책을 찾아봤어요.
왜냐하면 얼마나 책이 있을까 되게 유명하신 분이 하나 있어요.
DDD를 계속 권위있게 하시는 분 그분 책이 하나 있고 제가 아무리
DDD 책을 찾아봐도 아마존에서 그때 한 2년 전쯤인데 DDD 책으로 찾을 수 있는




책이 다섯 권이 안 됐어요 사실은.
그래서 그만큼 좀 뭐라 그럴까 아니 DDD를 책을 쓴 사람이 다섯 명이 안
됐던가 뭐 어쨌든 되게 적었어요.
10개도 안 돼.
보면서 아 DDD란 게 이게 어찌 보면은 약간 작은 작은 인간부지라고 하긴
어려운데 특정 인더스트리에서 여태까지 겪어 왔던 문제점을 해결하기
위해 OOP를 재포장해서 좀 내놓은 감이 있구나라는 생각이 들어서 약간은 좀.
사기치는 거 아닌가라는 생각도 들었고 왜냐면 내가 OOP를 한다 그러면
이제 사람들이 이미 다 읽는 거 네가 뭐 새로운 걸 얘기하는 거야
그러지만 새로운 단어 만들고 DDD야 이러면 대단한 거 하는구나라고
생각할 수 있거든요.
그래서 그렇게 하다가 뭐 이제 그래서 뭐 도메인 드리븐 디자인도 많이
하고 막 이랬는데 결과적으로 느낀 건 뭐였냐면은 도메인 드리븐
디자인에서 한 가지 정말 좋았던 점은 있어요.
그러니까.
OOP랑 다 비슷하고 뭐하고 막 이런 얘기를 떠나서 OOP 프로그래머도 잘
생각 안 하는 한 가지 좋은 점은 뭐였냐면은 도메인 드리븐 디자인은
변수 이름을 짓거나 테이블 이름을 짓거나 컬럼 이름을 지을 때 DB에서
거기 쓰는 용어들 있잖아요.
클래스 이름 지을 때도 그 용어를 실제 비즈니스에 쓰고 있는 용어
를 쓰려고 그래요.
예를 들어서 제가 만약에 물건을 받아다가 되파는 직업 쇼핑몰이나
이런 거라면 쇼핑몰에 물건을 제공하는 사람들을 두고.
두 가지로 부를 거예요.
하나가 서플라이어가 있어요.
그러니까 서플라이 서플라이가 제공한다니까 그리고 또 하나가 벤더라는
게 있어요.
벤더는 이제 보통 물건 제작하거나 뭐 매니펙쳐러도 있어.
세 가지 용어가 있는데 비즈니스 따라 그 나한테 그냥 물건 떼어다
주는 그러니까 도매상 소매상 떼어 다 주는 애들을 벤더라고 부르는
애들도 있고 서플라이어라고 부르는 애들도 있어요.
두 용어가 되게 혼재되거든요.
그래서 아 우리가 뭐 프로그래머 생각하기엔 이 용어가 맞아 라고
주장하기보다는.
그냥.
실제.
비즈니스.
쓰고 있는 용어를 써라.
그렇게 돼야 나중에 걔네들한테 또 추가적으로 리퀄먼트 개더링
하거나 뭐 스펙 뽑거나 이럴 때 용어가 통일돼서 되게 편하다라는
식으로 얘기를 했는데 맞는 얘기 같아요.
그래서 그 부분은 저도 되게 이렇게 그전에 그렇게 많이 생각하지 못
했던 거고 제가 비즈니스 담당하고 많이 얘기를 해 본 적도 없었고
그리고 프로그램하고 프로그램 용어 제대로 정립하고 말할 때만 이렇게
말하면 되지라는 생각도 있었는데 어찌 보면은.
그렇게 함으로 인해 이 백그라운드를 다 모르는 다른 프로그래머가 나중에
들어와서 그런 비즈니스 사람들하고 딜링할 때 그러니까 뭐 얘기하고
이럴 때 분명히 애로사항이 있을 거예요.
그래서 그런 부분은 좀 괜찮다고 생각을 했고 그리고 이제 도메인
드리븐 디자인에서 이제 oop랑 똑같 죠.
ooad랑 똑같이 디자인을 할 때 한 번에 디자인이 잘 나오지 않아요
.
당연히 여러 번 디자인해야 되고 뭐 패턴처럼 이렇게 이건 이렇게
했는데 저건 저렇게 해야 된다.가.
약간은 있는데 워낙 그 뭐랄까 순수 테크가 아니라 비즈니스를 서포트
하는 거면은 논리적으로 말이 안 되는 온갖 프로세스들이 있을 수밖에
없어요.
땜빵치기처럼 했던 거.
그거를 바꿀 수 없다면 결과적 으론 그거를 맞추기 위해 여러 번
디자인해야 되고 처음엔 마음에 안 되고 또 디자인 갈아엎고 이런
일도 있거든요.
그래서 심지어는 그 ddd 강사들 이나 뭐 책 쓴 사람도 몇 번이나
그래요.
이렇게 ddd를 한 번에 하긴 되게 어렵다.
여러 번 고시 생각해라.
.
그런 얘기를 해요.
그리고 ddd에서 또 한 가지 약간 마음에 들었던 거는 음 그거예요
.
그 뭐지 마음에 들었다기보다는 이제 oop 같은 경우는 상속이나 재활용
송을 위해서 공통된 데이터를 공유 하는 걸 되게 중요시하잖아요.
근데 oop 그러니까 ddd에서는 그것 보다는 도메인을 분리를 되게 중시
해요.
예를 들어서 우리가 커스터머가 있고 페이먼트가 있으면 이 커스터머
나 페이먼트에 둘 다 유저 정보가 들어갈 수밖에 없잖아요.
근데 유저 정보를 한 군데 두고 여기를 가져오는 방식이 아니라 테이블
을 두 개를 분리해서 여기도 유저가 있고 여기도 유저가 있으라 그래요
.
그래서 여기에서 쓰는 건 여기서만 쓰고 여기서 쓰는 건 여기서만 써라
.
뭐 약간 뭐라 그럴까 그 당시에는 조금 더 말이 됐던 것 같기도 해요
.
뭐 유저 정보 보호 차원도 있었고 기타 등등도 있었는데 요즘은 뭐라
그럴까.
.
약간 마이크로 서비스가 다시 뭐랄까.
부각을 한 것 같아요.

유저 정보를 받으면서 이런 테이블 분리가 좋긴 좋은데 유저 정보를
어차피 관리하는 마이크로 서비스를 따로 만들고 그 안에 모든 유저 정보
가 있다라는 그런 개념으로 가기 때문에 ddd에서 말하는 거랑 크게
다른 것 같진 않지만 ddd에서 말한 것보다는 약간 좀 한 서비스가 하나만
책임진다는 게 좀 더 강해지는 것 같아요.
그리고 페이먼트 할 때 거기 유저 정보를 뭐라 그럴까 듀플리켓
해놓으라는 얘기도 있지만 어떤 의미에서 이 유저가 정지된 유저
라면 결과적으로 이 서비스를 히트해서 다시 새로운 유저 정보를 받아와야
되거든요.
때때때로.
그래서 그런 거를 따지면 데이터의 결국에는 뭐라 그럴까 소유 라이트
풀 오너라고 그러는데 뭐라 그러 지 이 데이터가 정말 옳은지 틀린
지를 유일하게 검증할 수 있는 그런 서비스는 하나가 될 것 같고 정말
그 데이터가 템포러리하게 임시적으로 딴 데서 필요하다면 복사해서 쓸
수는 있겠죠.
.
그래서 ddd에서 말한 그런 부분도 .
.
그리고 마이크로 서비스가 대두되기 전에는 좀 많이 따라갔던 것 같은데
마이크로 서비스가 대두되면서 약간은 다시 조금 그렇게 심각하게 하지
않는 부분이 아닌가 싶어요.
그리고 이거는 분명히 ddd 쪽은 아닌데 ddd를 하는 사람들은 대부분이 서비스
하고 리포 개념을 쓰는 것 같아요 .
이제 뭐 그 서비스는 이제 우리 앱 에서 계속 앱이 아니라 프로그램
에서 호출해야 되는 서비스 같은 거 있죠.
그러니까 유저를 크리에이터 해라 유저를 정보를 달라 이런 거고
그거는 말 그대로 서비스만 담당을 하는 거고 실제 리포를 따로 분리
해서 이 리포는 저장만 관리하는 거예요 저장 그러니까 이 리포가
db가 됐든 파일이 됐든 리포를 여러 개 만들 수 있고 그걸 바꿔 끼는
것만으로도 서비스와 리포는 분리 될 수 있기 때문에 따로 갈 수 있다
라는 개념으로 서비스 리포를 분리 하는 패턴이 되게 많은데 마이크로
서비스 가는 개념에서는.
.
.
그렇게까지 할 일은 많지 않아요 .
왜냐하면 마이크로 서비스 자체가 서비스 하나 굉장히 많은 일을 하지
도 않기 때문에 서비스 하나 리포 하나의 개념이 되게 많고 그렇기
때문에 그거를 서비스 리포를 가르 다 보면 오히려 생각 이상으로 되게
복잡하게 가는 경우가 많아요.
전에 말했던 인터페이스의 남용 에 대해서 얘기했던 거랑 비슷한
것처럼 어차피 인플리멘테이션 하는데 왜 인터페이스 만드냐 거의
그 개념으로 갈 가능성이 있기 때문에 마이크로 서비스에서는 오히려 리포
를 곧바로 히트하는 경우가 되게 많아요.
서비스 레벨에서 그런데 도메인 드리븐 디자인 만의 얘기도 아니지만
서비스 리포에서 하나 잘했던 건 뭐냐면 그 유닛 오브 워크라는
개념이 있어요.
예를 들어서 우리가 db가 여러 개 가 있으면 어떤 오퍼레이션을 해야
할 때 이 db에 뭐 썼다가 이걸로 저게 옮겼다가 뭐 했다가 뭐 했다가
저장하면 끝인데 근데 문제는 두 단계까지 갔는데 세 단계에서 에라
가 나서 이걸 저장을 못 했어.
그럼 처음 두 단계도 뻑이 나야 정상 이거든요.
그럼 이걸 하나로 묶어갖고 이게 사실은 한 번에 끝나야 되는 아토믹
오퍼레이션 같은 거니까 망하면 같이 망해라 라는 개념의 이제 뭐라
그럴까 어찌 보면 exception safe 프로그래밍과 되게 비슷한 개념이에요.
그래서 그거를 많이 추구를 했고 솔직히 굉장히 좋은 아이디어예요

그래서 그 부분에 대해서는 높게 사는데 생각보다 프로그래밍 적으로
이제 뭐 그거를 되게 간단하게 할 수 있는 부분은.
없어요 유일하게 할 수 있는 부분은 데이터베이스 트랜잭션 쓰는 방법
이에요.
그래서 그게 그나마 제일 간단한 건데 정확히 얘기하면 뭐냐면 제가
예전에 exception safe 프로그래밍을 되게 하기 힘들다 그랬잖아요 사실은
생각보다 근데 이걸 아까 db를 아마 도입하면은 제가 되게 편해진다
고 얘기를 했었던 거 같아요.
뭐냐면 트랜잭션 시작한 다음에 db 오퍼레이션을 막 해요.
그러고 마지막에 커밋을 하는 거야 .
그러면 이게 한꺼번에 쭉 커밋이 되거든 요.
근데 그게 아니라 중간에 페일 하면은 그냥 롤백을 하면 돼요.
그러면 여태까지 했던 것들을 다 롤백시켜줘요.
db에서.
그래서 db라는 게 어찌 보면은 현조라는 기술 중에 가장 튼튼한
기술 정말 제가 현조라는 테크 기술을 봤을 때 가장 안 깨지는 소프트웨어
피스를 제가 고르라면 db를 골라 요.
가장 튼실하게 만들었고 몇 십 년 동안 이미 경험으로 버틴 그런 제품
이고.
근데 딴 거는 다 깨질지 몰라도 db는 가장 늦게 깨진다고 얘기하거든
요.
늦게 뻑이 난다고.
그래서 그럴 정도로 db는 솔직한 얘기로 그만큼 잘 만들어 놓은 거고
트랜잭션 개념이 뚜렷하고.
그래서 오히려 데이터베이스 쪽에 저장하는 프로그래머들은 노스 이퀄
말고 관계형 이 트랜잭션 개념 때문에 exception safe한 프로그램은 굉장히
짜기가 쉬워져요.
그래서 그거는 되게 좋은 거예요 사실은.
그리고 제 기억으로는 wcf도 이런 식으로 많이 만들었었고 wcf가 사실은
현존하는 모든 언어의 패러다임을 뭐라 그럴까 갈아엎을 만한 새로운
언어였거든요.
근데 뭐 이제 비즈니스적인 문제 때문에 마소가 열심히 azure를 밀기
때문에 wcf를 안 밀고 있는 거 같은데 그래서 죽을 것 같긴 한데 좀 아쉬운
부분 중에 하나죠.
그래서 근데 중요한 건 이런 트랜잭션 기반으로 뭔가를 하는 게 정말 아까
말했던.
저런 두 가지를 한번 말해봤는데 이 서비스가 기존 서비스 리포 패턴
이 있을 수밖에 없거든요.
하나의 도메인을 관리하는 서버 자체가 꽤 많은 일을 하기 때문에
.
그래서 그때는 이런 거를 많이 했고 그게 이해가 되고 정말 올바른
방법이었어요.
근데 마이크로 서비스로 가면 갈수록 이 서비스가 해야 될 일은 굉장히
단순해져요.
그래서 이 서비스 하나가 할 때 결국엔 데이터를 저장하는 거에 대한
이제.
그러니까 결국 exception safe.
db가 들어간 마이크로 서비스에서는.
exception이 났을 때 뭔가 상태가 이상하다는 거는
변수라기보다는 결과적으로는 데이터의 문제거든요.
데이터베이스에 들어있는 데이터.
그럼 얘가 어느 순간에 뻑이 나도
문제가 없을 정도로 고치려면
어떻게 하냐라는 질문이 나오잖아요.
생각보다 마이크로서비스에서는
데이터의 상태가 바뀌는 게 기껏 해봐야
한 두세 번 많아봐야
마이크로서비스 한 번 호출 들어올 때마다
그렇기 때문에 거기서는 차라리
DB 트랜잭션이 없을지라도
익셉션 세이프 프로그래밍을 하는 게
그렇게 어렵지는 않아요.
그리고 마이크로서비스는 기본적으로
되게 깊이가 낮죠.
함수 호출의 깊이가.
처음 리퀘스트 들어와서
서비스 리포 패턴을 만들더라도
이제 밸리데이션하고 서비스 호출하고
그게 리포 호출하는 게 끝이거든.
근데 서비스 리포 그냥 하나로 뭉쳐버려서
그냥 곧바로 리포로 접근하더라도
그러면 밸리데이션 한 다음에
리포 접근해서 로직 한 두세 개
하고 끝나면 되기 때문에
그
DB에 들어가는 스테이터스와
그리고 이제 DB에 추가할 때
유니크 키가 있잖아요.
그 유니크 키의 컨스트레인트만
컨스트레인이라고 하죠?
그 뭐라고 하지? 제약?
똑같은 유니크 키가 두 개 못 들어간다는 거?
그 컨스트레인만 잘 잡는 것만으로도
익셉션
그러니까 추가하는 거에 대한
익셉션 동시
뭐랄까?
중복 추가는 막을 수 있고
그 다음에 그 상태가 변하는 것도
상태가 변하는 것도
변하는 플로우가 언제나 하나면
스테이트 머신 가듯이
익셉션 세이브 프로그래밍을 할 수가 있더라고요.
DB 트랜잭션 없이도
그래서 거기까지 이제 말하고 싶었어요.
그래서 오늘 한 얘기가 되게 긴데
도메인 드리븐 디자인이
의미는 있는데
그렇게
역사적으로도 이미 도메인 드리븐이
처음 제가 나왔던 게
2000년대가 2002년 정도라고 생각을 하거든요.
이미 14년이 지날 정도로
생각보다
그거에 관련된
뭐랄까?
책이나 이런 게 많지가 않고
그리고
오히려 제가 볼 때는
데이터베이스 프로그램에 관한 컨퍼런스에서
열심히 발표만 하고 있는 것 같고
그리고 그 이제
정점도 약간은 죽어가고 있는 것 같아요.
마이크로서비스가 대두가 되면서
물론 마이크로서비스도
마이크로서비스 나름에 굉장히 단점이 많아요.
사실은
근데 클라우드를 꽂고 쓰는 사람들은
마이크로서비스가 말이 되는 게
점점 맞다는 거지
그래서
정말 마이크로서비스가 아니라면
도메인 드리븐 디자인이
데이터베이스 프로그램의 생각 전환에는
좋다고 생각해요.
데이터베이스에서만 생각하는 것보다는
허나 제가 볼 때는
OOP의 개념을 그냥 리브랜딩을 한 게 좀 가깝고
그리고 아까 말했듯이
도메인에 쓰는 용어를 써라는 건
되게 좋게 보고요.
그리고
굳이 도메인 드리븐 디자인의 얘기는 아니었지만
DB 트랜잭션을 이용해서
이제 익셉션 세이브 프로그래밍
처럼?
하는 거 되게 좋다고 생각을 한다.
음...
그 정도로
오늘의 그냥
여태까지 그냥 생각해 왔던 것들을
브레인 텀프를
한 걸로 끝내죠.
아 20분 떠들었다.
보프였습니다.
