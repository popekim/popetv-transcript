예 포프입니다
예전에 정확히 제목이 뭐였는지 기억 안 나는데
그 인터페이스를 만드는 거에 대해서 되게 뭐라고 했던 적이 한 번 있어요
그래서 그때 아마 얘기했던 거는 이제 인터페이스를 만들고
만드는 이유의 기본은 폴리모피즘 때문이다
다용성 때문이다
근데 다용성이 아니라 인터페이스 하나에
임플리멘테이션 하나인 경우에 왜 인터페이스를 만드냐
그런 경험을 너무 많이 요즘 봤다
그때 웹회사에 있을 때였죠
그러면서 했던 얘기가 네가 임플리멘테이션 두 번째 거를 추가할 때
당장 추가할 계획이 없는데 나중에 추가할 때
그 두 번째 게 존재하는지도 몰랐는데
네가 처음부터 인터페이스를 제대로 만들 수 있을 거 같냐
어차피 인터페이스, 임플리멘테이션 둘 다 만들게 된다
다 고치게 된다
그럼 굳이 처음부터 인터페이스 만들었던 이유가 뭐냐
라는 얘기를 한 적이 있어요
그러면서 아마 그때
아마 비디오 제목이
지금 대충 생각이 나는데
쓸데없는 인터페이스라던가 이런 얘기였던 거 같아요
근데 인터페이스가 존재해야 될 경우는 분명히 있어요
다용성을 유지하기 위해서
그것은 주로라고 보는데
이제 웹 쪽 기반으로 시작해서
아니면 최근에 익스트림 프로그래밍 쪽 기반으로 시작해서
모든 걸 인터페이스화 시키는 경우가 많았거든요
그래서 그 두 가지
인터페이스화를 시켰던 이유 중에 가장 큰 두 가지가
다용성이 목적이 아니라
그냥
그냥
dependency injection을 하기 위해서
근데 dependency injection을 하는데
어차피 임플리멘테이션 하나야
그거하고
두 번째가 이제 유닛 테스트를 하기 위해서
그때 제가 이게 굉장히 안티패턴이라고 얘기를 했던 거 같고
뭐 유닛 테스트가 이제 굉장히 중요하게 여기는 이제
그런.. 그런 뭐랄까
종교라고 하긴 또 애매하고
그런 순열주의자들이 있긴 있어요 사실은
그게 한동안 뭐..
지난 몇 년 정도 전.. 요즘은 많이 줄어든 거 같은데
뭐 익스트림 프로그래밍이라던가 뭐 고쪽 개념 뭐..
그 테스트 만들어 놓고 유닛 테스트 패스하게 만드는 그런 부분
이제 얘기.. 그런 쪽의 진영인데
그 부분에 대해서 제가 한때 뭐라고 했죠
그게 사실은 버그를 잡는데 크게 도움이 안 된다고 그렇게 생각보다
그 할 시간이 있으면 차라리 엔드투엔드 테스트 만들라고
그런 얘기를 하면서 제가 했던 얘기가
그 유닛 테스트 하나를 하기 위해서는
뭐 DI는 별개로 하고 DI는 뭐 별개로 하고
유닛 테스트를 하기 위해서 인터페이스 떡칠한다는 거 자체가 말이 안 되지 않냐
이거는 무슨 테스트를 위해서 라이브 코드를 바꾸고
그리고 코드 유지 보수가 훨씬 더 힘들어지는 케이스인데
말이 안 되지 않냐라는 얘기를 많이 했어요
그러면서 제가 했던 얘기가
유닛 테스트가 이런 거는 오히려 인터페이스를 건들지 않고
될 정도가 된다는 얘기를 되게 했던 거 같거든요?
근데 그 뒤에 이제 이거는 어디서 찾았냐면은
그 스택 워플로에 찾았던가 아니면은 제가 마이크로소프트 MVP에요
거기서 아마 파트너..
3rd party 파트너가 저희한테 공짜로 주는 라이센스가 있거든요?
그걸 보던가 둘 중에 하나였던 거 같은데
그 서비스 중에 유닛 테스트 프레임워크 중에 C#에서만 되는 거예요 닷넷에서만
타입 목이라고 있어요
T Y P E M O C K 타입 목인데
예매가 하는 일이 그거라는 걸 제가 읽었어요
아직 제가 써보지 못했어요
언제 시간되면 써봐야지 싶은데
문제는 제가 아무리 이걸 써봐야
일단 회사 라이센스를 쓰려면 돈을 내고 써야 되고
저 개인적으로만 쓸 수 있는 건데
회사에서 곧바로 쓸 수 있는 게 아니니까 당장은
내가 필요하지도 않고
아직 보진 못했어요
대충 문서만 읽어본 게 전부인데
이 문서가 사실이라면은
얘네는 코드 하나도 바꾸지 않고 유닛 테스트 짤 수 있다고 얘기를 해요
그러니까 지금 있는 코드에서 무슨 클래스나 이런 게 있겠죠?
그러면은 그거를 그냥 뭐 인터페이스 만들어갖고
Merk Object 만들어갖고 돌려놓고 이런 게 아니라
현재 존재하는 클래스 구조에서
이거를 곧바로 Merking Object를 만들 수 있다는 식으로 얘기를 해요
뭐 닷넷이라는 제안이 있고
뭐 그런 거 보면은 컴파일 도중에 뭔가 어떤 일을 해갖고 분명히
그런 일을 만들 수는 있겠다고 생각해요
그래서 그거를 보고 나서 느꼈던 게 뭐냐면
아 이게 정말 제대로 된 유닛 테스트가 되겠구나
정말 유닛 테스트가 필요한 경우는 있어요
근데 지금 우리가 쓰고 있는 웹 쪽에서 말하는 유닛 테스트 자체가
좀 말이 안 되는 거 같다고 생각을 하는데
뭐 그 전에 얘기했지만
결과적으로는 테스트를 짜는 사람과 프로그램 짜는 사람은 별도여야 되는데
뭐 그 익스트림 프로그램 쪽에서 했던 얘기는 주로
프로그래머가 테스트를 짜놓고
뭐 거기다 이제 이거 저거 한다는 식으로 많이 해놔서
실제 많은 회사에서 그러고 있고
그분이 문제가 있었는데
정필요한 유닛 테스트는 있죠 당연히
근데 그게 100% 커버리지 이건 말이 안 된다고 전 보고
80% 커버리지 이건 말이 안 되고
그래서 그런 유닛 테스트가 필요할 때
인터페이스 안 만들어서 할 수 있는 방법이 나왔다는 걸 듣고 나서
이게 누가 이 회사를 운영하는지도 모르겠고
누가 이걸 만들었는지도 모르겠지만
제정신 박힌 애가 있었구나 그 생각을 했어요
그리고 이게 아마
뭐 소스코드가 있으면 불가능한 건 사실 없죠
소스코드 바꿔 컴파일하면 되는 거니까
근데 이제 닷넷이라는 거 자체가 ms, il 수준으로 그냥 컴파일만 하는 거기 때문에
그거를 바꿔놓는 것만으로 당연히 비밀명 바꿀 수 있을 거고
그래서 그런 식으로 이제 만들어서 가능하구나
그러면 닷넷에서 이게 가능했다면
분명히 다른 언어도 가능해야겠구나 라는 생각을 했는데
제가 뭐 다른 언어를 제대로 보지는 않았지만
이런 게 있다는 얘기는 들은 적이 별로 없어요
그냥 유닛 테스트 프레임워크 있던 것들
인터페이스 떡칠해 갖고 해야 되는 것들
그렇게 하라고만 얘기 들었고 그게 올바른 방법이야
인터페이스 근데 인터페이스하고 임플멘테이션이 하나씩이면
그걸 만들면 말이 안 되지 않아?
아 그래도 유닛 테스트가 더 중요해
이런 식으로 이상하게 갔던 사람도 있죠
그래서 다행이라고 생각을 하고
기회가 되면 저도 언젠가는 한번 테스트를 해볼 생각이에요
타임머기라고
혹시라도 해보신 분이 있다면 좀 대답을 좀 알려줬으면 좋겠어요
어떤 문제가 있는지
문서상으로는 정말 대단해 보여
그리고 사람들이 써본 사람도 되게 좋다고 말을 해
근데 제가 안 써봐서 모르는 거죠
과연 어떤 문제가 있는지는
뭐 예전에 그 뭐지
코드 컨트랙트인가?
그 닷넷에 들어간 거 있어요
코드 컨트랙트라고 이제
약간 좀 컴파일할 때 이상한 짓 해야 되는 거 있는데
그것도 문서상으로는 정말 좋았거든요
근데 써보기 시작하면서 이런저런 문제를 봤죠
그래서 아
지금 회사에서 안 쓰고 있는데 그래서 그 부분을
그런 것처럼
뭔가 문제가 있을 수도 있다는 생각을 해요
근데 코드 컨트랙트는 공짜 소프트웨어였고
타임머그는 돈 받는 소프트웨어니까
그것보다는 뭔가 제대로 하지 않을까 그런 생각도 하지만
그래서
타임머그 아이솔레이터가 아닐까 생각을 하는데
정확히 제품 이름은 모르겠고
타임머그 닷컴 가보면 있고요
혹시라도 써보신 분 있으면 알려주시면 좋겠다는 생각을 해요
유니테스트 얘기가 나왔으니까 말인데
이제 유니테스트가 이제 자바나 씨샵에서
원활하지 못했던 이유는
이게 타입 언어기 때문에 그런 것 같기도 해요
일단 컴파일 해야 되는 언어고
타입 언어를 그냥 컴파일 해야 되는 언어
그래서 함수 이렇게 뭐 시그네처라던가 이런 게
컴파일 시에 알려져 있어야 되니까
그거를 갑자기 그 함수를 하나 뜯어 바꿔가지고
유니테스트라는 거 자체가 되게 어려운 거죠
실행 도중에
근데 그에 비해 제가 최근에 노드JS를 좀 했어요
그냥
뭐 뭐
이상한 뭐 엄청난 프로젝트를 만든 건 아니고
개인적으로 해야 될 일이 있어서
강의 자료 준비할 때도 좀 써야 됐었고
노드JS를 여기저기 좀 만졌는데
그러면서 유니테스트도 조금 봤고
근데 이제 제가 자바스크립트를 별로 좋은 언어라고 보진 않았어요 여태까지
근데 그 와중에서도 자바스크립트의 장점이 하나 있다면
자바스크립트는 모든 걸 그냥 함수로 패스를 해버리잖아요
이벤트 방식이라고 얘기도 하지만 결과적으로는
함수를 패스를 하는 건데
그 함수 자체가 컴파일된 함수도 아니고 그냥 함수 코드잖아요
그래서 이게 말하는 게 뭐냐면
인터페이스라는 개념 자체가 필요가 없다는 거예요
함수의 그 시그네처 모양만 똑같다면은
인터페이스로 강요하지 않아도
그냥 내가 원래 실행되는 임플리멘테이션이 있었는데
지금 유니테스트를 하고 싶어
그럼 유니테스트용 함수를 집어넣으면은
그 유니테스트가 도는 거야
그리고 필요한 거 머킹으로 빼버리고 그러면
그래서 보면서
아
자바스크립트가 유니테스트에서 정말 좋은 거구나
이걸 하려면
그래서 요즘 그 자바스크립트 기반의 유니테스트 프레임워크가 꽤 많잖아요
뭐 모카도 있고
무슨 뭐 나이트와치도 있고
그런 것들을 보면서 아
이 언어가 뭐랄까
좀 까탈스럽지 못한 언어잖아요
너무 느슨한 언어이기 때문에 오히려 이런 장점은 있구나를 봤어요
그래서 아 그래 자바스크립트 장점도 있구나
유니테스트에서는 자바스크립트가 정말 좋겠구나
똑같은 개념으로
함수형 프로그램도 되게 비슷하지 않을까 생각은 했어요
근데 이제 뭐 함수형 프로그램이 스크립트 방식으로 도냐
그러니까 실행 중에 코드 갖다 컴파일 하냐
아니면 미리 컴파일 하냐 두 가지 다른 방식이 있겠죠 이미
그래서 반드시 그거랑 접목시켜 같은 거라고 볼 수는 없지만
자바스크립트 같이 실행 중에 그 함수 그 뭐 텍스트 파일이죠
별가적으로는
그거를 evaluation 해갖고
실행시키는 개념의 함수형 프로그램이 있다면
자바스크립트가 했던 똑같은 유니테스트 장점도
함수형 프로그램에 있겠다라는 생각을 했어요
그래서 근데 뭐
결과적으로는 제가 뭐 유니테스트의 큰 추종자가 아니기 때문에
뭐 정말 중요한 몇 가지 이런 것들을 하자주의지
그 외에 굉장히 많은 것들은 오토메이트 테스팅이라던가
엔드투엔드 테스팅으로 가연되라고 믿는 주의이기 때문에
그거 하나만으로 이 언어로 내가 옹겹하겠다라는 생각은 들진 않을 것 같아요
근데 그냥 오늘 하고 싶었던 얘기는
이제 타임머그 이 자체가 굉장히 뛰어난 라이브러리인지는 모르겠지만
이게 정말 좋은 라이브러리라면
이게 사실은 유니테스트를 쓰고 싶을 때 써야 되는 방법인 것 같고요
왜냐면 쓸데없이 오버 아키텍처 할 필요가 없잖아
인터페이스 모두 다 만들 필요도 없고 있는 코드 뜯어고쳐갖고 이상한 일 할 일도 없고
아니요 타임머그는 그냥
타임머그 자체가 아직은 완성이 안 됐더라도
이거는 제가 예측을 하기는 아직 어려운데
제 생각에는 이게 올바른 방법이라고 생각을 해요
이렇게 언어적으로 지원을 해주든 아니면 타임머그처럼
이렇게 뭐 인터미디언 랭귀지 수준에서 뭔가를 이상한 짓을 해갖고
끼워 맞출 수 있는 그런 라이브러리를 만드는 거든 간에
이 방향으로 가야만 테스팅 라이트가 편해진다는 거죠
그리고 심지어는 이게 마이크로소프트 비쥬얼 스튜디오 아마 엔터프라이즈 버전이었던
거 같은데 자동으로 유니테스트를 만들어주는 그런 기능도 만들고 있었어요
그게 최종적으로 나왔는지는 모르겠지만
니 클래스가 있으면 이 클래스 함수를 내가 보고 알아서 유니테스트를 만들어 줄게
라는 걸 열심히 개발 중이긴 했어요
나왔는지는 모르겠어요
그리고 심지어는 지금 지원하는 거는 마이크로소프트에 또 지원하는 거는
이 유니테스트를 미리 만들어 놨잖아요
그러면은 실행 도중에
웹서버 보통 닷넷이나 닷넷코어 쪽인 거 같은데
ASP닷넷이나 ASP닷넷코어
실행 도중에 자기네가 알아서 유니테스트를 실행한 다음에
이게 패스인지 안 했는지 알려주는 그런 기능이 아마 들어왔다고 저는 들은 거 같아요
그러면 유니테스트 보통 하면 컴파일하고 따로 실행하지만
내가 디버깅 중에도 실행이 되면서 보여준다는 얘기죠
비슷한 기능으로는 또 제가 웹서버를 로컬에서 돌리고 있을 때
이런 데서 테스트할 때 거기서 exception이 났으면
함수 위에다 이제
아이콘을 보여주면서 exception이 몇 번 났어
이런 것도 보여주긴 하거든요 지금
유니테스트 돌리는 것도 거의 같은 개념일 테니까
그럴 거 같긴 해요
근데 이 굉장히 많이 손으로 해야 됐던 그 많은 일들이
툴로 해결이 되고 있다는 얘기를 하고 싶은 거예요
그리고 이 컴퓨터 업계가 대부분 그래요
새로운 아이디어가 나왔을 때 당연히 언어적인 지원도 적고
뭐 이것저것 적기 때문에 사람들은 손코딩을 많이 해야 돼요
마이크로서비스도 당장 그런 모습이고
근데 이게 어느 정도 정립이 돼가는 프로세스면
이렇게 뭐라 그럴까
프로그래머 플로우
그러니까 개발 플로우를 되게 잘 보는 회사들이
그걸 툴로 제대로 만들기 시작을 해요
그게 이제 당연히 마이크로소프트가 개발 툴이 뛰어난 이유가 그런 부분이고
뭐 다른 거는 허접한 것도 있지만
마이크로소프트 개발 툴 하나만은 뭐 최운 거 같아요 아직도
그래서 그런 식으로 들어오게 되면은 이제 여태까지 손코딩하던 사람들이
손코딩하면서 아 난 이런 거 할 줄 알아라고 했던 부분이
이제 사라지는 거죠
누구나 다 가져가는 거니까
그럼 이제 처음에 이 분야를 창시하고 정말 뭔가
선구적으로 끌고 왔던 사람들은 그만큼 많은 스트릿 크레딧을 얻을 거고
중간에서 그냥 따라가면서 아 이게 맞는 거래라고 손코딩했던 사람들은
어찌 보면은 뭐 실제 잘하는 사람들도 있지만
굉장히 많은 사람이 시간 낭비를 되게 많이 했을 거 같아요 그냥
그래서 어떤 제품이든 얼리 어댑터도 있지만
가장 혜택을 많이 보는 건 한 중간 어댑터가 아닐까
그래서 전 그 생각을 하고 있고
그래서 아마 유닛 테스트라던가 그런 것도 점점 그쪽으로 옮겨가기 시작을 할
예측은 못할 거 옮겨가는 게 맞다고 봐요
이런 식으로 좀 자동화가 되고 내가 쓸데 없는 잡코딩 안 해도 되고
마이크로 서비스도 이제 넷플릭스가 굉장히 크게 만들었던 거 같은데
걔네들은 굉장히 많은 손코딩 했거든요
그거 회사에서 하려면 규모 웬만큼 크지 않는 사람
정말 힘들어요
그리고 오히려 속도가 늦게 나오는 경우가 더 많아요
왜냐면 여러 서버가 얘기를 해야 되니까
스케일이 그만큼 안 되는데 마이크로 서비스 한다는 자체가 위험한 일이기도 하죠
근데 예전에 WCF가 잠시 시작을 했다가
지금은 WCF가 점점 외면받고 있으니까 그 일이 안 일어나고 있지만
이런 것도 결과적으로 언어적인 측면이라던가
다른 프레임워크적인 측면에서 점점 많아질 일일 거 같아요
아니면은 지금 이미
Azure Function이라던가 Amazon Lambda 이런 부분에서도 이거를 지원하지만
아직은 완성된 상태는 아니고
그것도 이제 점점 이런 새로운 패러다임을 지원하는 쪽으로
툴 지원 자체가 점점 잘 되면은
개발자는 개발에 집중할 수 있는 거죠
설치가 아니라
그렇게 생각을 해요
뭐 얘기하다 여기까지 왔지?
결과적으로는 타임머크
혹시 써보신 분이 있으면 알려주세요
제가 너무 궁금해요
그리고 유닛 테스트
이걸 처음 보는 비디오시면 유닛 테스트에 대해서
제 다른 비디오들 있으니까
그 유닛 테스트 한번 찾아보시길 바래요
제가 하려고 했던 말이 뭔지
그 정도면 될 거 같고
예 포프였습니다
