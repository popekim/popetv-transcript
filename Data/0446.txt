예 안녕하세요 포프입니다
오늘도 약간 또 마이크로소프트 쪽의 얘기를 할 것 같아요
마이크로소프트 개발툴
아 아 마이크로소프트
아 올해도 MVP 됐어요 MS MVP
뭐 포프TV에 뷰 수가 많아서 그 덕에 MS MVP를 계속 받고 있고
뭐 제가 계속 쓰는 제품이나 테크 스택 쪽도 이제 MS 쪽을 되게 많이 쓰니까
저로서는 뭐 좋고 그쪽도 이제 제가 홍보를 많이 해 준다고 생각하고
뭐 테크 업계에 많은 기여를 하고 있다고 믿으면 뭐 저도 고마운 거고
그래서 어쨌든 열심히 하고 있죠
음 근데 최근에 이제 전혀 MS MVP랑 상관이 없고
오늘 하는 얘기는 최근에 비주얼 스튜디오 이제 막 블로그를 보다가
아 블로그를 본 게 아니구나
제 구글폰이 알아서 야 이거 네가 관심있어 할 것 같아 라고 생각하고 뉴스를 던져줬어요
제가 요즘 구글이 그렇게 뉴스 잘 주는 것 때문에
개발자들 보고는
저는 구글폰을 더 쓰라고 추천을 많이 하거든요
제가 찾아본 그런 검색 결과에 따라 저에게 필요한 최신 정보들만 잘 보여줘요
그래서 이제 뉴스를 제가 쓸데없는 뉴스를 보느라 시간이 줄어들고
정말 필요한 뉴스를 볼 수 있는 데 도움이 되기 때문에
구글 NOW 그거 기능이죠 그래서 그걸 많이 추천을 해요
그리고 정말 제 주변 개발자들은 다 구글을 거의 다 쓰고 있고
어쨌든 거기서 추천해서 읽었어요
와 비주얼 스튜디오에서 유니티 빌드가 들어왔다
그래서 내가 이거 어떻게 하는 거예요
그래서 어 드디어 들어왔네 라는 생각을 했죠
예전에 제가 비디오에서 c++ 빌드 속도 흑마법이란 비디오를 되게 오래전에 만든 적이 있어요
그러면서 이제 c++가 왜 빌드 속도가 느릴 수밖에 없는지
오래된 시스템이고 리플렉션 시스템이 없어서 타입 정보가 없어서 그렇다
그럼 이걸 하기 위해서 옛날에 뭐 헤더 파일 cpp 파일을 나눈 거는 그냥 텍스트를 복붙해가지고

해야 되는데 헤더 파일이 있어야만 어느 offset에서 어느 함수를 호출할 수 있지 않을까
그런 거를 요즘 같은 경우에는 알아서 import를 하면 클래스에서 미리 다
그런 타입 정보 만들어 놨다가 컴파일러 상에서 확인해서만 하면 되는 건데
예전엔 그렇게 컴파일러가 빠를 수도 없었고 좋지도 않았고 그래서 복붙으로 가기 때문에 그런 거다
뭐 이거를 고치기 위해 모듈 시스템이 나오고 있지만 좀 더 지켜보자 라는 얘기를 했는데
근데 뭐 뭐가 되든 어쨌든 간에 최고의 방식은 유니티 빌드다 라고 얘기를 했어요
예전에 한번 넥슨 컨퍼런스에서 어떤 분이 발표하신 자료도 있고
실제 제가 2005년에서도 2005년에 콘솔 게임 만들 때도 똑같이 썼던 방법이에요
그래서 뭐 그 개념은 그 비디오를 보셔도 되고 아니 블로그를 보셔도 될 것 같은데
그 다음에 이제 이런 유니티 빌드를 설정하기 위해서는
약간 손 작업이 많이 들어가서
들어가요 뭐 텍스트 파일에 모든 파일을 내가 적어두고
cpp 파일을 적어두고 거기서 자동으로 프로젝트 파일을 생성하는 툴을 만든다던가
비주얼 스튜디오 프로젝트 파일이요 아니면은 뭐 그걸 비주얼 스튜디오 프로젝트에서
파일 하나하나마다 한 땀 한 땀 한다던가 이런 귀찮은 일들이 있었는데
이제 제가 그 비디오에서 말을 했는지 아닌지 모르겠지만
그 다음에 열심히 봤던 게 C메이크 같은 것도 있었고 크로스 플랫폼 프로젝트 만들어주는
그리고
뭐 이제
다양한 IDE 툴들이 있었잖아요
그러다가 뭐 인크레더 빌드 같이 이제 분산해주는 것도 봤다가
마지막에 봤던 게 사실 패스트 빌드라는 그런 툴셋이었어요
오픈소스가 아직도 존재하는 것 같은데
그때 이제 얘네가 했던 것 중에 하나가 뭐였냐면은
일단 빌드 속도가 빠르고
그리고 이제 유니티 빌드를 해줄 수가 있다라는 식으로 얘기를 해줬어요
근데 유니티 빌드를 하려면은 비주얼 스튜디오 프로젝트를 가지고는 못한다라고 또 얘기를 했어요
그러니까 자체적으로 내가 따로 뭐 메이커가 있다라는 식으로 얘기를 했어요
리크리스트 파일 같은 거 만들어 두면 지네가 알아서 해주는 이런 식의 방식이었고
기존에 있는 비주얼 스튜디오 프로젝트를 가져다가 못 바꿔준다 그랬을 때
제가 생각해 봤을 때
저게 안 될 이유는 없는데 라는 생각을 많이 했어요
솔직히 하려면 할 수 있는 기능이거든요
근데 이제 그 지원을 하기에 이제 인력이 모자랐거나 뭐 이런 게 전부였겠죠
그래서 이렇게 둘러보다가
이제 그때 손을 넣고 그때 제가 아마 msmbp 컨퍼런스 갔을 때
그 비주얼 스튜디오 프로젝트를 갖다 놓았거든요?
그 비주얼 스튜디오 팀 애들이 있길래 이 기능을 좀 놓아달라고 얘기를 했던 거 같은데 말로만
그때는 이제 뭐 그게 별로 중요해라고 넘어간 친구가 있었어요
그래서 그거 그때 반영이 된 건 아니지만
그때 제가 생각을 했던 게 뭐냐면
아니 이거는 툴에서 서포트를 해야 되는 거다
내가 툴에 들어가서 그냥 이 프로젝트에서 야 유니티 빌드로 해줘
그럼 지가 알아서 잡아다가 다 유니티 빌드로 꾸어주고
아니면 야 파일랑 하나하나씩 빌드할게 원래 그 트래디셔널하게
그렇게 하면은 이제 그게 또 가져다가 해줘야 되는
어쩌면 툴의 기능이죠 그냥 체크박스 온하고 오프하면 그것 따라 빌드가 달라져야 하는
그게 가장 최고의 워크플로우라고 생각을 했어요
왜 쓸데없이 내가 유니티 빌드를 만들려고 손 작업해야 되고
여기에 막 뭐 시간 낭비해야 되고 이런 생각이 있는 거죠
이게 뭐 프로그래머 100명 200명 되는 예전에 제가 일했던 것처럼
그런 데서는 한번 툴 만들어 놓고 하면은 훨씬 빌드 속도에서
뭐 2배 3배 10배까지도 세이브를 하니까 그러는 건데
정말 팀이 5명 3명인데

3명 4명 될 때는 그거 하기가 너무 힘든 거예요 너무 귀찮고
그래서 아 이거 차라리 툴적으로 서포터가 돼야 되는 건데
뭐 인크레더 빌드 이런 거 솔직한 얘기로
뭐 약간은 빚 좋은 개살구고 유니티 빌드로만 해도 굉장히 빠르고
유니티 빌드 해갖고 차라리 거기 그거에다 인크레더 빌드를 꼽으면
훨씬 더 빠르거든요 그래서 이런 방식이 있는데
그거 안 해주는 걸 보면서 아 이거 될까라고 하다가
이제 비주얼 스튜디오도 C샵에 치중을 하고
C++에 치중을 안 하고
안 했잖아요 한동안 그래서 안 되겠지 하고 있다가
갑자기 그 블로그에서 유니티 빌드를 켰다는 거예요
그래서 보니까 실제 켜 있더라고요
근데 약간은 아직은 익스페리먼탈 기능?
그런 기능으로 들어가 있어서
약간 키기가 그렇게 아주 간편한 거 같지는 않은데
어쨌든 기능은 있어요
BC 프로젝트겠지 BCX 프로젝트인가 요즘은
그 파일 안에서 이제 뭐 키우고 끌 수가 있고
그리고 뭐 당연히 실험적인 기능이니까 100% 작동이고요
100% 작동은 하지 않을 거라고 생각을 해요
그리고 지금까지 제가 이제 유니티 빌드 유니티 빌드 그러니까
아 이게 게임 엔진 유니티랑 관련이 있나요?
없어요 그게 아니라 파일 여러 개를 하나로 뭉쳐서
유니티가 이제 뭉친다 하나다 이런 의미거든요
그거를 한 번에 컴파일하겠다는 거예요
그럼 한 번에 컴파일하면 헤더 파일을 한 번만 인클루어도 되니까
그런데 그 한 번에 컴파일한 파일 100개가 있다면
그거를 헤더 파일을 인클루하면 100번을 인클루해야 되니까
그런 속도적인 차이가 나서 유니티 빌드가 훨씬 훨씬 훨씬 빠르다는 거죠
그래서 제가 비디오 아래 링크를 걸어둘게요
영문 링크이긴 하지만 요즘 번역기도 좋아졌고
뭐 수샷도 충분히 있는 것 같고
뭘 켜야 되는지 정도는 읽을 수 있다고 제가 가정을 하고
C++ 큰 프로젝트 진행하시는 분들
빌드 한 번 할 때마다 1시간 2시간 손놔야 하시는 분들
그런 분들 한 번 이제 보고 이게 잘 작동하는지 한 번 보는 건 나쁘지 않을 것 같아요
그리고 제 소망은
이제 이 기능이 좀 더 잘 다듬어지고
이제 뭐 파일이 그룹 짓는 거에서 가끔 문제가 생기는 게 있을 수가 있는 것 같은데
그런 걸 해결하기 위한 노력도 이미 보이고 있고
그런 것들을 좀 더 잘 만들어서 정식 이제 제품을 만들어주면 되지 않을까
정식 기능으로
정말 C++에서 인클루드하고 이런 거를 남들이 흔히 쓰는 방향으로 그냥 했다면
유니티 빌드는 작동하기 어려운 건 아니고
그게 아니라 제가 예전에 일했던 회사처럼
자체 컴파일을 한 번 해보고
파일러를 만들어 갖고 자체 언어를 만들어서
그 언어를 다시 C++로 컴파일하고
그걸 다시 또 컴파일하는 이런 괴랄한 짓을 하는 애들은 당연히 혜택을 못 보겠죠
그래서 이 얘기에서도 하나 좀 이제 아셔야 될 부분들은
이제 특히 기술 같은 거를 결정해야 되는 리드급이나 CTO급이면
이미 존재하는 남들이 다 쓰는 방향과 벗어나는 뭔가 새로운 거 할 때는
그만큼 나중에 그 기능이 들어왔을 때
아니면 다른 기능이 들어왔을 때
그 이제 그 툴에서 지원해 줄 때요
그때 내가 그 전에 만든 이런 이상한 괴랄한 짓 때문에
그 기능의 혜택을 못 보는 경우도 있어요
그래서 앞으로 기술이 어떻게 언제 발달할지를 보고
거기에 지금 들어가야 되는 투자해야 되는 그런 인력과 이런 뭐 시간, 돈
그거 플러스 나중에 쟤네가 이걸 했을 때 아니면 다른 이상한 기능을 또 추가해 줬을 때
내 기능이
이 기능 때문에 뭔가 망가지는 게 없는지를 고려해서
뭐 100% 다 맞을 수는 없지만
그래도 이제 회사에 큰 해를 끼치지 않는 아니면 회사에 아예 해를 안 끼치면 좋고
실보다는 득이 큰 그런 결정을 내릴 수 있어야 돼요
근데 제가 꽤 많은 이제 약간 좀 운이 좋아서 이름이 명성이 높아진 그런 기업들이 가끔 있잖아요
그러면 걔네들은 갑자기 인기 많아지고 돈 들어오니까 막 이상한 짓 하다가 결국엔
그것 때문에 게임 못 나오고 뭐 제품 못 나오고 이런 경우도 많이 봤기 때문에
그런 것들은 되게 좀 조심을 하긴 해야 돼요
어쨌든 얘기 시작은 유니티 빌드가 들어왔어요
C++에서 이거 하나로 그냥 뭐 모듈 시스템 이런 거 필요 없을 수도 있고요
사실은 뭐 있어도 나쁜 건 아닌데
그냥 이거면은 뭐 C#만큼 빠르진 않지만
그래도 C++에서 여태까지 2시간 걸리던 빌드 한 10분에 끝낼 수 있는 이런 정도의 성능은 충분히 나와요 잘
아 다행이다
내가 게임 쪽에서 일하지 않고 비주얼 C++을 컴파일하지 별로 않지만
이제 이런 기능이 나와서 참 다행이다
그래도 인류는 발전하는구나 이런 생각을 하고 있어요
헛소리 다 했으니까 끊을게요
포프였습니다
