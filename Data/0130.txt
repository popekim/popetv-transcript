제가 만나본 프로그래머 중에 정말 뛰어난 프로그래머들은 언제나 자기가
실수를 할 수 있다는 걸 알았어요 그게 되게 중요한 거 같아요 그리고
그런 사람들은 자기가 실수를 했을 때 만약에 누군가가 질문을 할 때
뭐 이런 문제가 있다라고 할 때 자기가 뭔가를 만들던 분야잖아요
그러면 자기가 확실하다는 확신 을 잘 안 가져요 보통은 어 그래
그럼 내가 뭐 실수할 수도 있으니까 자기가 시간이 되면 내가 잠깐 볼게
라던가 아니면 다른 사람들한테 잠깐 봐줄래 라던가 왜냐면 이미
문제를 겪고 있는 프로그래머들이 디버깅 하는 거 어렵지 않으니까
그래서 예전에 한 번 그런 얘기 했어요 겸손한 개발자라는 걸로
얘기를 했는데 그게 과연 겸손의 얘기일지는 모르겠지만 중요한
거는 정말 잘하는 프로그래머들은 그걸 알고 있는 거 같아요 자기가
잘하긴 하지만 자기도 인간이고 실수를 만들 수 있다는 걸 알아요
그러기 때문에
자기가 실수를 하면 언제든 굉장히 빨리 그걸 인정을 하고 미안하다는
얘기도 할 줄 알고 왜냐면 그만큼 다른 사람한테 피해가 되는 경우가
있으니까 그리고 그걸 어떻게든 빨리 고치고 해결하려고 하죠 한마디로
자기의 실수를 인정하는 걸 두려워 하지 않아요 제 생각에는 왜 그러냐
면 자기의 실수를 인정한다고 해도 그 사람들한테 그게 그냥 당연한
거 같아요 인간은 누구나 실수하는 거니까 그런 일이 있을 수 있고 그런
일이 있을 때 빨리 대처하는 게 중요한 거고 그러면 만약에 내가
실수를 한다고 해서 그 자체로 내 실력이 나빠지는 건 아니라는 거
알고 있는 거 같아요
물론 실수의 수가 워낙 많아지면 또 얘기가 달라지겠지만 그에 비해
별로 실력이 없는데 실력이 있는 척하려는 프로그래머들은 실수를
할 때마다 그걸 숨기는 데 되게 급급해요 그러니까 예를 들어서 예전에
제가 다른 회사에서 한 번 겪은 일이지만 뭐가 문제가 돼서 자기네
가 만든 제품 때문에 회사 전체가 다운이 됐다 그러면 솔직히 다른
사람들은 왜 그런지 모르고 있으니까 어떤 회사 빨리 이메일을 써서 이런
문제 때문에 다운이 됐고 우리가 고치고 있으니까 좀 기다려달라고
말하면 되는데 그렇게 전체 메일을 보내기 시작하면 원래는 그 문제를
직접 뭐라고 그럴까요 겪지 않을 수 있는 사람들이 있잖아요 다른
작은 조그만 다른 일을 하고 있다 거나 그래서 그런 사람들한테까지
자기의 실수를 보여주는 게 오히려 자기를 나쁘게 보인다고 생각을 해서
숨기는 사람들이 있어요 그런 사람들은 솔직히 나중에 가면 갈수록 굉장히
힘들어져요 일하기가 왜냐하면 시간 낭비가 너무 많아요 그렇게
자기 혼자 뭐 숨기는데 급급해서 어떤 사람들이 문제 봤을 때 굉장히
그래서 디버깅을 하려고 할 거 아니에요 거기서 시간이 낭비가 얼마가 됐든간에
회사 직원이 50명이라면 50명 곱하기 5분이면은 그게 벌써 250분이잖아요
그럼 이미 4시간의 회사 효율이 날라간 거예요 그래서 저는 그런
사람들이 있을 때마다 굉장히 힘들어 하거든요 그래서 그런 사람 그러니까
결과적으로 여기서 오는 얘기는 뭐냐면 어찌보면은 그런 거 있잖아요
무슨 문제 있을 때 맨날 숨기고 숨기고 미루고 미루고 미루고 했
다가 사건이 커지는 경우 가장 흔한 예로는 빚을 졌는데 그 빚이
있는 거를 어떻게든 빨리 갚으려고 하는 게 아니라 그냥 어떻게 대충
또 빚으로 메꾸고 메꾸고 메꾸고 하면서 대충 안 벌려고 자기 신용카드
에 돈이 얼마 있는지 보지도 않고 이자 그냥 쌓아뒀다가 나중에 신용불납자
되는 사람들 물론 정말 힘들어서 신용불납자 되는 사람도 있지만
신용불납자 되는 사람들 중에 상당히 많은 사람들이 자기 돈 관리를 못
하는 경우도 많더라고요 왜냐면 지금 그걸 생각하면 귀찮아지고
피곤하잖아요 지금 그걸 생각하면 귀찮아지고 피곤하잖아요
피곤해지니까 미루는 거죠 똑같은 얘기로 뭐 학교 과제할 때 그러는
사람도 있고 뭐 회사에서 그러면 이름도 커지는 거고 근데 지금
하려고 하는 얘기는 그거예요 결국엔 사람은 누구나 다 실수를 해요 프로그램
은 누구나 다 실수하고 저희가 만드는 코드가 100%는 아니에요 물론 그거를
막기 위해 그걸 막기 위에는 아니고 줄이기 위해 여러 가지 프로세스가
있죠 근데 이제 그 프로세스 중에 몇 가지는 굉장히 시간을 너무 낭비
해서 과연 그 정도 시간을 낭비하면서 까지 그럴 필요가 있냐
라는 그런 프로세스도 있고요 그리고 정말 본인이 만드는 제품의 뭐라 그럴까요 중요도?
그러니까 어느 중요도라 그러긴 그렇고 뭐 내가 만드는 제품이 정말 실수를 했을 때 사람을 죽일 수 있는 그런 정도의 제품이라면
당연히 그런 프로세스로 좀 더 엄중하게 해야 되지만 그게 아니라 뭐 페이스북처럼 그냥 하하호호하고 보고 이런 거 있으면 버그 몇 개 있으면 어때요
그런 경우에는 오히려 그런 쓸데없는 시간 낭비하는 뭐 퀄리티 프로세스를 조금 줄이고 어느 정도
적당히만 하고 릴리스를 한 다음에 그 다음에 버그가 보이면 고치는 것이 훨씬 나을 수도 있죠 그래서 어차피 이것도 분야따라 틀린 건데 뭐 그거는
결국엔 프로그래머가 그래서 어느 정도 비즈니스 센스도 있어야 한다고 생각을 해요 과연 내가 만드는 제품이 어떤 제품이고 이 정도에서 어느 정도 퀄리티 컨트롤이
가능하고 과연 여기서 이 정도 퀄리티를 하기 위해 이 정도 엄청난 프로세스를 퀄리티 프로세스를 도입하는 게 맞는 거냐 아니면 이걸 적당히 내놓고 고치는 게 오히려 전체적인 시간도 아끼고 회사의 효율성도 높이냐
뭐 그건 개인 판단이고 그게 뭐가 어쨌든 간에 뭐 예전에 한 번 어쩌다가 어떤 회사에서 들은 얘기였는데
그 여기서 그런 표현이 있어요 프로그램에 타는 표현 중에 너의 개밥을 먹으라구 eat your 뭐였지 eat your own dog food
eat your dog food 그러니까 니 개밥을 먹으라는 얘기가 있어요 무슨 얘기냐면
한마디로 니가 짱코드를 니가 책임지고
디버깅하고 테스트까지 해보고 하라는 얘기에요 한마디로 코드를
짜고 그냥 됐어 그러고 체크인하고 끝나는게 아니라 그게 과연 내가
만든 코드가 제대로 작동을 하는지 최소한 브레이크 포인트에서 디버깅
해본다거나 유니테스트가 메이크 센스 하다면 유니테스트를 만들어
하고 하는 것도 방법일거고 저는 유니테스트를 거의 대부분은 안
쓰는게 맞다는 아니 안 쓰는게 맞다는게 아니라 효율적으로 봤을 때 제가
여태까지 몸담아왔던 분야에서는 유니테스트의 효용성이 뭐 아주
높진 않았어요 정말 중요한거 코어 컨퍼런스만 좀 해야지 그 외에
꺼서 유니테스트가 없어도 상관이 없고 오히려 안하는게 시간을 아끼는
거였고 그보다 다른 조명업들이 있죠 그리고 그렇게 뭐 테스트하고
디버깅 해보고 코드까지 체크인 했으면 사람이 또 하나 문제가 그거
에요 뭐 다들 겪어보신 일이겠지만 가끔 내 체인지를 세이브 안하고
체크인하는 경우도 있고 실수로 리버트를 한 다음에 체크인하는
경우도 있고
심지어는 나는 제대로 했는데 저는 예를 들어서 리뷰션넘버 3에서
작업을 해갖고 체크인하는 건데 그 다음에 어떤 사람이 리뷰션넘버
4 5정도를 했어요 그리고 체크인 하는 경우도 있어요 그러면 저는
결과적으로 5 다음에 제 체크인 이 들어가는 거기 때문에 이 앞에
거 앞에 다른 사람이 체크인한 거 와 제가 체크인한 거가 안 맞아서
문제가 생기는 경우도 있거든요 그럼 그런 경우도 이제 막아야 되
니까 그런 경우에 이제 또 테스트를 하는 얘기가 있죠 뭐 체크인하기
전에 뭐
싱크 싱크를 한 다음에 다시 한번 빌드해서 체크 테스트라 이런 얘기도
있고 저는 그것까지는 좀 오버라고 도 가끔은 생각은 하는데 그게
아니면 그 뭐야 체크인 한 다음에 뭐 보통 오토매틱 빌드가 있잖아요
그럼 자동으로 빌드 되는 거에서 에러가 나는 거 컴파일 에러는 거기서
나오는 거고 그건 빌드 시스템 잡는 거고 아니면은 그 빌드를 직접
빌드해서 디플로이까지 한 다음에 제품이 있다면 그냥 보통 웬만한
괜찮은 회사에서 5분에서 10분 사이로 걸린다고 보거든요 그럼 체크인하고
빌드 한 다음에 실제 그 제품을 가서 자기가 고친 거가 제대로 작동한
까지 확인을 하는 그 정도의 자산 이 있어야 된다고 봐요 그냥 아
나는 이거 체크인했고 코드 집어 넣고 언제 이게 제품에 올라갈지
모르겠지만 그냥 되겠지라고 그냥 손 넣고 있는 것보다는 말 그대로
내가 체크인한 게 작동한다 정도는 확인해줄 수 있는 게 좋다고 생각
하거든요 물론 이것도 매번 그래 야 되냐 그것도 아닐 것 같긴 해요
그것도 이제 뭐 역시 아까 말했듯이 얼마나 이게 내가 넣은 것 때문에
제품이 망가져서 다른 사람의 일에 방해를 주느냐 마냥 차이일 텐데
가장 좋은 거는 가장 좋은 게 아니라 그래도 한 가지 반드시 해야 되는
거는 제품이 바로 릴리스 단계에 있을 때 바로 출시 전에 있을 때는
자기가 체크인한 거 하고 이게 제대로 작동하는지 한 번은 빌드를
해서 거기서 확인해 보는 건 굉장히 좋은 습관이라고 봐요 만약에 그
빌드를 할 수 있는 셋업이 안 돼 있다면 그 빌드를 당연히 만드는
것도 좋은 방법일 거고 뭐 그것도 역시 어떤 게 더 효율적이냐 시간을
낭비하느냐 아끼냐의 문제죠 그리고 어떤 경우든 간에
자기가 실수를 한 거를 인정을 하고 거기서 배워갖고 내가 그렇게
옛날에 못했지만 나는 더 잘해줄게 라는 걸 보여주고 나아갈 생각을
해야지 그냥 나는 지금 못한 걸 숨기고 아무도 몰랐으면 하는 마음에서
그냥 숨기고 숨기고 숨기고 그러면서 자기가 더 나아지기 위해 발전을
하는 거는 좀 문제가 있다고 봐요 그래서 뭐 사실은 그냥 비디오 제목
을 it's your own dog food라고 시작을 하려고 했는데 그 앞에 너무 다른
얘기를 많이 해서 뭐라고 제목을 줘야 될지 모르겠고 그냥
실수를 하는 걸 두려워하지 말라는 말을 하고 싶어요 실수를 하는 걸
두려워하지 말되 그 실수를 했으면 과연 이 실수를 다음에 어떻게 줄일
수 있을 건지에 대해서 좀 더 좋은 방법을 찾아내가는 거 어찌 보면
저번 비디오에서 말했던 그 관찰 능력과 그리고 현재 상태 파악을
하고 이제 어떤 걸 더 해갖고 더 나아질 건지 그걸 판단하는 능력
이기도 하겠죠 저는 그게 되게 좋은 프로그램이 되기 위해서는
굉장히 좋은 거라고 생각을 하는데 .
어떤 의미에서 보면은 될성 싶은 프로그래머들 싹수가 보이는 애들
그런 애들은 주니어 때부터 그런 자세가 있긴 있어요 그러니까 자기가
실수하는 걸 되게 싫어하죠 솔직히 누구나 싫어하죠 좋아하는 사람
없어 싫어하면서도 실수했다는 거 알고 그거를 고치기 위해 노력
하지 그걸 숨기기 위해 노력하지 않는 사람들 그런 사람들은 확실히
제가 딱 봤을 때 아 얘네들은 한 3 4 5년 사이에 굉장히 성장을 하겠
구나 이런 게 보여요 그에 비해 모든 걸 숨기고 어떻게 어떻게든 피해
가려고 하는 사람들 딱 보면은.
아 얘는 성장하기 어렵겠구나 앞으로 좀 이쪽으로 커리어가 좀 힘들겠
구나라는 생각이 많이 들리고 뭐 그 정도 오늘도 주저리주저리 정작
프로그래밍 얘기는 한 건 없지만 요즘 포프tv가 잡담이 너무 많은
것 같아요 그죠 네 포프였습니다
