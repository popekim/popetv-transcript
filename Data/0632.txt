안녕하세요, 포프입니다.

프로그래머라는 직종은 굉장히 축복받은 직종이에요. 왜냐하면 저희가 작성하는 모든 것들, 모든 똥코드들, 그 코드들은 자동으로 어딘가에 저장이 되고요, 저장하기 되게 쉬운 텍스트 포맷이고요, 그리고 그건 다 버전 컨트롤이 되어 있어요. 그리고 우리가 만든 그 모든 것들은 굉장히 쉽게 한 곳에서 검색을 하는 것만으로도 찾을 수가 있게 되어 있어요. 그리고 우리가 하는 일들은 매뉴얼하게 어딘가에 뭔가를 관리할 일들이 별로 없어요. 하지만 프로그래머로 일을 하거나, 아니면 좀 직위가 올라가거나, 아니면 저처럼 창업을 해서 어떤 회사를 운영하거나 그렇게 되면 꽃피는 아름다운 텔레토비 동산 같은 곳, 그곳을 벗어나서 컴퓨터를 벗어난 실세계의 난잡과 복잡과 혼란스러운 세상을 매뉴얼하게 처리해야 되는 이상한 일들을 해야 되죠. 그때 정말 좋은 것들이 뭐냐면 내가 만드는 모든 '에셋'이라고 할게요. 그 에셋은 어떻게든 트래킹이 되는 방법이 있으면 굉장히 좋아요. 예는 다양하게 들 수 있겠지만, 처음 에셋을 만들 때부터 트래킹하는 걸 만들면 좋다는 걸 제가 POCU 아카데미 운영하면서 겪었던 좀 괴로운 일들에 대해서 하나를 얘기를 할게요.

저희가 강의라던가 강의 녹화든 편집이든 다 가내 수공업으로 하는 회사입니다. 그렇기 때문에 처음에 강의를 만들고 뭐 했을 때 우리가 단순히 유튜브 비디오 끊듯이 이렇게 되게 단순하게 생각하고 뭔가를 했어요. 근데 강의 시간이 한 과목에 저희가 한 25시간에서 30시간 정도 되고요, 그러면 강의를 보통 한 5분 컷, 10분 컷으로 잘라갖고 자잘하게 올려줘야 사람들이 따라올 수 있으니까 그러다 보면 숫자가 어마무지 많아져요. 그리고 저희는 1주, 2주 따라 강의 분류도 해야 되고 여러 가지가 있어요. 처음에는 그냥 1주에 들어가는 강의 이렇게 놓고 2주에 들어가는 강의 이렇게 놓고. 번호는 예쁘게 매겨 놨어요. 저희 개체지향 과목이죠? 2500_ 주 두 자리, 2500_01, 1주차. 그리고 010, 020, 030, 040 이런 식으로 늘어나요. 10, 20, 30으로 늘어난 이유는 중간에 다른 거 추가로 녹화돼야 되면 거기에 5를 추가해서 넣을 수 있게 하려고 그렇게 한 거예요. 이건 에셋 트래킹의 기본이니까 많이들 아시겠죠? 그래서 다행히 번호는 쫙 매겨 놨어요.

우리가 멍청하지는 않았어요. 나중에 가다 보니까 저희가 처음에는 비디오 위탁 판매하는 플랫폼을 Udemy만 썼는데 Udemy가 여러가지 한국에서 문제가 많았기 때문에 그다음에 Teacherble을 쓰기 시작을 했죠. 그런데 Udemy에서 모든 걸 관리할 땐 편했는데 Teacherble에서 관리하다 보니까 이제 비디오가 양쪽에 올라가야 했어요. 그러면 우리가 어떤 비디오를 수정해야 될 때 그 비디오를 찾는 과정이 되게 복잡해지는 거예요. 그러면 아 이 비디오 ID 아까 말했던 2500_010 이것만 있으면 딱 예쁘게 표로 정리돼서 여기 누르면 Udemy 링크, 여기 누르면 Teacherble 링크, 업로드할 수 있는 링크 이렇게 나오면 되게 좋겠죠. 그리고 그게 시작이 되면 나중에 다양한 것들이 올 수 있겠죠. 비디오를 구운 다음에 저희 내부 툴을 돌려서 이게 실제 볼륨 레벨이 어떤지, 시간, 러닝 타임이 몇인지 이런 거 보고 표로 정리하면 좋겠죠. 결국 한참 뒤에 마스터 리스트를 만들게 됐어요.

그래서 마스터 리스트를 스프레드 시트로 만들어 놓으니까 CSV 파일로 저장을 한 다음에 그걸 통해서 여러 가지 디버깅도 가능했어요. 혹시 타이틀을 누가 저쪽 플랫폼에서 잘못 바꾼 것도 판단할 수 있고 여러 가지 것들 그래서 그게 되면서 우리가 그거 없이 했을 때 했던 그 중구난방한 모든 실수들 Teacherble에는 실수로 점을 붙여놓고 유대미에는 타이틀에 안 붙여놓고 아니면 순서가 바뀌고 이런 것들을 자동으로 돌리면서 검증을 할 수가 있었던 거예요. 그리고 뒤돌아서 생각을 했죠. '처음부터 이런 걸 마스터 리스트를 만들어야 하는구나.' 그래서 실제 영화 업계에 있는 친구한테 물어봤어요. '야! 이거 너네들 어떻게 하냐?', '당연히 만들지 처음부터 우리 처음 주니어 때부터 배우고 하는 거야.', '그렇구나!' 역시 그 분야에서 그런 일들을 많이 한 사람들은 자기들만의 프로세스가 있는 거예요. 이게 처음에 한 방향으로만 쓰기 시작할 땐 단순한데 나중에 점점 복잡한 거 하고 여기저기 뭔가 사용을 해야 되고 이러면서 데이터화를 해야 되는데, 데이터를 하기 제일 좋은 포맷은 테이블이고, 그렇다면 표로 만들기 가장 좋은 툴은 엑셀이고. 그래서 그런 식으로 스프레드 시트로 관리를 하는 게 당연한 거였고, 우리 프로젝트 관리하는 사람들 봐도 막 엑셀 써가지고 어마무시하게 하잖아요? 그게 당연한 거일 수밖에 없었던 거예요. 

근데 프로그래머는 우리가 만드는 코드는 너무나 단순하고 복잡하지 않고 실세계랑 교차하는 경우들이 거의 없으니까 너무 단순하게 생각을 했던 거죠. 그래서 만약에 내가 코딩을 작성하면서 어떤 에셋들이 나온다? 이게 제가 말했던 무슨 비디오에 한하지 않아요. 저희는 자막도 이제 그렇게 관리하고 있고 내부적으로 다양한 여러 가지 것들을 다 표로 관리를 하고 있어요. 표로 관리를 하기 시작한 이후부터는 이런 거 실수가 훨씬 줄어들고 있어요. 혹시 한번 실수한다? 그러면 그냥 다 검증하는 프로그램 만들어서 매번 돌리면 되고, 이런 것들이 있어서 '아! 뭔가를 만들 때는 반드시 마스터 리스트를 만들어야 되는구나.' 저희 심지어는 그 뭐라 그래 로컬라이제이션 한국어 영어 나오게 하는 그것들 사실 ASP.Net Core 같은 거 보면 자체 거 있잖아요? 그게 워낙 관리가 어려운 시스템이라고 저는 보거든요? 그래서 저희는 스프레드 시트로 다 관리를 해요. 그리고 그 스프레드 시트를 다운 받아서 프로그램에 하나 돌리면 그걸 ASP.Net Core에 맞는 포맷으로 리소스 파일을 뽑아주고 그 리소스 파일을 편하게 사용할 수 있는 우리 자체 라이브러리도 있고 그런 식으로 해서 프로그램에 들어가는데 고객에게 보이는 다양한 것들을 이제 다 에셋이라고 보고 저희는 그렇게 관리를 하고 있죠. 단, 표에 들어가기 꽤 복잡한 데이터들은 특정한 파일 이름이나 폴더 구조체를 표처럼 꼭 들어놔서 그것 따라 정리를 할 수 있게 하는 것도 있죠. 

중요한 건 뭐냐면 에셋을 뭔가를 만든다면, 그 에셋을 관리하는 트래킹 표, 스프레드 시트 반드시 처음부터 만들어두세요. 나중에 그걸 고치려고 하면 일단은 이미 했던 일 다시 하는 거 짜증 나는 것도 있고, 그걸 하면서 여태까지 만들었던 실수들을 다 한 번에 고치는 상황들이 와요. 근데 미리미리 그 표를 만들어 왔다면 누군가 그 일을 처음 할 때부터 그 실수가 많이 잡힐 거기 때문에 그 실수 자체가 들어와 있는 경우가 적기 때문에 내가 생각했던 거 이상으로 많은 시간을 퍼부여할 일도 적고, 또 남의 실수를 이 단순한 실수로 고치는 거 되게 기분 나쁜 일이잖아요? '내가 왜 남의 똥을 치워야 되지?' 뭐 이런 것들. 그런 괴로움도 훨씬 덜합니다. 그래서 에셋을 만드신다면 무조건 마스터 리스트 무조건 만들고 시작하세요. 그게 최고입니다.