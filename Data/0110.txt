저번 주 금요일인가 목요일인가
비디오가 안 올라갔다고 생각하시는 분들이 있던데
비디오가 올라갔는데 유튜브 쪽에서 뭔가 프로세싱을 못하고 있어갖고 비디오를
링크로 가면 되긴 돼요 근데 그게 제 채널에는 안 보여지고
그래서 뭐 링크를 제가 따로 건 거를 보신 분은 몇 분 계시더라고 그래서 그분들은 봤는데
그 외의 분들 원래 그냥 제 유튜브 채널을 이렇게 보셔가고 보시는 분들은
아예 안 뜨니까 못 보고 계시다 그래서 그걸 다시 업로드 하긴 했는데
지금 여전히 프로세싱 중이어서 그게 올라갈지 안 올라갈지는 정말 모르겠어요
그래서 이게 왜 프로세싱이 안 될까 고민을 되게 많이 했는데
비디오가 좀 미친 듯이 길긴 했어요 한 35분?
그래서 아마 길면 이게 프로세싱에 시간이 걸리고 뭐 대들하게 걸려
그런 게 아닐까 싶어서 좀 짧게 짧게 만들려고 노력을 하는데
요즘 들어
모르겠어요 굉장히 주절주절 말만 많아져갖고 길게 만들고
오늘은 조금 짧은 얘기를 해보려고 노력만 할게요
얼마 전에 이제 또 저는 원래 망상이 좀 있는 인간이라
어떤 게임을 만들어보자고 망상을 하다가 이 게임은 결국 내가 만들려면은
차라리 내 자체 엔진을 만드는 게 더 빠르겠구나라는 생각이 들었어요
그래서 이런저런 생각을 하다가 예전에 한참 생각하다 만 그 뭐라 그러죠
데이터 로딩
세이빙 이거에 대해서 생각을 하게 됐죠 뭐
C#에서 주로 많이 쓰는 언어는 뭐 이제 그냥 뭐 데이터 시리얼라이제이션이라던가 뭐 디시리얼라이제이션?
뭐 직렬화?
디시리얼라이제이션은 뭐야?
반직렬화? 모르겠다 뭐 그런 거의 문제인데
이제 C#이나 자바 등에 이제 그 뭐 리플렉션 시스템이 완벽하게 갖춰져 있는 언어들 언어 자체에서
RTTI가 진짜 완벽하게 지원되는 언어들은 그런 거를 그냥 뭐 클래스 잡아다가 클래스...
오브젝트 있으면 그거 다 저장하라고 시리얼라이저 해버리면은
뭐 언어에서 알아서 해결해 뭐 찾잖아요 프로퍼티 이름 뭐 그래서 다 저장자 하고
뭐 그거를 뭐 제이썬으로 하든 엑스멜로 하든 뭐 바이너리 라이터로 하든 다 할 수가 있거든요
이제 C나 C++에서는 이제 언어 자체에도 그거를 지원을 안 하죠
원래 스펙에도 없는 거고 그 다음 옛날에는 뭐 그게 중요하다고 생각하지는 않았고
어찌 보면은 뭐 성능상의 문제로 RTTI 같은 경우도 이제 게임 쪽에서 끊은 경우가 있으니까
그 데이터를 저장할 때마다 상당히 고랍해지는 게 있어요
그래서 가장 간단한 방법은 뭐 예전에 흔히들 그냥 바이너리로 저장하는 거 있잖아요 그냥
예를 들어서 데이터 멤버가 Integer 하나 뭐 Short 하나 Float 하나 그리고 String 하나가 있으면
이제 그거를 그냥 직접 리더하고 라이터 함수를 만들어서
그래 첫 번째 4바이트는 뭐 Integer 다음 2바이트는 Short 다음 4바이트는 Float
그리고
String에서 캐릭터가 몇 개 있는지 그 카운터를 이제 Integer로 4바이트로 저장하고
그 바이트 수만큼 캐릭터들을 저장한다
그러면 리더를 만들 때도 똑같이 그렇게 하죠 첫 번째에서 4바이트는 어쩌고 저쩌고
그래서 이제 크로스 플랫폼 개발 환경에서 이게 좀 귀찮은 부분 중에 하나가 있었던 게 뭐냐면
그 이제 빅 엔디언 리들 엔디언 이런 문제가 있잖아요 PC 전용 게임은 다 이제 리들 엔디언이니까 상관이 없지만
예전에 이제 XBOX 360라던가 뭐 PS3같이 파워 PC 쓰던 경우에는 빅 엔디언이기 때문에
그렇게 바이트 수가 하나가 넘어가는 거는 언제나 이 바이트 스왑을 다 시켜줘야 됐거든요
근데 이제 툴은 다 PC에서 보통 보니까 그러면 이제 최종 플랫폼이 뭐냐에 따라 그 바이트 스왑해주고 좀 귀찮은 거였죠
그것뿐만이 아니라 이제 뭐 컴파일러마다 그 스트럭처를 그냥 곧바로 세이브를 한다
예를 들어서 스트럭처가 메모리에 있으면 이 스트럭처가 뭐 속에 Float 4개 있고 뭐 String 몇 개 있고 그러면 그냥 메모리 가져다가
그냥 메모리 카피를 해버리면 되는 거거든요 바이트 스트림에
근데 그것도 이제 뭐 얼라인먼트 그 뭐 규칙이 약간씩 달아있을 수 있고 컴파일마다 그러면 또 귀찮아지는 것도 있고
하지만 가장 큰 문제점은 뭐 역시 버전 문제였어요
데이터를 옛날 버전으로 구하는데 이제 새 버전이 나왔을 때
아 과연 이 그 전에 없던 데이터 멤버라던가 그 전에 있던데 사라진 거 데이터 멤버로 어떻게 내가 구분을 할 거냐
그래서 뭐
이런 저런 장단점이 있다가
이제 C# 같은 경우 가면 이제 그런 문제가 없는 거죠
모든 그 데이터 멤버가 이제 뭐 이름으로 해갖고 저장을 해 놓고 이 변수 이름 이거에는 값이 이거다
근데 이제 단점은 뭐 버전음도 쉽고 다 쉬운데 문제는 그거예요
디스크에서 데이터를 로드할 때 이걸 얼마나 빨리 읽을 수 있냐의 그 차이가 있거든요
아까 말한 저런 C에서 C++처럼 그렇게 뭐 곧바로 memcopy가 되는 경우면
그냥 데이터 하드에서 쭉 읽은 다음에 여기 스트럭처나 만들고
memcopy 딱 해버리면 끝이거든요
그러면 더 이상 고민할 것도 없고
그냥 그거 자체로 데이터가 그냥 나오는 거니까
근데 아까 말했듯이 이제 그런 건 버전 문제가 있고
C나 C#에서는
Realization, Dissualization을 하면은 그런 걸 알아서 해주긴 하지만
말 그대로 디스크도 여러 번 긁어야 되고
뭐 memcopy 한 번 하는 것보다 여러 가지 뭐 연산해야 되잖아요
if 이게 무슨 타입이고 무슨 이름이면 여기서 또 찾아갖고 넣고 이런 것들
그런 것도 뭐 나름대로 뭐 일장일당이에요
속도와 편의성에...
그건데 제가 이 생각을 하다가 최근에 또 다른 생각이 든 게 뭐냐면
그 온라인 게임이 일반화되면서 그냥 하드에서 읽은 데이터를 가지고 있다가
그냥 네트워크에 쏴갖고 서버 쪽에 쏴주면 또 어떠냐
뭐 그에서는 이제 또 뭐 시큐리티 문제도 있고 여러 가지 문제가 있거든요
그래서 프로토콜 버퍼라고는 많이 아실 거예요
구글에서 개발한 거고 시큐리티 문제도 굉장히 잘 잡아놨고
실제 네트워크 구글 내부에서 이제 네트워크 패키지로 쏠 때
그 데이터 형식으로 쓰는 거더라고요
그래서 뭐 그거는 그냥 클래스에서 곧바로 유추가 되는 게 아니라
미리 뭐 데이터 스키마 같은 거 파일로 하나 만들어 놓고
뭐 이 스트럭처에 뭐뭐가 들어간다
그럼 거기서부터 이제 C코드라든가 뭐 C#코드라든가 클래스죠
그거를 만들고 그러면 서로 그 데이터만 넣어주고
이 데이터로 읽어락을 말아서 읽어줄 수 있는
근데 뭐 이거의 단점은 그거죠
일단 아무래도 네트워크 패키지니까 좀 크기도 작게 하려고 노력을 많이 하고
그리고 그렇게 하면서 여러 가지 뭐 압축을 계속해요 애가
그래서 그런 처리하는 시간 프로세싱 시간이 아무래도 일반
그 시리얼라이제이션보다 더 걸릴 수도 있고
그런 여러 가지가 있는데 뭐 최적화는 잘 하긴 했죠
근데 역시 그러면서도 데이터를 읽어갖고
그냥 곧바로 메모리를 카피할 수 있는 그런 장점
왜냐면 그거의 또 하나 장점은 메모리 중간 단계 알로케이션이 없어도 되거든요
만약에 이거를 하나하나 분석하면서
아 여긴 이게 있고 저게 있고 이게 있고를 분석하게 되면은
그만큼 템포러리 버퍼로 만들어 놓고 또 열심히 돌리다가
다시 메모리 카피 최종하고 템포러리 버퍼 버리고 이런 것도 있어서
프로토 버퍼의 단점은 그런 중간 메모리 알로케이션 단계가 있다는 거였고
메모리 알로케이션이 얼마나 속도가 느린지는
뭐 프로그램 하신 분들은 다 아실 거고요
그래서 처음 요번에 시작한 거는 솔직히 그거였어요
과연 내가 프로토 버프를 곧바로 게임 데이터 로딩할 때 쓸 수가 있을까
그것도 괜찮지 않을까 약간의 뭐 성능 저하나 이런 게 있지만
뭐 이왕이면은 네트워크에 데이터 패킷 봉을 때마다
새로 이렇게 뭐 스트럭처 놓았고 또 프로토 버퍼 돌리는 것도 귀찮고
그냥 모든 거를 그냥 하나의 유니폼 포맷을 한 다음에
그거를 네트워크하고 그냥 클라이언트 쪽하고
그냥 서로 공유할 수가 없을까 라는 생각을 되게 많이 했던 거예요
그래서 이렇게 저렇게 보다가 프로토 버퍼를 쓰는 사람도 있긴 있더라고요
보면서 아 이게 가능은 하구나
그 뭐야 도타2인가 아마 걔네가 그 리플레이 패킷을 다
프로토 버퍼로 만들었다고 제가 얘기를 들었어요
그게 확실한지 아닌지 모르겠고
그래서 여러 개를 또 이렇게 찾아봤는데
그거를 보는 순간에 어떤 사람이 그걸 추천하더라고요
캡틴 프로토라고
이게 옛날에 프로토 버퍼 만들었던 애 구글에서
걔가 나와서 새로 만든 그런 뭐 프로토 버퍼랑 비슷한데
이거의 장점은 중간 메모리 알로케이션이 없고
그 대신 맨 캄피가 곧바로 된다는 거
뭐 그래서 보면서 아 이거
게임 프로그래머들 게임 쪽을 위해서 만든 그런 프로토콜인 게 보이긴 보이더라고요
괜찮구나 그러면서
뭐 시큐리티 문제나 이런 것도 구글에서 썼던 그런
기본 원칙을 갖고 썼기 때문에 굉장히 안전하다라는 얘기를 하는데
이거의 단점은 아직
비주얼 스튜디오에서 C++를 지원 안 한다는 거예요
그 C랭 기반으로 만들었기 때문에 C랭에 있는 모든 기능을 써서
뭐 뭐죠 C++14인가 11인가 그런 것도 많이 써서





아직 비주얼 스튜디오에 지원 안 한 게 있어서
비주얼 스튜디오 내부에서는 비주얼 스튜디오를 갖고는 컴파일하고 쓸 수가 없는 게 단점이고
누군가 포팅을 하고는 있대요
그래서 그거를 좀 기다리고는 있긴 한데
뭐 그거 나오면 아 이것도 괜찮겠다라는 생각은 들었고
그 외에 또 구글에서 또 새로 나온 게 있어요
굉장히 비슷하게 캡틴 프로토하고 되게 비슷한 건데
플랫 버퍼라고 그것도 개념은 되게 비슷하더라고요
그래서 뭐 일단 플랫 버퍼 웹 페이지를 가면은 장점 단점을 구분해 놓은 게 있고
캡틴 프로토 버퍼 이거 만드는 사람 블로그에 가도
장점 단점을 비교해 놓은 게 있어요
그래서 쭉 읽어보고 제가 느꼈던 거는
프로토 버퍼 그러니까 진짜 게임에서 제가 쓰고 싶을 때
중간 메모리 알로케이션 단계 없고 어쩌고 저쩌고 생각했을 때
정말 제가 딱 봤을 때 아 괜찮겠다라고 생각이 된 거는 솔직히 캡틴 프로토였어요
시큐리티 문제도 있고 여러 가지
플랫 버퍼는 아마 뭔가 하나가 문제가 있었는데 제가 지금 기억은 안 나는데
시큐리티 쪽의 문제였는지 뭐 하나의 문제였는지
제가 굉장히 이건 좀 아니라고 생각을 해요
했었거든요
그 부분은 좀 문제가 있다고 생각을 했고
그래서 캡틴 프로토가 좋은데 아직 c++ 비주얼 스튜디오 기반의 c++
가 지원이 안 되는 관계로 아직 쓰기는 좀 무리가 있는 거 같고
플랫 버퍼에서 하나 제가 마음에 들었던 건 그거였던 거 같아요
그 물론 최종 결과는 바이너리를 뽑을 수 있지만
제 기억에 플랫 버퍼 자체에서 이제 json 파일을 읽을 수 있는 그런
라이브러리라고 해야 되나
그거를 제공했던 거 같아요
그래서 실제 툴에서는 그냥 json으로 다 save 해 놓고
c#에서 json 다 읽은 다음에
최종적으로 게임데이터 뽑을 때만 플랫 버퍼에서 바이너리를 뽑아
갖고
c에서 읽을 수 있지 않을까
툴은 다 c#으로 만드니까
그래서 아 이것도 괜찮겠다라고 생각을 했죠
근데 생각을 해보면 솔직히 캡틴 프로토도 누군가는 c# 포트를 만들 것 같거든요
지금 열심히 만들고 있다는 얘기도 들었고
뭐 내부적으로 좀 복잡하긴 하는데 어떻게나 나올 거고
c# 포트가 나오고 클래스가 나오기 시작하면 거기서 json 파일을 뽑아내는 거
문제이기 아니기 때문에
그래서 일단은 조금 기다릴 거 같아요
캡틴 프로토가 좀 더 완성이 될 때까지 기다릴 거 같은데
캡틴 프로토가 완성이 돼 주면
한번 모든 데이터를 그냥 캡틴 프로토 프로토콜로 가보는 것도 나쁘지
않을까
라는 생각이 들고
지금 당장 제가 생각했던 그 게임을 만들게 된다면
뭐 네트워크는 당연히 뭐
당장 뭘 써야 된다면 프로토 버퍼로 쓰겠죠 어쩔 수 없이
.
하지만 게임 데이터를 과연 프로토 버퍼로 쓸까
아니면 아까 말한 대로 그냥 바이너리 곧바로 읽는 거로 쓸까
그거는 조금 고민이 있어요
그래서 뭐
제가 짧게 끝낸다 그랬죠 짧게 끝내야 될 거 같아요
이 정도면 대충 주저리주저리 말한 건 다 한 거죠
정리 같은 거 필요한가
뭐 정리를 하려면 데이터 읽는 방식에는 보통 두 가지
바이너리 해갖고 맵 카피하는 거
아 그건 버전 업데이트나 그게 힘들고
다른 방법은 이제 뭐 키하고 밸류 태그를 어떻게 저장을 해갖고 하는
거
예를 들어서 씨샷 같은 경우 시얼라이제이션 같은 거
당연히 버전 업그레이드나 뭐 데이터 누락되거나 이런 거에 대한 대비
도 좋고
뭐 읽기도 편하고 그런 장점은 있지만 텍스트 파일에서 바이너리도 쉽게
변환 가능하고
언제나
아무래도 속도가 좀 딸리는 문제가 있고
그리고 네트워크 그래서 이제 네트워크 게임까지 생각을 해보면 결국에는
네트워크 패켓으로 보내는 좀 작은 프로토토콜이 필요한데 그럴 때에


뭐 바이너리를 직접 보내는 건 상관 없겠지만 역시 해킹의 문제가
있죠
그러면 그렇게 시큐리티가 준비된 그런 프로토콜을 좀 쓰는 게 좋고
그래서 많이 쓰는 게 구글 프로토 4를 많이 쓰고
그 외에 뭐 캡틴 프로토라고 했나요
그거하고 플랩워퍼 같은 게 있지만 아직은 충분히 완성되지 못한 프로토콜
들이고 플랩워퍼는 시큐리티에 문제가 있다는 컨셉이 좀 있고요
그래서 결국 캡틴 프로토가 나오니까 좀 더 기다려야 되지 않을까 생각을
하고
세이프트도 제가 한번 둘러보긴 둘러봤는데
기억은 안 나요 근데 뭐 때문에
아 드리프트에서는 데이터 타입에서 이제 바이너리
바이트 어레이를
내부로 지원을 안 하던가 그래서
게임 데이터처럼 그냥 한꺼번에 바이트 스팀으로 쫙 뭘 보내려고 할 때
좀 드리프트가 좀 어려웠던 게 있었던 것 같아요 그래서
그것 때문에 드리프트가 별로 마음에 안 들었고
데이터 형식만으로 봤을 때
프로토워퍼가 좀 더 게임 쪽에 맞다고 생각을 했고
캡틴 프로토가 좀 더 기다려지고
그 정도로 정리를 하면 될 것 같네요
포프였습니다
