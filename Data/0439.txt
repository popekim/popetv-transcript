안녕하세요 포프입니다
오늘 할 얘기는
제목이 뭐로 나갈지는 모르겠는데
어제 그제
포프TV 슬랙방에서
얘기를 하다가 나온 거에서
제가 대충
대답을 하다가 그냥
이렇게 설명할 수도 있겠구나 라고 해서
비디오를 만들고 싶었어요
거기에 나왔던 질문은 뭐였냐면
기술 쪽을 주로
기술 제품을 만드는 회사가
아닌 약간 좀 비즈니스 관련
그러니까 좀 전통적인
그런 비즈니스
그쪽 관련의 제품을 만들거나 서비스를 만드는
회사에서 일하시는 개발자분이
그런 걸 물어봤어요
역시 비즈니스 회사보다는
테크 회사에 있는 게
프로그래머의 발전이 빠르냐
근데 제가
이거에 대한 답변을 옛날에 분명히
말을 했었거든요 다른 비디오에서
말했을 때
본인이 성장하고 그러려면
당연히 기술 쪽을
하는 회사에 있는 게 좋다라는 식으로
얘기를 되게 많이 했었어요
그렇게 생각을 하다 보니까
이제 뭐 그거는
일반적인 얘기고
물론 예외는 당연히 다 있다고 생각을 해요
제가 다닌 기술 회사 중에서도
정말 개판인 곳도 있었고
비즈니스 회사를 제가 다녀본 적이
한 두 세 군데 밖에 없으니까
거기서 정말 뛰어나서 다시 일하고 싶다
라고 생각하는 회사는 솔직히 아직 없었는데
분명히 있을 거라고 생각을 해요
그래서 그냥 고민을 하다가
그래서 그냥 고민을 하다가
도대체 이게 왜 이런가
라고 생각을 하다가 보니까
그냥 어제 든 생각은
그리고 그동안 생각해 왔던 게
조금 정리가 된 건데
그냥 좀
뛰어난 인재들하고 일하면
뛰어난 인재들
자기 일을 잘하는 사람이에요
자기의 맡은 일을 그 일이 뭐든 간에
그거를 잘하는 사람
그리고 그거를 열심히 하려고 하는 사람들하고
일을 하면은
일이 재밌다
그리고
개인의 발전이 있을 수밖에 없다
이런 생각을 했어요
그럼 대체
일을 잘하는 사람이 뭐냐라는
결과가 나올 수밖에 없잖아요
어떤 사람은
컴퓨터 쪽이 아니라
세일스 쪽이라고 할 때
세일스를 잘해서
사용자를 받아오는 사람
물건을 팔아오는 사람이 일을 잘하는 거냐
아니면은
그 사람보다는 약간 세일스를 못하지만
세일스를 해왔을 때
그 고객이 오랫동안
남게 유지를 할 수 있는 사람이 중요한 거냐
이건 어찌 보면은 세일스를 할 때
얼마나 거짓말을 했을 거고
아니면은
얼마나 거짓말한 걸 나중에 뒤에서 이제
메꿨고
아니면 거짓말을 전혀 안 하고 정직해서
롱텀 릴레이션으로 만든 게 더 잘한 거냐
뭐 이런 식의
그건 나뉠 수는 있는데
제 성향상으로는 당연히
뭐 펌프 앤 덤프라고 하는 걸 별로 안 좋아하기 때문에
그런 거를 좋다고 볼 순 없죠
근데
그건 세일스를 하는 사람의 얘기였고
개발을 하는 사람도 똑같은 거 같아요
제가 한동안 어떤 개발자가 훌륭한 엔지니어고
어떤 사람이 뭐 뛰어나고 이런 얘기를 막 했는데
그냥 이제 다 그거 필요 없고
그냥 생각해보면은
되게 단순히 이걸 수도 있다는 생각을 해요
그 제가 뭐
테크 회사 쪽이 훨씬 더 재미있고 발전이 많다
그리고 비즈니스만 하는 회사 쪽에서는 발전이 없다
뭐 이런 식으로 얘기를 했던 것도
지금 제 생각에는 그냥 통계적으로
통계적으로
어느 분야에 어느 직종에
그렇게 뛰어난 사람들이 많이 있는 문제인 거 같아요
그 뛰어나다는 게 아까 말했듯이
자기 일을 잘하는 사람
근데 자기 일을 잘한다는 거 자체가
주어진 일이 아니라
원래 주어진 일만 하면은
자기 일을 잘하는 사람은 아니에요
왜냐하면은 결과적으로
나 혼자 뭔가를 할 수 있는 사람이 아니라
남이 계속 나한테 일을 줘야 되고
나는 그걸 해야 되는 사람이고
그 남이 잠깐 일을 못 주는
뭐 이렇게 바쁜 시기나 그렇게 왔을 때
그 사람이 이제
뭐 자기 몫을 못 하는 거라고 할 수도 있지만
저 자체의 효율성도 안 나오는 거죠
저는 누군가가 기름칠을 해줘야만
돌 수 있는 기계가 되는 거고
오히려 내가 스스로 기름칠을 해가면서
돌릴 수 있는 자율 기계는 아니라는 거죠
그래서 그런 거에서 보면은
스스로 일을 잘 찾고
아니면은 이제 남이 보지 못한
여러 가지 문제점들을 찾아 갖고
그거를 고치려고 하고
아니면은 남들은 '아 이 정도면 돼'라고 넘어가는 거
그러나 고객들이 봤을 땐
그것 때문에 약간 빈정상하고
뭐 일해 갖고 못 할 수 있는 부분들을
미리 찾아서 또 잘 고치려고 하고 있는
약간 기준이 높은 사람
뭐 자기한테 약간은 가혹한 사람일 수도 있고
그리고 어찌 보면은
모든 제품을 만들 때
모든 기술을 만들 때
굉장히 혁신적인 순수 과학도 있지만
저희 개발자의 입장에서는
그런 기술이란 게 보통은
고객의 손에 가거나
아니면은 직접적으로 고객의 손에 가거나
간접적으로 다른 비즈니스 통해서
고객의 손에 가거나
결국 이거라고 보거든요
그러면 그런 부분을 할 때는
유저의 니즈도 알아야 되는 그런 부분도 있어요
물론 유저의 니즈를 우리가 알아야 되는 게
개발자의 몫은 아니라고 할 수도 있지만
그러면은 개발자가 아닌 우리 위에서
그런 고객의 니즈를 파악해서
스펙을 뽑는 사람이
약간 훌륭하게 일을 못할 때
과연 내가 잡아줄 수 있냐까지도 포함이 되는 거겠죠
그러면 좀 전에 고객의 니즈를 잡아서
이제 뭐 스펙을 뽑는 사람을 얘기했어요
그럼 그 사람이 똑똑하다면
당연히 제 일은 쉬워질 수밖에 없는 거예요
그죠?
근데 또 이렇게 생각을 해보면
그런 사람이 똑똑할 확률이 얼마나 있냐라는 걸
또 이제 궁금하게 얘기할 수밖에 없어요
그러면은 그 사람들이 뭐 당연히 전공이
뭐 컴퓨터 쪽일 수도 있지만
어찌 보면은 어떤 인문계 쪽으로 와서
거기서 특별한 기술이 없이 사원 쪽으로 갔다가
이제 그냥 오래 버텨서 올라가는 사람도 있거든요
그렇게 보면은 결국 전체 인구 중에
자기 일을 잘하는 사람이 몇 프로인지 모르겠지만
우리 흔히 말하는 20~80% 정도가
20% 비율로 보면은
그 20%의 사람들이 더 많이 있는 분야
더 많이 있는 회사
그게 더 좋다는 거죠
그리고 그런 회사들은 당연히
뭐 당연히
일단 뭐라 그러죠
사원 처우가 개판은 아니겠죠
이게 뭐 탑급이 될 이유는 없지만
개판은 아니겠죠
그런 똑같은 의미에서
제가 오늘 뉴스를 읽었는데
약간 찌라시 뉴스일 수도 있는데
테슬라가 최근에 굉장히 많은 사람들을 구조조정을 했어요
뭐 몇천 명 수준이라고 하는데
거기를 떠나면서 짤려나가면서
트위터에 그래도 테슬라는 대단한 곳이다
뭐 앨런 머스크는 뭔가 바꿀 거다 라고 말하고
나가는 사람들이 몇 명이나 있대요
이제 그런 사람들 얘기를 들어보면은
이제 뭐 앨런 머스크의 비전이 맞고
나는 여기서 내 일을 다 했고
물론 내가 짤려나가는 건 좀 아쉽지만
뭐 어쩌고 저쩌고
그래도 나는 테슬라의 비전을 믿는다
근데 짤려나가는 사람들이
그런 얘기를 하기가 되게 어렵거든요
그래서 그런 거를 보면서는
쓰읍
아 그렇게 반드시
뭐 평생 직장을 보장하고 이런
아니면 내 직장이 보장되고 이런 부분이 아니라
그 외의 거에서도 충분히
직원 처우를 잘해줄 수 있는 거구나
내가 정말 하고 싶은 일을 하게 해준다 뭐 이런 것들
그래서 그런 생각할 거 어쨌든 그건 다 잡소리고
그러면 도대체 제가 여태까지 봤던 사람 중에
일을 잘하는 사람들은 어떤 특징을 갖고 있었나
이런 고민을 해요
그러면은 여태까지 제가 일을 잘하는 사람이라는 건 뭐
체인감이 있고 뭐하고 뭐하고 뭐하고 이런 얘기들은
어찌 보면 되게 주관적인 얘기일 수도 있었던 게
체인감이 없다고 말하는 애들은 별로 없어요
다 체인감이 있다고 말은 해요
근데 실제 일을 맡겨보면 체인감이 없어요
자기들은 최선을 다했다고 얘기해요
최선을 다한 게 책임은 아니고
제가 볼 땐 그게 최선이 아닌 경우도 있어요
일단 말은 쉬운 거니까
행동으로 못 할 뿐이지 안 하거나
그래서 이제 뭐 내가 능력이 안 돼서 못 한다
그러면 그 능력을 키우면 되는 거예요
근데 발전하는 것도 없는 사람들 보면은
그냥 말로 하면은 사람들이 용서해 주니까
말로 하고 대충 뭉개고 간다
이런 사람도 되게 많이 보였어요
그래서 그걸 다 떠나서
이제 그냥 느꼈던 게 뭐냐면
내가 일했던 것 중에 정말 얘 일 잘하는구나
라고 했던 사람들은 공통점이 하나가 되게 있었어요
이게 최근 들어서 느끼기 시작을 했던 거 같고
한 1~2년? 1~2년 느끼기 시작을 했고
저희 아버님과 좀 최근 최근이 아니고
한 작년 재작년 쯤에
제가 한국 방문했을 때 아버지 살아오신 거를
쭉 얘기를 하면서 느꼈던 건데
정말 일을 잘하는 사람들은
머릿속에서 시뮬레이션이 되는 사람들이었어요
이 시뮬레이션이 무슨 의미냐 하면은
한국 사자성어로 말할 때 역지사지가 되는 사람들이었어요
무슨 개소리냐 이런 얘기하실 분 있는데
제품을 하나 만다고 생각을 해봐요
그러면은 보통 새로운 기능을 만들고 싶어 하고
그런 기능들이 이제 유저가 요청을 하든
우리 위에서 비즈니스 사는 사람들한테
요청하는 내용이 들어와요
그러면 그 사람들이 기능을 만들어 달라고 할 때
제가 요즘 하는 얘기는 뭐냐면
고객들이 요구할 때도 있고
그 사람들은 그 기능을 만들어로써
자기들의 문제가 해결될 거라고 믿어서
기능을 만들어 달라 그러는 거예요
근데 그런 사람들한테 기능을 만들어 주지 않고
일단 그래 너네 문제가 뭐야
어떤 문제를 해결할 거야 라고 물어보고
실제 그 기능이 이 문제를 해결할 수 있는지를
제품을 만들기 전에
머릿속에서 시뮬레이션이 가능한 사람들이 있어요
그럼 이제 제품 이 기능이 이렇게 들어오면은
시뮬레이션 하나가 이 기능을 유저가 이렇게 썼을 때
그 문제가 해결될 것이냐
근데 생각보다 안 되는 경우가 꽤 있어요
그리고 그럼 두 번째 내가 이 기능을 넣었을 때
이렇게 해서 이 문제가 해결이 될 수 있는데
과연 이것보다 더 깔끔하게 쉽게 해결할 수 있는 방법은 없느냐
그 고민도 할 수가 있죠
그러면 아 이 방법보단 저 방법이 낫구나 라는
그걸 이제 생각을 할 수 있어야 돼요
어찌보면 이거는 상상력일 수도 있어요
그냥 이 제품이 있고 이 기능이 있고
유저가 이걸 쓴다는 걸 가정을 하는 거죠
내가 그걸 쓴다거나 누군가 쓴다거나
그러면 내가 그 사람 입장에 대해서
이걸 썼을 때 어 문제가 해결이 되냐
어 해결이 돼 좋죠 그러면
근데 이 문제가 해결이 된다고 해서
모든 게 끝나는 건 아니에요
그 기능을 넣었을 때
이 기능을 넣음으로 해서
다른 게 뽀개지는 경우도 꽤 있어요
그리고 이 기능이 여태까지 우리가 하려고 했던
그 제품의 방향이라는 게 있어요
이 제품은 뭐를 한다는 방향이 있고
그런 코어 밸류라는 게 있잖아요
그거를 이제 망가뜨리지 않느냐
핵심 기능을 망가뜨리지 않느냐
그런 문제도 있어요
그걸 고려 안 하고 제품을 덕지덕지 붙이다 보면
뭘 하는지 알 수 없는 제품
사람들이 이제 처음부터
기능 하나 할 때부터 계속 쓴 사람은 알지만
처음 누군가 왔을 때 도저히 쓸 수 없는
제품들이 나와 있는 경우도 있거든요
그래서 이제 그런 것들이
시뮬레이션이 가능하냐는 문제인데
이거는 UX를 잘하는 사람과도
똑같은 거였어요
개발을 잘하는 사람도 이런 시뮬레이션을 해보고
아 이게 안 돼
라고 말하고 그거에 대한
더 나은 방식을 만들어서 고쳐나가거나
아니면은 뭐
전혀 만들 수 없는 건 포기를 하거나
뭐 이런 고민들이 있어야 되는데
일단 누군가 기능을 요청했으니까
나 만들어주면 내일은 끝이야
라고 만들어주고 손을 털었는데
그게 제대로 작동을 안 해 아니면 그게 뭔가를 뽀개트렸어
문제를 해결하지 못해
그럼 또 기능이 들어와요 그럼 또 만들어
그럼 또 들어와요 또 만들어
저희 고쳐요 그거 고쳐달래요 고쳤어
고치는데 또 다른 게 또 그것 때문에 망가졌어
고쳤어 그럼 저희가 흔히 말하는
이제 뭐 SI 쪽에서
이런 얘기를 많이 하는 거 같은데
땜빵땜빵 땜빵 치다가 마지막에
더 이상 고칠 수 없어서 갈아엎고
새로 만들고 또 2년 동안 땜빵 치다가
또 갈아엎고 이런 문제가
생기는 거거든요 그게
뭐 흔히 뭐
우리가 말하는 것들 있잖아요
무슨 뭐
프로젝트 관리를 이렇게 하면 돈을 아낀다
그런 거하고 다 상관없이
이렇게 머릿속에서
시뮬레이션이 안 되는 사람들이
기획을 하고 머릿속에서
시뮬레이션이 안 되는 사람들이 개발을 하고
그러면은 양쪽에서
어떻게든 고쳐줄 수 있는 사람이 없으니까
그래서 터지는 문제로
낭비하는 시간이 더 많아요 사실은 그래서
특정 이제
프로젝트 관리 기법에 보면은
이런 거 하나를 담당하는 아키텍트가
굉장히 중요한 프로젝트 관리
기법이 있고 그런 기법은
대부분이 이제 그런
사람이 있을 경우에
제품이 잘 나오는 경우가 있고
그런 사람의 자리가 전혀 없는 프로젝트 관리 기법에서는
프로젝트가 산으로 가고
뭔가 많이 나오는 것 같은데 나중에는
뭔가 문제가 많은 그런 제품이
생길 수 밖에 없죠
그래서 시뮬레이션 하는 능력이 중요하다
그리고 그 시뮬레이션 하는 건
어찌보면 우리가 말하는
상상력에 가까울 수도 있다 이 상상력이
굉장히 세상에 존재하지도 않는
새로운 것을 창의적으로 생각하는 게 아니라
단지 내가 저 사람 입장에서
이렇게 했을 때 유저의 입장에서
이렇게 했을 때 이 제품이 과연 도냐
그리고 내가 기계로써 시뮬레이션을
하는 거죠 기계로써
이 기능을 돌렸을 때 과연 내가 가지고 있는
다른 기능들이 망가지지 않냐
그걸 잘하냐 말아냐에 따라
아키텍트라던가
cto의 재질이 이제
그 재질이 보이는 거고
그리고 거기에 올라가기 위해서는
개발자들도 그런 생각이 점점
들어야만 가능하다는 거죠
그러면은 이제 지금까지
이해한 게 꽤 많은 얘기가 사실은 들어간 거예요
단순하게 기능적인 문제
사용자 UX의 문제도 들어갔고
아까 잠깐 흐르듯이 말했던 거는
과연 내 제품의 코어
밸류에 어떤 문제가 있냐
내 제품은 이거를 하기 위한 거였는데
갑자기 기능을 이거 이걸
추가하면서 내가 원래 만들려고 했던
기능 자체가 헷갈리지 않냐
이게 또 왜 되게 중요하냐면
음
제가 예전에 코딩 스탠다드를 얘기할 때도
그랬고 뭘 얘기할 때도 그랬지만
누구한테도 아 우리
우리는 이 제품이 이렇게 만드는 거야
코드를 짤 때도 이렇게 짜는 거야
우리 이름은 이렇게 짜는 거라는 규약이 있으면
사람들이 아 이 규약에서
뭐를 해야 되는지 이제
같이 판단이 안 되는 사람들은
따라오게 돼 있어요 그냥
그 의미가 뭐냐면
제품을 만들 수 있는 방법은
되게 많아요 뭐 5만 가지가
있을 수도 있어요 그 5만 가지를
만들었을 때 방식 A로 만든 것과
방식 B로 만든 게
나중에 합치면은 서로
뭔가 이상하게 돌거나 아예 작동을 안 할 수도 있어요
그냥 대표적인 개발자의
입장에서 예를 들면은 라이브러리 하나는
이제 에러 코드를 이제 주로
따오는 방식으로 에러 처리를 했고
다른 쪽 하나는 익셉션 핸들링으로
이제 처리를 했어요 근데 이 두 개를
합쳐서 새로운 기능을 빌드하려고 하면은
절반은 에러 코드 쓰고
절반은 익셉션을 쓰는데
어느 순간 어떤 라이브러리를 쓰는지
잘 감이 안 올 때가 있어요 함수가 또 다른 함수를
호출하고 이럴 때 근데 그럴 때는
그걸 어떻게 처리할 거예요
모든 코드를 까보고 처리해야 되죠 하나하나
근데 그게 아니라 우리 코드는
무조건 익셉션 처리를 한다 아니면
에러 코드를 처리한다
라는 원칙이 잡혀있으면 그 방식대로만
짤 수 있기 때문에 이 가능한
오만 가지 길을 가지 않아도
되는 거죠
그래서 이 시뮬레이션이 가능하냐 마느냐는
제 생각에는 훈련으로도 가능해요
제가
요번에 이제 또 캐나다에 온다 그래서
이제 뭐 생활비가 얼마가 들지
모른다라고 말하는 사람한테
생활비가 아니라 이제 무슨 모든
물가라던가 여기에서 월세가 얼마고
밥은 얼마고 이런
그런 지표를 보여주는 사이트가
사실은 있어요 그래서 그 사이트를 보내주고
계산을 해보라고 했어요
이제 그 사람이 이제 중간에 했던 얘기는
아 나는 아 이게
직접 체험하지 않으니까 모르겠다
그냥 가서 부딪히고 체험해 보겠다라고
얘기를 했거든요
근데 저는 거기서 이미 충분히
시뮬레이션이 가능하다고 생각을 해요
내가 하려고 한다면 내가 뭐
일주일에 밥을 몇 끼를 집에 먹지
아니면은 몇 끼를 사 먹지
그럼 그것 따라 뭐 몇 곱하기
밥을 보통 얼마짜리 먹을 거며
뭐 이렇게 하면은 그
가격을 곱해갖고 대충 얼마가 들겠다가
나오고 내가 인터넷이 있어야 하고
뭐 방은 대충 이 정도가
된다니까 그럼 방세는
이만큼 내니까 여기 그럼 대충
내가 쓰는 금액이 나오고 거기
곱하기 뭐 몇 점 배수를 해서
1점 몇을 하든 뭐 1을 해서
아 그러면 이만큼에서
이만큼의 돈이 있으면 내가 여기서 생활이
되는구나 라는 걸 충분히
계산이 가능하다고 봐요 그게 어떻게 보면은
내가 전혀 여태까지
익숙하지 않았던 체험하지 않았던
환경에서 아 숫자를 돌리고
그리고 대충 판단이 되는 자료들이
있으니까 그걸 돌려서 아 그러면
이만큼에서 이만큼의 돈이 들겠구나
아니면은 내가 앞으로 원래 밥을
맨날 나가 사 먹었는데 캐나다는
만들어 먹는 게 싸다니까 그러면
밥 먹는 거를 일주일에 두 번 정도
나가 먹는 걸로 줄이고
집에서 해먹으면 이 정도까지 절약이 되겠구나
이런 게 머릿속에서 시뮬레이션을
하는 거죠 그리고
이 똑같은 게 아까 말했던
기능을 만드는 거하고 똑같이 관련이 되잖아요
그게 관련이
된다면 똑같은 게 가능한 거예요 내가
이 기능을 만들어야 되는데 만들었을 때
문제가 보이는 거예요
이 시뮬레이션 했는데 중간에
내가 아까
생활비 뽑을 때 내가 야
이 봉고를 받으면 한 달에
200불이 모자라겠는데 이런 것처럼
이 기능을 돌리면 여기서
사용자가 실수를 하겠는데 아니면 여기서
이 두 세 가지 방식을 하다 보면
망하겠는데 이런 생각을 할 수가 있잖아요
이 하나는 버그가 난다거나
그러면 그런 경우에는
이 지금 구조 자체가 문제가 있다
이 구조를 좀 고쳐야겠다라는 게
빨리 나오면 나올수록 대처가 빠른 거잖아요
작동하지도 않는 거 만들어 놓고
버그 만든 다음에 또 고치고
또 고치고 하는 건 문제가 있는 거죠
그래서 결국 개발자도
그런 시뮬레이션을 잘하는 사람들이
개발을 잘했어요 보면
그래서 예전에 제가
생활 습관을 고쳐야 좋은 엔지니어가 된다라는
얘기를 한 적이 있잖아요
이런 생각하는 습성
제가 아까 말했던 그런
생활비로 뽑아먹는 거는
솔직히 꼼꼼히 앉아서 계산해보면 나오는 건데
이제 그거 자체를
너무 일이 많아서 귀찮아하거나
아니면
숫자 계산하는 게 짜증이 나거나
그런 걸로 인해서 아 모르겠다
라고 넘어가는 경우가 있어요
앉아서 꼼꼼히 해결해야 될 문제들을
또 비슷한 얘기로 이런 습성이
면접 중에 언제 보이냐라는 것도
제가 최근에 느꼈던 게 뭐냐면
제가 요즘 면접을 많이 보면서
저랑 같이 면접을 들어가는 친구가 있어요
되게 잘하는 친구인데
면접을 보면서 시니어고 주니어고
인터미더시 상관이 없어요 사실은
경력이 면접 쳐도 상관이 없는데
면접을 이렇게 하다가
당연히 코딩 면접을 보다가
실수는 누구나 해요
그럼 저희가 그런 문제점이 얘기를 할 때
뭐가 문제라고 말하지 않고
그러면 이 데이터를 넣었을 때
지금 코드가 제대로
도나야라고 예제 데이터를 줘요
그리고 저희는 이미 문제가 되는 데이터를
머릿속에서 생각을 해서 주는 거죠
그러면 그 데이터를
아예 코드에 넣어갖고
와이트보드에 쓴 코드잖아요
그러면 거기에다가
이제 하나씩 값을 대입해 보면서
아 이러면 요게 뭘로 변형이 되고 뭘로 변형이 되고
아 요 세 번째 단계에서 문제가 생기는구나
이거를 전혀 못찾는
사람들이 있어요 한마디로
단계별로 디버깅을 못하는 사람들이 있어요
이 사람들은 일단 무조건 저는
기본적으로 면접을 탈락을 시켜요
왜냐하면은 어차피 디버깅을 못할
사람이니까 근데 그게
아니라 아니 디버깅을 못할 사람이 아니라
디버깅을 안 할 사람이라고 생각을 해요
근데 그 다음에
이제 종이에 하나씩 적어가면서
아 이 숫자를 넣었을 때 이 값이 이렇게 변하고
이런걸 변수 값에 적어가면서
하나하나 따라서 하는 사람들이 있어요
이런 사람들은 보통 그 값을
도출을 또 해내요 면접관에서 보기는 되게
편해요 왜냐면은 지가 다 막
쓰면서 하니까 이런 사람들은
뭐 제가 생각할 때
엔지니어급이나
아키텍트급으로 못 올라갈 사람들이에요
그거를 이제 제가 좀 훈련해서
나아지게 바꾸지 않는 한
그럼 이 사람들은 왜 대충
아 보여요 뭐 경력이 이미
오래되어 있으면 아 그 경력에서 더 이상 못 올라가겠구나
직급이 아니면은 경력이 낮으면
아 얘는 어디까지 올라가겠구나
이 마지막 말을
세 번째 단계가 어떻게 보면은 제가
보면서 저를 굉장히
익사이팅하게 만드는 사람들 중에 하나인데
그런 데이터를
줬을 때 머릿속으로 디버깅을 해요
그러니까 머릿속에서 그 값을 넣으면서
이 코드는 이렇게 하면 이 값이 뭘로 변하고 뭘로 변하고
뭘로 변하고 물론 변수가
몇 개가 있느냐에 따라 복잡도가
늘어나겠지만 제가 여태까지 말한 거는
변수 하나 바뀌는 과정이었거든요
그 변수 바뀌는 과정을 머릿속에서
계산을 하면서 아 요거
단계 지나면 요 값이 들어오면 변수가
이걸로 변해 하나가 다시 루프 돌아서
이 값이 들어오면 이걸로 변하고
이거 변하면 아 여기서 루프가 나가면서
문제가 생기네 그리고 머릿속으로 디버깅
하는 사람들이 있어요 그런 사람들은
아 확실히
이제 발전도 빠르고 이제
시뮬레이션이 되는 사람들이에요
어떤 그런 뭐 약간의
뭐 인간성 문제라던가 대인사
대인성 사회성 문제로 인해
뭐 UX쪽을 처음에 못 볼 수도 있지만
자기가 그거를 발전시켜가면서
나중에 사용자가 뭐를 사용할 때
어떻게 사용하는지도 시뮬레이션에
가능하기 시작을 해요 그리고
훈련하면 할수록 더 많은 변수들을
처리할 수가 있고 그 정도가
되면은 충분히
이제 가능성이 충분히 보이는 사람
그리고 아까 말했던
숫자를 적어가면서 하는 사람들은
이게 주니어급이나 이러면은
당연히 훈련을 통해서 그 다음 단계인
머리 디버깅도 가능해지지만
이게 이미 경력이 굉장히 오래된 사람이고
코드가 편한 상황에서도 그러고 있으면
이제 그 사람이 열심히 노력해서 그 정도
까지 간 사람 그래도 충분히 쓸 정도가
되고 충분히 여기 저기
유용하게 쓸 수 있지만
뭐 제가 말하는 뭐 탑 1%
급은 아닌 사람 뭐 근데
그렇게 한 사람은 탑 5%에 들 수 있어요
종이 적은 사람도
근데 여기서 정말 더
미친 사람들이 있어요 정말 더 미친 사람들이
이거는 제가 거의 본 적이 없고
사실은 가족
중에 한 분은 뵌 적이 있는데
컴퓨터 하시는 분도 아니에요
멀티태스킹으로 시뮬레이션을
두 개를 하시는 분들이 있어요
정말 끔찍해요
어떤 식까지 가능하냐면
전화를 하면서 굉장히
복잡한 비즈니스 관계를 얘기하고 있어요
저쪽이 얘기하면 비즈니스가 이렇게 저렇게
계약은 이렇게 해야 되고 이렇게 해야 되고
옆에 직원이 지나가면은
그 직원이 법률을 담당하는
직원이다 그러면 이 전화 계속
들으면서 얘기를 하면서 그 직원한테는
또 법률 얘기를 하고 있어요 입모양으로
법률 얘기를 막 하면서 아 이 법률 관계가
이렇게 하고 그러면 뭐 이렇게 뭐를
넣고 써놓고 써놓고 하다가 어 또
전화로 바꿔서 어 그래 그러면은
이거는 그렇게 이렇게 처리하고 이러면 되겠지
그리고 또 법률 얘기를 하면서
머릿속에서 이 전혀 다른
두 가지 토픽이 막
계산이 된다는 거예요 이렇게 하면 이렇게 되고 시뮬레이션이
된다는 거 저도 그게
안 되거든요 그래서
그런 분은 이제 또
엄청나게 뛰어난 역량을 보이시는 분이고
저보다 뭐 한
100배 1000배 훨씬
성공도 하신 분이고 이런데
그런 분들을 보면은
야 저게 정말
내가 못 따라잡는 천재의 영역이구나
저렇게
뭐 계속 그렇게 훈련을 해오신 것도
있지만 그분도 야 저렇게
천재적인 머리에 저렇게 열심히
노력을 했으니 저기까지 가셨고
내가 과연 따라잡을 수
있을까라는 생각이 드는 그런 이제
괴리감이 느껴지는 분이 되는 거예요
오히려 그래서 그거는
제가 프로그래밍 면접 보다가는
아직 찾은 적이 없어요
그런 사람은 오히려 비즈니스 하시는 분에서 본 건데
그래서 아 그런 사람들은
뭐를 해도 잘하겠구나
그게 이제 되게 어느 분야에
있든 그게 되게 공통되는 것 같아서 놀라웠어요
이런 사람들이 또
사람 관리도 잘하는 게
예를 들어서 보통 회사에서
이제 가장 큰 문제 중에 하나가
이제 당연히 직원 봉급 안 주는 건
나쁜 회사고
그 직원으로서가 아니라
회사 오원으로서의 문제가 하나가
저는 어쨌든 간에
직원들을 봉급을 얼마를 주는 거잖아요
그리고 되게 재밌게도
그게 뭐
업무대로 성과를 올리는
곳도 있지만
그 대부분의 이제 시간이라는 걸로
이제 봉급을 주는 게
흔한 것 같아요
내가 이만큼 봉급을 줬고
네가 주 사입시간에 일하면
너는 이만큼 돈을 버니까 그렇게 가라
그래서 이제 뭐 최저시급이나 이런 얘기도
시간으로 따지기 때문에 나오는 얘기고
근데 그냥 성과제로 따지는 거면은
내가 봉급을 이만큼 줬을 때
네가 시간을 막 대충 놀면서 써서
일이 정말 이만큼 나왔을 때
그게 최저시급보다 적어도
너는 성과급이기 때문에 그것보다 적게 줘도
괜찮다라는 논리가 나와야 되는데
일단 제대로 정규직을 채용하는 이상은
최저시급 이상을 줘야 되는 거기 때문에
시간당으로 따지는 게 있어요
그러면 오원어에서의 문제는
예를 들어서
외근을 많이 나가는 그런 직원을
놓을 때 얘가 나가서
얼마나 농땡이를 치고 올까
이런 게 솔직히 걱정이기는 해요
물론 나가서 뭐 15분 커피 마시고
뭐 이런 건 문제가 안 되죠
담배 피고
근데 그걸 잘 아시는 오원어는
얘가 나가서 이제 전철을 어디서 어떻게
뒤에 갈아타고 어디까지 가면 대충 몇 분이 걸리고
거기 사람을 만나서 얘기를 하면은
이런 비즈니스는 얼마 안에 끝나고
또 요거 저기 갔다가 얼마 시간 걸리고
돌아오면은 그래 가장 최적으로 하면
2시간 근데
이제 좀 뭐 중간에 이런저런 문제도 있고
저거 약간 서프라이즈도 있는 거고
중간에 약간 농땡이 치는 거 가정하면은
그래도 한 3시간 안에 들어오겠지
보통 50%
보너스를 매기면은 대충
버퍼가 맞아요 모든 거에서
개발 일정도 그렇고 그럼 그 상황에서
야 그럼 얘가 3시간 안에 와야 되는데
6시간 뒤에 온 거야
그럼 어디서 중간에 농땡이 친 거거든요
근데 일 잘하는 오원어들은 그걸 알아요
그래서 쪼아요 야 이거 뭐냐 뭐냐 말이 안 되지 않냐
그러면 그쪽 사람들은
결국 하고 아 그렇구나
제가 이렇게 농땡이를 쳤어요
라고 말하고 다음부터는
농땡이를 좀 들치게 되는데
그게 안 되는 오원어들 보면은
직원들이 한 6시간 있다가도 응 그래 잘하고 왔지 오케이
넘어가는 거예요
그래서 그런 관리력에
문제가 생기고
그럼 회사에서 결과적으로 노는
직원들이 좀 더 편하게
일을 하고 돈을 받아가는 문화가 생기면서
회사 전체의 문화가 좀 그렇게 가면서
오히려 일을 열심히 하는 애들이 착취를 당하거나
다른 동료들한테 오히려
아니면은
그런 사람들이 떠나고 남은 건 쭉 정해가 돼서
회사가 이상하게 도는 경우도 있어요
그래서 직원의 입장에서는
당연히 똑같은 돈 받고
일 안 하면 당연히 좋은 걸 수도 있는데
개인 발전에 안 좋지만 당장은
그래서 그런 부분에서
그런 오원어가 있으면 피곤해지는 것도 있죠
근데
제가 요즘 보면서 느꼈던 거는
제가 주변에서 일 잘하는 친구들을 봐도
어떤 기능이 나왔을 때
그냥 무조건 하려고 하는 애들은 대흡은
뭔가 구멍이 생기고 펑크가 생기고
다 이러지만
딱 들어왔을 때 곧바로 결정을 하지 말고
고민하는 애들이 있어요
제대로 도나 안 되나
뭔가 좀 확실하게 이해가 안 되는 부분을 확인하는 애들이 있어요
이렇게 이해가 돼서 이게 맞냐
그러면 이런 문제가 생기는데 어떠냐
그래서 이렇게 논리적으로
얘기를 하고 아니면 논리적으로 시뮬레이션해서
문제가 생기는 걸 생각을 하는 애들
확실히 일을 잘하고
그게 아니라
이렇게 일을 주고 전제가 이거라고 말을 했는데
그 전제 안에 생길 수 없는 일들을 막 얘기하기 시작하고
아니 이건 일 수가 없는 일이잖아
시뮬레이션을 해봐 불가능한 얘기야
그 상황에서는
근데 본인은 그런 것도 제대로 검증을 안 하고
말을 하는 사람들이라던가
아니면 아무 생각 없이
뭐 하는 대로 할게요
했는데 결과가 잘못 나왔어
왜냐면 뭐 당연히 윗사람도 못 봤던 거고
얘도 못 봤던 거니까
그래서 그런 문제들을 보면은
아 일을 잘하고 못하는 사람은
이런 차이가 있지 않을까
그래서 어찌보면은
프로그래밍 면적을 볼 때도
되게 단순한 알고리즘들이지만은
그걸 테스트하는 이유도
이런 자세가 돼있는 걸 보는 게 아닐까
아무리 시니어 아무리 뭐
인터미디어 경력 많은 사람들도
이런 알고리즘 문제에서
페일하는 경우가 되게 많아요
복잡한 게 아닌 거에서
뭐 머릿속에서 변수를 4개 5개 추적하는 건
점점 어려운 일이라고 보지만
한 개도 제대로 추적 못하는 사람들이 있어요 사실
어찌보면은
머릿속에서 시뮬레이션 잘하는 게
일 잘하는 사람들 프로그래머 뿐만이 아니라
다른 쪽도 그렇지 않나
라는 생각을 해서
말도 안 되는 비디오를 또 만들었어요
네 퍼프였습니다 빨리 끊어야지
