안녕하세요, 포프입니다.

제가 지금 POCU 아카데미라는 학기제로 도는 교육기관을 운영하고 있죠? 이렇게 학기제로 계속 운영을 하고 계속 고객을 상대로 서비스를 지속해 나가는 솔루션은 확실히 제가 예전에 많이 했었던 게임들하고는 다른 점이 있어요. 게임 같은 경우는 보통 한 제품을 만들고 출시가 되고 자잘한 버그를 고친 다음에는 더 이상 큰 기능들을 넣지 않죠. 다음 게임에 들어가기 때문에 지난 2~4년간 열심히 만든 게임 출시하고 다시 새로운 거를 만들게 됩니다. 엔진은 가져다 쓰지만 그 외 게임에 들어가는 것들은. 그러면 엔진 쪽이 아닌 게임 쪽에 어떤 버그가 있어서도 고객이 굉장히 싫어하는 버그가 아니면 오케이 하고 넘어갈 수 있는 버그들이 있어요. 이런 지속적으로 하는 회사를 운영하다 보니까 저희는 4개월마다 한 텀이 오거든요? 한 학기가. 그럼 4개월마다 반복되는 문제들이 나오는 경우들이 있어요. 그게 단순히 코드상의 문제일 수도 있고 저희 프로세스 상의 문제일 수도 있고요. 근데 이거를 주도적으로 제대로 고치지 않으면 '버그로 남는다'는 거잖아요?
버그가 계속 생기게 돼요. 근데 버그가 10개가 있는데 이 10개가 사실은 동일한 문제를 말하고 있는 버그인 경우도 있어요. 이게 당연히 버그를 만드는 사람이 기존에 이 버그가 있는지 잘 확인을 안 해서 그런 경우도 있지만, 그 버그랑 다르게 쓰였거나 글을 아니면 다른 현상으로 나왔을 때 같은 건지 모르고 중복된 버그를 만드는 경우가 있어요. 그래서 어느 순간 그런 것들이 보이고 동일한 문제들이 계속 나오는 걸 보이면 '아, 이거는 반복적으로 나오는 버그들은 무조건 고치고 가는 게 맞다'라는 생각을 하기 시작을 했어요.

게임 쪽에 있으면 보통 게임을 만드는 동안에 계속 버그가 나오고 출시가 가까우면 버그 수가 회사에 이미 한 100개, 200개가 되거든요? 그럼 그거를 0개까지 떨어뜨리는 게 일단 목적이에요, 출시 전에. 그럼 0개로 막 열심히 다 고쳐서 떨어뜨려요. 그러면 그동안에 버그가 또 몇 개 나오겠죠? 새로 나온 버그도 있고 기존의 버그가 나온 걸 수도 있고. 또 올라가면 한 번, 두 번 정도 0개 쳤다가 출시에 가까우면 그냥 버그가 좀 올라와도 중요한 것만 고치고 아닌 것들은 그냥 '일단 게임 출시해!'라고 해서 나가는 것들이 꽤 많아요. 그래서 실제 게임은 최소 버그가 한 10개, 20개는 최소 잡고 나가요. 그리고 그거를 안 고치는 경우도 있어요.

근데 이렇게 지속적으로 솔루션이 운영되는 회사, 그리고 저희처럼 뭔가 반복적으로 이제 한 학기제로 도는 회사에서는 그렇게 됐을 때 버그 뻥튀기 수가 어마무시하게 많더라고요. 그래서 저희는 어느 순간부터 '기술 쪽, 코드 쪽 버그는 나오는 순간 고친다'가 원칙이 됐고요, 그게 아니어서 남아있던 버그가 그전에 한 100개? 200개가 됐거든요? 쌓여있는 버그인데 진짜 마음잡고 고치니까 꽤 빨리 고칠 수 있었어요. 그거를 고치는 동안에 '이 버그가 왜 있지? 왜 우리가 안 고쳤지?'라고 하는 부분이 되게 많은 거예요. 그 버그를 썼던 사람들한테 제가 물어봤어요 '이 버그가 정확히 무슨 버그냐?' 설명이 자세하지 않은 거죠. 그러면 거기서 이런 이런 얘기를 해요. 그러면 '오케이 그러면 이제 이거 어떻게 고칠 거냐?'라고 물어봐요. 왜냐하면 저희가 그렇게 많은 버그를 놓고 안 고쳤다는 거는 '당장 시간이 없어서 안 고쳤다'는 쪽이 맞거든요? 그래서 '여러 가지 버그들 비슷한 거 있으면 어떤 문제였고 어떻게 고칠 건지 계획을 세워오라'는 식으로 제가 명령을 많이 내렸었어요. 근데 그중에서 그걸 하면 자세한 정보 적어 갖고 이거 이렇게 고치면 되고 아니면 이거는 기술적으로 이때 이게 안 됐던 건데 지금은 될 수 있으니까 이걸 확인하면 된다 이런 식으로 많은 게 왔었거든요.

근데 그중에서 어떤 한 직원은 본인이 '이건 이것 때문에 안 돼.'라고 했는데 실제 보니까 그 당시에도 되던 거였고, 그리고 나중에 '이거 이거 이렇게 고치면 돼'라고 적어 오는데 말이 안 되는 거예요. 제 생각에는 이걸로 안 고쳐지는 거예요. 그래서 그런 거를 여러 번 반복적으로 문제를 만드는 직원이 그제야 눈에 띄었어요. 그전에는 버그를 케이스를 만들어 두고 '나중에 고치면 되니까 그렇게 가자'라고 했는데 나중에 한참 얘기를 하다 보니까 이 직원은 결과적으로는 자기가 만든 버그가 있는데 그 당시 언제나 그 버그를 고치려고 시도는 했었어요. 그리고 이제 '안 된다'고 보통 이렇게 버그를 그냥 올렸는데, 지나 보니까 자기가 만든 버그의 이유도 제대로 파악을 못 한 거고 고치는 것도 그냥 어디 웹검색 한 다음에 대충 눈에 보이는 거 하나 시도해 보다가 되면 오케이고 몇 개 해보다가 안 되면 포기하고 올리는 이런 식이었던 것 같아요. 누군가의 도움을 요청하는 것도 아니고. 그래서 버그를 고치다 보니까 다른 사람들 버그는 싸그리 고쳤어요. 근데 이 사람의 버그만 계속 안 없어지고 있는 거예요. 그때 보다가 느꼈던 건 뭐였냐면 이 사람이 옛날에는 스택오버플로우 찾아서 코딩하는 사람들이 있었잖아요? 잘 이해 못 해도 복붙 해가지고. 요즘 세상은 그게 chatGPT겠죠? '아! 그런 식으로 코딩을 했었구나.' 자기가 만든 코드가 왜 도는지도 잘 모르고 코드에서 문제가 생기면 고칠 수가 없는데, 그 순간에 자기가 이걸 '모른다'고 말하면 이제 좀 이상하잖아요? '네가 짠 코드인데?' 그래서 그거를 피해 왔구나. 회사의 시스템 자체가 그 당시에 '버그를 반드시 다 고쳐라'는 시스템이 아니었고 '고칠 수 있는 건 지금 고치고 이제 뭐 좀 어렵거나 지금 시간이 없으면 만들어 놓고 나중에 시간대 고쳐라'였기 때문에. 근데 그거를 언제나 그런 식으로 미뤄 왔구나. 그리고 실제 저희 회사에서도 주기적으로 '요번엔 버그 고치는 주간이다', '버그 고치는 달이다' 해서 버그를 한 번씩 왕창 사람들이 다 배분하고 고치는 경우들이 있었거든요? 그 당시의 기록도 보니까 이 친구는 다른 사람들에 비해서 버그를 고치는 속도가 굉장히 적었었고, 그리고 안 고치는 버그가 있으면 이제 그 순간에 '못 고쳤다'라던가 이걸 다음 거로 계획을 잡든가 이런 식으로 이제 해야 하잖아요? 그거를 은근슬쩍 몰래 딴 쪽으로 슬그머니 빼버리는 이런 식으로 일을 많이 했더라고요. 그래서 보면서 '아! 이래서 우리가 공통적인 버그가 되게 많이 쌓였구나.'를 느꼈어요. 이 사람이 가지고 있던 버그에 그런 게 진짜 많았어요. 당연히 다른 사람들은 공통적인 게 생길 수 있죠. 근데 이건 어마무시하게 많았어요. 실제 버그 하나 고치면 버그 한 10개가 사라지는 이런 일도 꽤 있었거든요? 저희 회사는 버그를 이제 다 고쳤어요. 그리고 그게 끝났기 때문에 저희 회사는 기술 쪽 버그는 언제나 0개예요. 물론 버그가 있죠. 우리가 모르는 것뿐이지. 나오면 곧바로 문제 고치고 커밋 넣고 라이브 나가고 '라이브 나갔다. 이 버그였다' 라는 기록을 남기고 있어요. '계속 운영하는 서비스는 이래야 하는 게 아닐까?'라 생각하고, 처음 스타트업을 할 때는 '이렇게 버그를 다 고치고 갈 수 없게 두고 가지만, 어느 정도 회사가 자리를 잡으면 우리는 버그 연계를 유지한다'는 규칙은 만들어가는 게 좋은 것 같아요.

그래서 이제 POCU 아카데미에 지금 남아있는 버그는 비디오 동영상 편집 버그라던가 말 잘못한 것들, Typo 있는 것들 이런 버그들인데, 그것도 여전히 버그 수가 쌓여있고 서서히 줄여가는 걸 목표로 하고 있습니다. 다행히 그쪽 버그는 처음 만들 때부터 되게 정형화되어 있었어요. 왜냐하면 동영상 강의에 나오는 버그는 스크린 샷 여기 찍고, 뭐 어떻게 해야 하는지 쓰고, 어떤 자료도 만들었고, 패치해야 되는지 쓰고 이게 정형화가 가능했거든요? 그래서 그 정형화 폼에 따라서 버그 보고가 들어왔기 때문에 굉장히 굉장히 굉장히 그래도 이제 시간 낭비는 없이 기계적으로 고칠 수 있는 부분이라서 마음의 큰 불안함은 없는데, 기술 버그는 그리고 소프트웨어는 다양한 형태가 있으니까, 화면도 다양하고. 이거에서 버그가 나온 것들을 어떤 특정한 규칙에 맞게 리프로 케이스를 쓰라고 하기가 좀 애매한 분들이 많거든요? 거기에 버그가 나왔을 때 그거를 어차피 '누군가가 꼼꼼히 보고 제대로 쓰였는지 판단할 시간에는 차라리 그냥 고치는 게 빠르다'라는 게 결론이고, 그게 고치는 데 기술적인 무언가가 안 된다면 그거는 뭔가 뒤집어야 하는 거기 때문에 차라리 버그가 아닌 유저 스토리가 되는 경우들이 있죠. 

그래서 제가 게임 쪽에 오래 있다가 서비스하는 쪽으로 와서 오래 서비스를 유지하고 그리고 또 반복되는 서비스, 4개월마다 하는 걸 보니까 '버그를 무조건 0개로 치고 들어가야 하는 서비스와 아닌 게 있구나'라는 거를 깨닫고 있어요.

포프였습니다.