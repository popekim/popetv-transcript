예전에 삼색.. 코드.. 리뷰였나?
아니면 아 맞아 삼색코드리뷰라는 얘기를 했었고 코딩스탠다드 이렇게 빡셀 필요 있나 라는 비디오를 두개를 따로 만든적이 있어요.

해서 저는 그 때도 얘기 한것같은데 이제 코드 그.. 스탠다드가 빡셀수록 오히려 더 생산성도 떨어지고 뭐 오히려 망치는 놈은 계속 망치고 별로 도움이 안된다 얘기를 했었고, 코드리뷰도 쓸데없이 시간 낭비 하는게 너무 많고 어떤경우에는 그리고 오히려 코드 리뷰를 하는 사람은 집중을 못하는 얘기를 했던거같아요.

왜냐면 나는 코드를 집어넣는 사람 입장에서 나는 코드를 넣어야 되고, 당장 그사람이 필요해서 코드 리뷰를 잡아 오는데 코드리뷰는 보통 다른 일을 먼저 하고 있잖아요. 그럼 그 사람을 데려왔을 때 그 사람은 머리속은 그래요. 아 그래 코드리뷰 해야지만 자기는 자기일 빨리 돌아가고 싶은게 있기 때매 어떤 의미에선 건성건성보는 것도 있고 어떤 의미에선 집중을 못하는 거죠.

뭐 본인이 그럴려고 하든 아니든 그건 언제나 그래요. 정말 내가 다른일하고 있을때 방해받는 것도 싫고 그러고 어떤 의미에서는 그렇게 누군가가 집중하고 있을때 방해를 해야만 된다는 그런 컴퍼니 컬쳐 만드는 것 자체가 생산성 저하가 엄청난 거예요.

물론 코드 코드 리뷰가 중요한 경우가 있죠. 예를 들어서 아.. 뭐 보안 회사.. 보안회사가 아니라 그.. National Defense 그러니까 음.. 전쟁 무기 이런거 만드는 회사있죠. 아니면 뭐, 예를 들어서 비행기 만드는 Boeing 747 이런거 만드는 Boeing 회사. 그런데서는 코드리뷰가 되게 중요해요, 왜냐하면은 모든코드 하나하나 잘못 만들때 마다 그 코드가 들어가서 남아있게 되면은 그거 때매 비행기가 추락할 수도 있고 미사일이 엉뚱한데.. 맞출수도 있고 이런게 있잖아요.

그래서 그런건 되게 중요한데, 한가지 그 소프트웨어 개발자들 특히 게임 개발자라던가 뭐 그렇게.. 정말.. 큰.. 생명이나 뭐 정말 중요한 Effect가 없는 소프트웨어를만드는 사람중에 Mentality는 여전히 그 군사기기 만드는 그런 Mentality가진 사람들이 있고, 그 사람들이 말도 안되게 그.. 엄.. 혹독한 코드리뷰를 강요하다 보면은 오히려 일의 생산성이 너무 떨어지고 원하는것도 생각보다 못얻고 그런 단점이 있더라고요.

그래서 그게 저번까지 했던 얘기고 오늘 했던.. 오늘한 얘기는.. 그전 꺼보다 조금더.. 아마 제 입장이 바뀐거라고 봐요. 제가 오늘 할려고하는 얘기는 코드리뷰는 전부 하자라는 얘기를 하고싶어요. 뭐 전부 했으면 좋겠다.

그런데 뭐라그럴까 Technology를 좀 이용하자는 얘기를 하고싶어요. 무슨얘기냐면 (컨닝중) 제가 최근에 이제 Bit bucket이라던가Git hub라던가 이런거 많이 이용하면서 되게 좋았던게 뭐냐면, 모든 채크인을 할때마다 누구나 거기가서(클릭클릭) Code Side by Side diff view를 볼수가 있어요.

그러면서 보면서 이게 코드를 보면서 여기가 마음에 안드는게 있잖아요. 그러면 거기다가 Comment를 추가할수가 있어요. 그러니까 각 라인이 있잖아요 [Split Diff View면] 거기다가 Comment를 추가해 놓으면 그 코드를 넣은 사람이 이메일 Notification을 받고 와서 아.... 거기에 답글을 달수 있는거죠. 아니면 그 코드 전체에 대해서 댓글을 달수도 있고 이거를 Post review라고 해요.

뭐 어떤.. 다른.. 리뷰 언어에서는, 아니 그러니까 뭐 리뷰 프로그램에서는 무슨 Audit 이라고 해서 나중에 감사 보는거라고 하는데 일반적으로 이 소프트웨어 쪽에서 얘기 할때는 두가지 리뷰가 있다고 보거든요. Pre-Commit review, 체크인 하기전에 리뷰받고 체크인 하는거. 그다음에 Post-Commit review, 체크인 한다음에 리뷰 받는거.

아까.. 말한.. 그런 뭐 군사 이런.. 분야에서 정말 Critical 한게 아니라면 저는 80% 90%의 리뷰는 다 Post-review가 되어야된다고 봐요. 이게 장점이 뭐냐면, 저는 코드를 만들고 제가 잘했다고 생각하고 넣어요. 그러고 제가 다른사람을 잡아올 필요가 없으니까 저도 기다릴 이유가 없고 저사람일을 방해할 필요도 없어요.

그러면 다음날 Manager급 이라던가, Lead급이 되는 프로그래머가 와서 어제.. 어제 집.. 그러니까 아침에 보통 출근해서 커피한잔 마시면서 약간 집중안될때 있잖아요. 아니면 당장 딴거에 다른거에 집중 안하고 있을때. 그러면 아침에 커피 마시면서 보는거에요 어제 우리.. 내 팀원, 그러니까 대여섯 대섯명 다섯명이되든 열명이든, 넌 코드가 뭔지 이렇게 Side By Side.. Side by Side View를 보면서 아 그래 이건 좋다 그러면 Approve해주고 이건 안좋다 그러면 아 이거이거 좀 안좋고 이렇게 고쳐라 라고 댓글 달아놓고.

그러면 그사람도 나중에 출근해서 그거보고 어제 했던거 좀 고쳐서 넣고. 그러면은 윈윈 이거든요. 그러고 아까 말했던 이Git hub나 Bit bucket 이런거 에서 이미 이 기능을 지원을 하고있고 거기에 코드로 호스팅 하시는 분들이면 그냥 쓰시면 되는거죠.

해서 그거를 보고나서, 아 Post-review 단계가 되게 좋구나 라는 생각을 많이 했어요. 물론! 그래도 Pre-review를 받아야 될때가 있어요. 아.. 정말 Mission critical해서 이거 정말 자기가 모르겠는거, 너무 문제가 생길거 같은거. 그런건 리뷰받으면 당연히 좋죠.

물론 그런 시스템에서 지원하는 시스템도 있어요. 리뷰 시스템 중에 실 제 사.. 현주하는 모든 코드리뷰 시스탬에 그 대부분이 Pre-Commit 리뷰를 위주로 만들어 놨어요. 그래서 Pre-Commit 성.. 해놓고 누가 허가해주면 그때 체크인 할수있는 그런식으로.

뭐 군사쪽에서 맞는 얘기고 뭐 어찌보면은 프로그래머 입장에서 엔지니어 입장에서 아 우리 완벽해야 한다라는 그런 망상을 가지고 있으면 맞는 얘기인데 실무에서 쓰기에는 말도 안되는 얘기고 써봐야 오히려 사람들이 점점 싫어하고 안쓰게 되요. 그 나중에 가면은 그.. 은근슬쩍 점점 리뷰를 안받는 것.. 것들?

그러면 이제 사람들도 Post-Review 볼 방법도 별로 없으니까 대충 이렇게 뭉개다가 결과적으로 시스템이 악용되는 순간 그 뭉개진 코드가 있으면서 망하는 그런.. 그런경우가 있죠.

그래서 그런 경우에는 Pre-Review를 받는게 좋은데 물론 소프트웨어로 받아도 되지만 진짜 그런 순간 만큼은 누군가를 잡아,서 매니저를 잡아서 이거 좀 Critical한 Code Change니까 한번 좀 꼼꼼히 리뷰를 해달라고 하는건 맞는 얘기 같아요.

그래서 그렇게.. (쩝) 잘.. 뭐라그럴까 80% 90% Post Review, 한 10%정도 Pre-Review 정도 하면 딱 좋을거 같고. 여기서 (쩝) 제가 이제 이거를 좀.. 최근에 조사를 해봤어요. 그러니까 저는 Bit bucket 이나 Git hub 간에 그냥 올려버리면 코드리뷰 시스템이 있으니까 편하다라는 주의였는데, 문제는 회사에서 일할때 자기 코드를 그런 Hosting Service에 안넣고 싶어하는 회사들이 꽤 있잖아요.

그래서 그런 경우에는 아.. 자체 호스팅을 해야되요. 그러니까 자체 호스팅을 하는데 그러면 리뷰를 어떻게 집어넣을거냐. 뭐 리뷰보드 이런 프로그램도 있고, 뭐 콛.. 그 Review Board라는건 공짜고, 뭐 코드 콜라보레이드라 Code Collaborator 라던가, 아... Crucible 요 두개는 상용으로 그나마 유명한 거고.

그런데 이것저것 다 봤는데 Post-Review를 제대로 지원하는 거는 별로 없어요. 사실 어..... 딱 두개밖에 없다고 하면 맞는것같아요. 그 두개가 아... 아까 조금전에 말한 그 뭐죠? Crucible 그거는 상용 프로그램이고 어... 뭐 그렇게 싸지 않고요.

그 두번째게 이제 최근에 제.. 저도 조사하다가 찾은건데 빠브리게잇.. Phabricator라고 있어요. 그러니까 아.. 스펠링이 P.H.A.B....R.I.C.A.T.O.R Phabricator. 이 두갠데 아.. 저는 뭐 이제는 당연히 중앙.. 호스팅 서버를 넘어 실어서 이제 Git으로 빠질려고 하는 상황에서 Git.. Git을 위주로 찾아보긴 했지만 아... 둘다 다 지원해요 Git Supportion Purpose도 대충은 지원하고 Mercurial로 까지 지원을 하니까 누가 쓰는데도 문제는 없을거고.

저 개인적으로는 Phabricator를 강력히 추천을 해요. Crucible은 뭐 웹사이트 가서 보시면 알겠지만 이게 사실은 굉장히 옛날에 그Code Collaborator나왔을때 고때 같이 나온 제품에서 계속 업데이트 하고 이런거라서 UI라던가 뭐라던가 굉장히 깔끔하지 못하고, 뭐 Post-Commit 리뷰되고 Pre-Commit 리뷰 되는데 포스트... Pre-Commit 리뷰쪽에 좀더 초점이 있지않나 생각이 들어요. 그래서 그냥 스크린샷만 보셔도 감이 올거고.

Phabricator는 굉장히 새로운 거에요. 근데 그렇게 새로운 것도 아냐 한 3~4년 된건데, 일단 UI가 되게 깔끔하고 이게 재밌는게 페이스북 에서 있던 엔지니어가 만들어서 페이스북에서 쓰다가 이사람은 이거를 계속 만들려고 나와서 회사를 차렸고, 하지만 이거는 여전히 오픈소스고.

그러고 DropBox 회사도 이거를 쓰고 요즘 아.. 그러고 LLVM회사도 이거를 써요 코드리뷰 툴로. 그래서 (쩝) 이게 사실은 Phabricator가 코드리뷰 툴만 있는게 아니라 그안에 여러가지 Application이 들어있더라고요 무슨 뭐 콛...코드 호스팅 서비스까지 있어갖고.

저는 이게 과연, 내가 호스팅을 다른데 하고 여기다 리뷰만 넣을수 있을까를 궁금해했는데. 얼마전에, 회사에서 그.. 제가 어떤 친구의 멘토를 맡게 되었어요, 저희 팀이 아닌데 그 친구가 저를 멘토로 삼고싶어해서 뭐 회사에서 추천을 한거같고, 제가 멘토를 하면서 얘기를 하면서 이.. Junior Programmer인데 같은팀도 아니고 내가 얘를 어떻게 멘토를 하고 어떻게 실력을 키울수있을까 생각을 하다보니까, 유일한 방법은 제가 그친구가 넣는 코드를, 주기적으로 보면서 아 이거는 좀 이렇게 하는게 좋지않겠냐 라고 이런 조언을 주는게 거의 유일한 방법이더라고요.

근데 그거를 제가 다른팀에 있는 사람이 맨날 가가지고 봐줄수도 없고 그러니까 코드리뷰 툴이 있어야 되는거에요. 그래서 아 이거 만들어야겠다 어떻게든 해야겠다 라는 생각에 찾아보기 시작하다가 찾았고. 그러고 뭐.. 그뒤에 뭐.. 멘토는 아니지만 또 뭐.. 다른.. 그러니까.. 개발팀은 아니고 QA팀에 있는 친구중에 하나도 자기가 나중에 개발팀으로 가고 싶은데 자기 회사 시간말고 Extra Time에 개발쪽 거 조금씩 도와주면서 올라갈 방법이 없느냐 라고 물어보는 거에요.

그래서 그쪽애 생각도 하니까 아 역시.. 역시 코드리뷰 툴이 있는게 최고겠구나 생각이 들며 찾아봤고. Phabricator는.. 그래서.. 봤는데 웹 호스팅 서비스는 없고 다운받아서 써야되요. 그래서 할려고 그러니까 리눅스만 지원한데요. 제가 리눅스 모르거든요. 그래서 그냥 Virtual Box 만들고 그 안에 Linux Ubuntu 깐다음에 그냥.. 설치 다하고, 웹에 나와있는대로 따라서 하다 보니까 한 4시간 걸려서 세팅다 끝냈어요.

근데.. 너무 좋아요. 제가 써본것중에 최고로 좋은것 같아요. 그.. 거의 Github하고.. 그 뭐야 Mercurial에서, Mercurial 아니구나 Bit bucket 거기서 하는 그런 코드리뷰 있죠. 거의 그정도에 맘먹는 수준이고.

이거가 작동하는 방법은 그래요 그냥. 자체 호스팅 하면 더 편한데 자체 호스팅은 안하더라도 Git Repo나 이런거 있잖아요, SVN Repo라던가 거기 주소 주고 Authentication만 넣어주면 ID, Password. 그러면 지가 알아서 뒤에 Daemon 돌리면 다 Daemon 돌면서 History 다 가져와요. 가져와서 지가 다 리스트를 만드는거에요 Diff list를.

그러면 사람들은 거기가서 리뷰 하고 뭐.. Approve 뭐 Decline 이런거 다 있고 심지어는 Comment 다 달수있고. 그러면 그.. 코드 작성한 사람, 이 역시 그 Phabricator에 Account가 만들어져 있으면 거기서 아.. 이메일이 날라오는 거죠.

근데 Phabricator Authentication도 굉장히 재밌는게 Windows Authentication에서 쓸수있고, 구글로 로그인 하게 할수도 있고 (행복). 정말 다양한거 로그인 하게 되더라고요 그래서 Authentication도 그냥 작동한다고 보면되고.

E-mail Server도 그냥 저는 Ubuntu에서 그.. apt-get있죠? apt-get 해갖고 그냥 Send Mail그거 하니까 그냥 작동하기 시작했고.

그래서 또하나.. 장점은 저는 이거를 되게 필요로 했거든요. 코드가 들어올 때 마다 리드나 이런 사람들이, 아니면 모든 팀원들이 그 코드가 들어왔다는 사실이 이메일로 Notification을 받아야 아 내가 내일 뭔가 리뷰를 해야겠다를 알잖아요.

아니면.. (쩝) 그러니까 원래 Work Work Flow부터 얘기해야 겠구나. 여기 Work Flow가 뭐냐면, 내가 Git에 Commit을 넣어요. 그러면 뭐 1~2분 안에 그 Commit한 내용이 Phabricator에 떠요. 그럼 제가 Phabricator에 제가 들어가서 제 Change List를 보고 거기다가 Reviewer를 추가해야 겠죠.

그럼 그사람이 보고 리뷰를 하던가 아니면 리뷰어가.. 매일마다 아.. 아침에 와서 새로 들어온거 리뷰를 하던가. 근데.. Manual Process가 별로 제가 안좋아하거든요 이거를. 근데 제가 원했던 거는 코드가 들어올때 자동으로 리뷰.. 그 코드를 리뷰를 볼수있는 권한이 있다던가 그 사람한테 아.. Notification이 가서 그거를 보는게 좋은거죠.

그래서 뒤에다 보니까 Phabricator안에 (휠 내리기) 이름은 까먹었는데 그..룰을 만드는 그런 Application이 같이 달려있어요 (휠 내리기). 그걸 보니까 온갖 룰을 만들수 있는데 그중에 제가 좋았던 룰이, 이 Repository에 새로운 Commit이 왔을때 (생각만 해도 행복) 이, 이, 이 사람들을 Reviewer로 추가해라.

그 룰을 설정이 가능해요. 그러면서 그것만 딱 설정해 두면 코드 들어올 때마다 Reviewer한테 Notification가는거에요. 그러고 그사람이 Phabricator들어오면은 리뷰해야될 코드.. 그.. Change가 몇개가 있다고 나오는 거고.

그런데 만약에 그런경우도 있죠. 그.. 티.. 코드리뷰가 단지 lead가 하는게 아니라 그냥 Peer가 해도 되는경우. 그러니까 우리 팀이 예를 들어서 다섯명의 프로그래머인데 그 다섯명의 프로그래머중에 한명이라도 코드리뷰를 보면 옳다고 하겠다.

그게 보통의 코드리뷰 프로세스 같아요. 그런경우에는 어떻게 할까요 보니까 Phabricator웹사이트에 아예 Best Practice라고 나와있어요. 룰을 하나더 만들면 된데요.

그 첫번째 룰은 아까처럼 Auditor 추가하는 건데 Auditor를 다 추가하는거야. 팀원에 다섯명이든 열명이든.

그러고 두번째 룰은 그.. 누군가가 그.. 뭐라그래 Comment를 남긴다거나 diff를 한다거나 뭐 리뷰를 볼때 그 상태가 Approve가 되면은 그.. 아까 그.. Code Reviewer를 추가했던애, 내가 뭐 다섯명이 있다고 하면 제가 여기서 리뷰를 봤어요. 그럼 나머지 네명의 이름을 그냥 리뷰에서 빼버리는 그런 룰을 또 만들수가 있더라고요.

그래서 그것만 작동을 하면은 그냥 코드 들어올 때마다 유저한테 다 이메일 가고 그사람들 리뷰어를 다섯명이 올라왔다가, 그중에 한명이 들어와서 리뷰를 하면 네명이 다 떨어져 나가니까, 코드리뷰 끝난걸로 딱 되는.

그래서 보면서 야 Work Process가 이거면은 Post Review 하나는 끝내주겠구나. 그럼 이게 90%의 일을 해결을 하고, Pre-Review까지 하고 있.. 하고싶으면 그것도 가능해요 이 프로그램에서.

근데 Git 같은 경우에서 곧바로 Check in 할때 Pre-Review를 받으려면 이상한 PHP Command Line 써야되는데, 그건 굉장히 Manual하고 굉장히 Setup.. Customized Setup이라 제가 별로 안좋아해서 안할것같고.

그와 다르게 이제 뭐 Git같은 경우에 보면은 Diff 파일을 만들수가 있잖아요. Change List만든다음에 이게뭐가 다른지 만들어서 Diff가 나오면 그거를.. 그 파일을 어.. 또.. 웹사이트 가서 업로드 해갖고 Pre-Commit 을 요구할수.. 아니 Pre-Commit Review를 요구할순 있는데.

저는.. 이런거.. 이게 사실 처음에 말했어야 되는걸지도 모르겠지만 온갖 좋은 코드리뷰들 다 있고 온갖 뭐 Pre-Commit.. 그 Review Process, 프로그램 없이 하는것도 좋지만 프로세스가 복잡하고 귀찮을수록 사람들은 점점 안하게되요. 그리고 사람들이 원치 않으면 결국 아무도 안하는게 시스템이에요.

그래서 백날 아무리 멋진 시스템 도입해갖고 막~ 이거 정말 대단하다 이거 도입해서 다들 써야된다라고 막 해도 결과적으로 안되는 시스템 있잖아요. 사람들이 안쓰기 시작해서 망하는거. 그런게 이런거의 예라고 전 봐요.

그래서 뭐 회사에 만약에 진짜 멍청하고 병X같은 매니저 있으면 이게 멋지니까 도입해라 다 도입해 놨다가 돈쳐박고 도입해놨다가 아무도 안써서 돈낭비하고 그냥.. 흐지부지되는. 지는 실적쌓을려고 그랬지만 결과적으로 사람들이 이거를 이용할수 있는지 판단력이 없는 그런 멍청한 매니저기 때문에 망하는 경우는 많이 봤죠.

저는 Pre-Review가 그렇다고 봐요. 이게 자동으로 어떻게 할수 있는게 아닌 이상은 어렵다고 보고 물론.. 이런거를 위해 이제 뭐 Git-Repo를 따로 만든다음에 거기에 Push를 하면은 그거에 대해서 이제 Pre-Commit Review가 나오고 그거에 누가 Approve하면은 또 다시 Script를 엮어 와갖고 Approve 됐으니까 이거를, 실제 메인.. 그.. 그.. 뭐야 Remote Repo에 Push를 하는 그런 Workflow로 만드는 경우도 봤는데 Git 전용 Review 시스템은 그런게 있죠.

근데 저는 그렇게 여러가지 스.. 단계가 있다는거 자체가 조금 불안스럽고 굉장히 뭐Complex날 가능성이 많다고 생각해서요. 별로 안좋아하고 정말 그런.. Steady(확고한) 그나마 자동적으로 원하는 사람들은 제일 좋은건 이건거 같아요.

Master Branch는 언제나 뭐 Trunk Branch라고 해서 [Risk] Branch로 두고 모든.. 사람들은 Developement Branch에서 일을 하는거에요. 그러고.. Developement Branch넣는거는 다 Post-Review로 가는거에요. 그러면 Post-Review를 계속 하잖아요?

그러면 어느정도까지 Post-Review가 된다음에 Post View가 된것들만 Main Branch로 Push를 하는거에요. 나중에 Manual하게 누군가가 그러면은.. Main Branch로 Push하기전에 언제나 모든거 리뷰를 하고 Push를 하는거죠.

그렇게 되면은 아까 말했던 그.. 뭐.. Pre-Review의 개념하고 똑같죠. 이 Branch에서 Post-Review가 이 Branch에 들어가는 그 Master Branch에 들어가는거에 Pre-Review가 되는거니까. 뭐 그런방법도 괜찮은거 같고.

아니면 처음에 얘기했듯이 Pre-Review는 그냥 사람 잡고 하는걸로, 그냥 Post-Review... 는 자동으로 해서 사람들이 언제나 볼수있게 하고. 정말 그렇게 Mission Critical한 Pre-Review라며는 사람을 잡아서 그사람 좀 방해하더라도 하는게.. 올바른 Mix가 아닐까 봐요.

예전에 무슨.. 기.. 로봇의 습격이라 그랬나 제가 뭐 이상한거에서 기계 만능주의를 좀 피하자는 얘기를 했던것처럼, 결과적으론 기계가 저희 Work Process를 개선할수 있고 그리고 정말 Productify들을 향상할수 있는 그런 Process가 동분 만.. 집어넣는 거고 그게 제가 볼땐 Post-Review고.

그 기계 완전화 자동화를 통해서 오히려 Process 복잡해지고 그 뭔가 Complex나갖고 사람이 들어가서 고쳐야되는 그런 일이 많아지게 되면 오히려 그거는 사람손에 맡기는게 나은거 같다는게 제 주의기 때매 저는.. Pre-Review는 자동으로 안하는게 지금 맞다고 봐요.

물론, 군사업체 계시는 분들은 꼭 하세요 사람 잡아서 하세요. 그거는 당연히 해야되는거고.

저희처럼 이제 게임 만들거나 일반 Application, Mission Critical한거 아닌거, Banking System 아닌거 그런거 만드는 사람들은 이런 Process를 하는게 더 좋을것 같고.

그.. Code Review Process를 집어넣기.. 집어넣고 싶으시면 자기가 가지고 있는 Supportion이라던가 Git이라던가 Mercurial Code Repo 에 Report에, 그러면 Phabricator 강력추천해요. 한번 꼭 보세요.

예.. 하.. 힘들다. 포프였습니다.