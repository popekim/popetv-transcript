예, 안녕하세요. 포프입니다. 진짜 오랜만이죠? 그동안 이것저것 좀 바쁜 일이 있었어요. 오늘 할 얘기는 단순 업무 쪽? 반복 업무 쪽? 요런 관련된 이야기를 좀 하려고 해요. 제가 이 이야기를 어떻게 풀어나갈지 모르겠지만, 일단 시작은 해볼게요.

POCU 아카데미를 제가 운영하고 있죠. 거기를 들어 보신 분은 아시겠지만, 처음에는 뭔가 단순하게 사람들이 하던 일들이 점점 자동화가 되어가는 것들을 보실 거예요. 즉, 자동화를 저희가 충분히 할 수 있으면 그만큼 단순 반복 업무를 줄일 수가 있고, 그러면 저희 직원들이 좀 더 재밌는 일을 할 수가 있는 거고, 우리가 단순 반복 업무가 너무 많아서 누군가를 채용을 해야 된다면 그건 인건비거든요. 그러나 우리들은 다 프로그래머니까 그걸 자동화시키면은 그 순간부터는 그 인건비를 추가로 지출하지 않아도 되니까, 그만큼 좀 더 소수의 인원으로 즐거운 일하면서 회사가 커지면서 겪는 여러 가지 문제도 안 겪을 수가 있다는 장점이 있어요.

근데 단순히 저희 회사를 떠나서 프로그래머 면접을 하거나, 아니면 어떤 직장인을 누구를 뽑더라도 이 부분은 사장님들이나 누구든 쉽게 물어보는 것들인 거 같아요. '단순 업무 어떻게 생각하세요?' '뭐, 단순 업무 좋아하세요?' 요런 식의 개념들? '단순 업무 잘하세요?'

여기서 저도 사장님의 입장에서 있어 봤고, 저도 직장인 입장에서 있어 봤고, 제 개인 생활에서도 주변에 많은 사람을 보면서 느낀 건 뭐냐면, 여기서 어떤 답을 하든 간에 똑같은 말을 전혀 다른 의미로 이야기하는 사람들이 있다는 걸 깨달았어요.

일단 그 두 가지 말을 알려 드릴게요. 뭐냐면 하나는 누군가 '단순 업무 어떻게 생각하세요?' 그러면 '저 단순 업무 참 싫어합니다' 요 부분 첫 번째. 그리고 두 번째는 '저 단순 업무 잘합니다.' 요렇게 말하는 사람들.

자, '단순 업무를 싫어합니다'라고 말하는 사람들한테는 추가적으로 물어봐야 할 이야기가 있더라고요. 뭐냐면은, '단순 업무를 싫어해요~ 오케이. 그래, 좋아하지 않는다. 싫어한다. 그러면 내가 너한테 단순 업무를 주면은 할 거냐? 안 할 거냐?' 이게 첫 번째고, 두 번째는 단순 업무를 싫어한다면은 '그거를 본인이 해결을 할 거냐?' 이 문젠 거 같아요.

제가 이야기를 왜 드리냐면은 저도 단순 업무는 별로 좋아하진 않아요. 그러나 저희 직원들도 그렇고 제 주변 사람들도 얘기하는데, 저는 단순 업무에 정말 최적화된 사람이라고 얘기해요. 왜냐면은 정말 난 단순 업무가 싫어. 제가 싫어하는 이유는 '왜 이 반복작업을 내가 하면서 내 시간을 낭비하느냐?' 이거를 어떻게든 반복작업이 아니게 만들어 두고, 난 그 시간에 좀 더 부가가치가 높은 일을 하고 싶어요.

어찌 보면은 자뻑이죠. '나의 가치가 이만큼인데 나는 단순 업무를 할 사람이 아니야.' 그런데 내가 지금 단순 업무는 어쩔 수 없이 해야 돼. 그럼 저는 그 감정 다 죽이고 해요. 그냥... 예전에 제 다른 포프TV 비디오 보시면 아시겠지만, 저는 감정이라든가 고통이라든가 이런 거를 그냥 눌러버리고 생각을 안 하고 뭔가에 집중을 되게 잘하는 스타일이에요.

그래서 어쨌든 간에 해야 되는 일이니까 단순 업무를 하고, 그러면서 하기 싫으니까 이 단순 업무를 어떻게든 자동화시킬 방법을 점점 고안을 하는 거죠. 그런데 제가 느낀 거는 뭐였냐면은, 처음에 제가 단순 업무를 하지 않은 채 얘를 자동화시키자라고 하면은 자동화가 잘 안돼요. 왜냐면은 단순 업무를 실제로 해보고 어디서 정말 시간이 많이 낭비되는지 알고, 어느 부분을 반복으로 쉽게 처리할 수 있냐. 단순 업무를 하더라도 어떻게 일을 진행하느냐에 따라, 요렇게 잘라서 하느냐 이렇게 잘라서 하느냐에 따라 효율이 달라지거든요.

그래서 가장 내가 효율을 뽑을 수 있는 방법을 찾은 다음에, 그거를 그대로 기계로 옮기는 과정을 거치게 돼요. 이거는 저처럼 단순 업무 싫어하지만 그래도 끈기 있게 버티고 할 수 있는 사람 얘기고, 제가 채용했던 사람들이라거나 같이 일해봤던 사람들 중에 '단순 업무를 싫어한다'라고 말한 사람 중에 이렇게 작동 안 하는 사람이 있어요.

'단순 업무 싫어합니다.' 그럴 때 단순 업무를 주면은 안 해요. 그냥 싫기 때문에... 그러면 단순 업무를 없앨 수 있는 방법을 찾을 수 있냐? 뭐~ 찾지도 않아요. 그니까 그 사람도 똑같은 개념인 거예요. 단순 업무가 뭐 지루하든 간에, 내가 더 중요한 일을 한다고 생각을 하든 간에, 어쨌든 간에 그게 싫어서 그냥 안 하는 거예요. 즉, 남들 누군가가 이 단순 업무를 대신 해 줘야 한다고 생각을 하는 거죠.

물론 회사가 커지면서 그런 일이 있지만, 내가 아무리 고지능을 필요로 하는 일을 하더라도 그런 단순 업무가 필요한 경우도 있어요. 특히 새로 나온 기술이라던가 그런 거에선. 근데 그것조차도 이제 못 하거나 안 하는 거죠. 실제 그 사람들이 그런 단순 업무를 해야만 한다, 그럼 잘 못해요. 그게 본인이 하기 싫어서 못 하는 걸 수도 있고, 아니면은 그냥 단순 업무 자체를 못 하는 사람, 훈련이 안 되었기 때문에 못 하는 걸 수도 있어요. 근데 그거는 제가 판단이 불가능하기 때문에 넘어갈게요.

근데 그렇게 단순 업무를 싫어하는 사람들한테 단순 업무를 안 주고 무조건 좋은 업무만 줄 수 있냐? 제가 그런 회사는 저도 못 다녀봤고, 작은 회사부터 큰 회사까지~ 제 회사에서도 그렇지 못하기 때문에 이분들은 어쨌든 간에 내가 너무 소중한 거야. 그래서 그렇게 소중한 사람들을 곱게 가꿀 수 있는 온실 같은 회사가 있지 않는 이상은 어렵지 않을까 하는 생각을 해요. 그래서 고런 것들은 사장님들이 채용 면접할 때 좀 조심하시기 바라고...

그 반대인 사람도 있어요. '저 단순업무 좋아합니다~' 이게 단순 업무를 저처럼 그냥 크게 문제 삼지 않고 할 수 있다, 그런 스타일이면 상관이 없는데. 어떤 사람은 '단순 업무 좋아합니다' 그래서 시켜 보면은, 내가 버는 돈의 값어치가 내가 하는 업무의 양이 아니라, 업무의 부가가치가 아니라, 내가 사용하는 시간이라고 생각하시는 분들도 있어요.

그냥 주면은 해요. 단순 업무~ 똑같이 해요. 그리고 계속 반복을 해요. 개선할 방법을... '자, 몇 번 해봤으니까 어떻게 하면 개선할 수 있을까?' 별로 생각이 없어요. '그냥 저는 똑같이 단순 업무 하면 되는 거 아닌가요?' 요런 식으로 생각하시는 분들이 있어요.

예를 들어서 5천 줄짜리 문서가 있어요. 그럼 거기서 잘못된 것들 몇 개가 있는 거 고치는 거야. 그럼 프로그래머니까 정규식이 어떻게 도는지만 대충 알면은, 정규식을 직접 작성하지 않아도 어떤 텍스트를 찾고, 어떤 텍스트 뒤에 스페이스를 붙이든지 뭐를 붙이든지, 이런 식으로 찾는 것만으로도 굉장히 빨리 모든 걸 검색을 할 수가 있거든요. 근데 그러지 않고 문서 천 줄짜리를 처음부터 끝까지 쭉 읽으면서 하나씩 하나씩 고치는 분들이 있어요. 왜? 거 단순 업무니까.

그리고 그렇게 찾는 게 이제 문서가 많아지고 이러면은 어느 순간 프로그램을 작성할 수도 있거든요. 정말 정규식으로 어쩔 수 없이 작성을 하던가, 아니면 for 문으로 작성을 하던가. 뭐 그래도 굳이 안 그래요. 가장 내가 효율적으로 빨리 결론에 도달할 수 있는 게 아니라, 그냥 그 일... 이거 한 줄 읽는데 뭐 30초씩 걸리니까 시간이 500분일 거야. 이런 개념으로 그냥 '내 시간 = 일, 어떤 일이든 상관없어. 그 시간을 사용할 거야'라고 생각하는 거죠.

요렇게 말씀을 드리면 어떤 분들은 그래요. '그 사람들 봉급을 받는 게 너무 적은 게 아니냐?' 뭐 그런 분들, 그거를 위해서 채용한 사람들도 있고, 그분들이 그렇게 일하면서 뭐 그렇게 계속 일하시면 돈값하는 거니까 문제는 없어요. 근데 그분들이 뭔가 더 뛰어난 걸 발견하고 빨리 할 수 있는 방법을 찾으면은, '아, 이 사람은 아웃풋이 많구나' 그래서 봉급을 올려 줄 뿐이지.

저는 그 반대로 처음 데려올 때부터 봉급을 1억 정도 이상을 준 사람도 있는데 이렇게 작업하는 사람도 봤어요. 그리고 '야~ 이거 왜 이렇게 빨리 안 해?' 그러면 '뭐, 그냥 이렇게 하면 되지' 그러면서 계속 시간을 낭비하는 경우도 봤어요.

그래서 이거는 단순히 누가 돈을 먼저 주고 아니냐의 문제라기보다는, 제 생각에는 그 사람의 마음가짐. '내가 직업을 어떻게 보느냐' 아니면 '내 성향이 어떻게 되느냐'의 차이인 거 같아요.

그래서 그 얘기했어요. 단순 업무를 좋아하냐 싫어하냐. 그러면 그 반대는 뭐냐면, '단순 업무를 잘하느냐? 못하느냐?' 그건 거 같아요.

자, 좋아하고 싫어하는 건 아는데 잘하느냐의 의미는 뭐냐면은, 일단은 내가 좋아하던 싫어하던 단순 업무를 잘할 수는 있어요. 근데 단순 업무를 잘한다는 개념이 뭐냐면요, 아까 말했듯이 앞에서 '단순 업무 좋아해요'라고 하면서 그냥 꾸준히 하시는 분 있었죠? 그분도 자기가 잘한다고 말할 순 있어요. 왜냐하면 '나는 계속하니까~ 줘도 아무 불만 없이 하니까.'

근데 그거는 최종 결과는 별로 안 좋은 거잖아요? 제가 생각하는 잘한다는 의미는 뭐였냐면은, 남들보다 단순 업무를 굉장히 빠르게 하는 거예요. 그게 잘하는 거야.

그럼 빠르게 한다는 건 뭐냐면은, 그 단순 업무 속에서도 어떻게든 그걸 효율적으로 돌릴 방법을 찾는 거죠. 그걸 찾으려면 뭐가 있어요? 단순 업무를 하다가 '아, 이게 중복이 되는구나. 내가 이걸 어떻게 하면 빠르게 만들겠구나.' 이 생각을 하는 거예요.

그거를 굉장히 잘했던 그런 업계 중에 하나가 제조업체에서 옛날에, 자동화가 덜 되어 있을 때 굉장히 비인간적이라고 욕도 많이 먹었던 업계인데, 뭐냐면은 한 직원이 하나만 하는 거예요. 예를 들어 어떤 제품을 만들 때 세 가지 단계가 있어요.

하나는 뚜껑을 씌우고, 하나는 나사를 꼽고, 하나는 나사를 조이는 거예요. 그럼 한 명이 뚜껑, 나사, 조이기를 다 하는 게 아니라 그냥 한 명은 뚜껑만 계속 덮어. 그럼 옆에 컨베이어 벨트 가고, 한 명은 나사만 꼽아. 다시 컨베이어 벨트로 다음 사람이 조이기만 해요.

물론 단순 반복이기 때문에 이 사람들이 피곤해지고 뭐 어쩌고 해서 문제점들은 많죠. 그리고 정말 기계처럼 도는 거고. 근데 뭐 저희가 컨베이어 벨트까지 안 가더라도, 저희가 일을 하는 방법을 생각하면 되게 간단해요.

저희도 그런 일이 많이 있어요. 굉장히 많은 데이터 마이그레이션 할 때, 수작업 할 수밖에 없는 경우들. 예를 들어 데이터를 가져다가 클릭을 하고, 다음에 무슨 표시를 달아요. '마커'라고 하는, 비디오 데이터 편집할 때 마커를 박은 다음에, 그다음에 마커에 이름을 하나씩 넣어야 해요. 순서대로.

그러면은 어떤 사람들은 어떻게 일을 하냐면요, 그걸 연 다음에 마커를 넣고 이름을 저장하고 세이브하고, 또 다음 위치에 가서 마커를 넣고 이름을 넣고 세이브를 해요. 근데 이렇게 하면은 내가 하는 일이 세 가지 일을 계속 반복하면서 하는 거예요.

여기다 한 가지 스텝이 더 추가가 돼버리면은 조금 더 복잡해져요. 왜냐면 네 가지 일을 계속해야 되는데, 하다 보면은 생각보다 실수가 많아져요. 아무리 집중해도 실수가 많아지고, 집중이 조금만 풀려도 4단계였는데 3단계만 하고 넘어가는 경우도 굉장히 많아요.

근데 그게 아니라 이걸 바꿔서, 연 다음에 마커를 다 박아요. 하나, 둘, 셋, 넷, 다섯, 여섯. 그리고 처음으로 돌아와서 열고 이름 엔터, 열고 이름 엔터, 열고 이름 엔터. 이런 식으로 가면은 그 작업 하나 자체가 굉장히 단순하기 때문에 까먹을 일이 적고.

그리고 마커 다 박은 다음에 제대로 숫자대로 박혔는지 확인하고, 이름 다 넣은 다음에 제대로 이름 들어갔는지 확인하고. 이 과정이 아웃풋은 훨씬 많아요. 이게 제가 아까 말했던, '이렇게 자르느냐, 이렇게 자르느냐'에 따라 다르다고 했어요.

일반 사람들은 이렇게 분리해서 동일한 걸 반복하는 걸 잘 생각을 못 할 수도 있어요. 근데 프로그래머는 할 수밖에 없죠. 왜냐면 이게 옛날에 제가 강의 자료 만든 게 있죠? '태스크 베이스 멀티쓰레딩' 하는 거. 배리어 싱크 박는 거. 그게 이런 개념이거든.

그래서 프로그래밍 공부를 잘하면 '뭐가 가장 효율적으로 도냐? 가장 생각 없이 단순하게 실수 없게 많이 돌릴 수 있는 작업이 뭐냐?'를 아는 거죠. 그래서 그런 식으로 가게 되어 있어요.

저는 그게 단순 작업을 잘하는 사람들이라고 보고, 여기서 재밌는 거는 이미 정형화된 세 가지 스텝이 나와버렸어요. 그럼 얘를 정형화된 스크립트로 작성을 할 수가 있어요. 저희가 실제 그거를 자동화를 최근에 이루었고.

그래서 이런 식으로 보면은 '단순 업무를 잘하냐? 못하냐?'라는 건 누구든 대답은 자유롭게 할 수 있어. 그거를 아시려면 물어봐야 해요. '어떤 단순 업무를 해봤고, 그걸 어떤 식으로 처리를 했느냐? 처음 시작은 어떻게 했고, 마지막에 어떻게 됐냐?'

자, 여기서 정말 어떤 회사에서도 원하는 사람들이 어떤 사람인지 이제 알려 드릴게요. 단순 업무 주면은 일 잘해요. 묵묵히 잘해요. 싫다고는 말할 수 있지만 그래도 해요. '이거 별로 안 좋은데요. 제가 할게요.' 이렇게 말할 수도 있어.

그러면은 내가 단순 업무를, 내 개인적인 감정이 싫고 좋고는 중요하지 않아. 내가 싫음에도 불구하고 할 수 있는 거, 그 감정을 죽이고도 할 수 있는 사람. 굉장히 중요한 거죠? 왜냐하면 필요하니까, 어쩔 수 없이 누군가 해야 되니까.

그리고 하면서 그걸 버틸 수 있는 끈기. 자, 감정조절. 그쵸? 그리고 버틸 수 있는 끈기. 바보처럼 호구되란 얘기가 아니라, 하기 싫어. 그래도 해야 되면 하는 거야. 그게 팀플레이든 뭐든.

그리고 끈기. 그 단순한 거. '어~ 지루해. 두 개 바꿨더니 못 하겠어'가 아니라, '데이터 천 개 바꿀 수 있어. 이거 뭐 그냥 내가 감정 죽이고 1분에 10개씩 처리하면 100분에 끝나지.' 뭐 이런 개념으로... 처리 가능하고.

처리하는 동안 패턴을 볼 수 있는 능력. '아~ 이게 여기서 반복이 되는구나.' 그리고 그거를 좀 더 효율적으로, 패턴 되는 거를 좀 더 사람이 따라갈 수 있는 자잘한 단계들. 그걸 반복을 시키는... (즉, 사람에 대한 이해도 중요한 거죠?) 그런 패턴화 가능한 거.

그리고 최종적으로 그 패턴이 정립이 됐으면 어떻게 자동화를 해야 될지 제안을 할 수 있으면 좋고, 뭐 만들 수 있으면 더 좋고. 그럴 수 있는 사람이에요.

이게 4가지, 저희가 말하는 단순 업무 잘하는 사람이에요. 이거에서 하나라도 빠지면 잘하는 건 아니에요. 솔직히 얘기하면... 그냥 그렇게 말하고 다 퉁칠 수 있는 게 전부지. 여기서 하나씩 어긋나는 사람들은 많죠. 그 사람들은 그냥 단순 업무를 뭐, 그거에 적합한 사람이 아니고, 엄밀하게 말하면은 개인적인 성장도 이게 되는 사람들보단 느릴 수밖에 없어요.

왜냐면 감정 제어되죠? 반복 작업하면서 몸에 익죠? 그거 통해서 새로운 방식을 개발 가능하죠? 그거로부터 개선점을 찾을 수 있어요.

어떤 프로그램도 이렇게 작성하는 사람과, '아~ 이거 버그 나서 짜증 나. 아~ 이거 넘어가. 이렇게 해, 이렇게 하면 된대. 넘어가~ 몰라~ 넘어가.' 그리고 내가 안 고치잖아? 그럼 어느 순간 남이 고치겠죠?

그 이상하게 계속 떡칠하고 가는 게 작동을 할 리가 없잖아요. 그럼 남이 고치는 걸 본인도 알아요. 왜냐면 어느 순간 고쳐져 있으니까, 그걸 어떻게 몰라? 주니어는 모를 수 있어도 경력 1~2년만 되면 알지.

'내가 안 해도 남이 고치니까~' 라는 마음가짐을 먹는다는 것 자체가 팀플레이어가 아닌 거고, 사실은... 그리고 그게 쌓이다 보면 평판도 안 좋아지고, 당연히 사람들 신뢰를 점점 잃죠? 그걸 나중에 깨닫고, 아니면 본인이 알고 있지만 나중에 피할 수가 없다면 이미 늦어진 상황일 수도 있고.

이거를 보면은 제가 최근에 채팅방이나 사람들 있는 데서, 거기서 얘기를 많이 했던 게 지나고 보니까 이런저런 문제를 보는 시각, 뭐 이런 것도 다 중요하지만 결과적으로는 끈기가 중요하다는 얘기를 많이 했어요. 그걸 버틸 수 있는 능력. 오랜 시간 동안. 그 얘기예요.

굉장히 유명한 얘기가 하나 있죠. 그 '게으른 사람들이 혁신을 만들어 낸다.' 그건 잘못된 얘기 같아요. 무슨 예전에 TV 리모컨 없을 때 손으로 돌리고 이랬던 시절이 있어요. 그러면 '얼마나 게을러서 TV 돌리고 싶지 않아서 이거를 개발했기 때문에 그 사람이 된 거다. 그 사람은 게을러서 된 거다'라고 하는데, 사실은 제가 말했던 것들이 그 사람의 성향이었을 거야.

'내가 왜 이거를 일일이 일어나서 돌려야 되지?' '이거 좀 자동으로 여기서 돌릴 수 있으면 좋겠는데?' 왜냐면 맨날 반복하면서 시간낭비를 하니까. '아~ 그러면 얘를 만들어 보자'는 생각이 들었겠죠. 그게 아니라 게으른 사람들은 '아~ 나 저거 하기 싫어. 야! 니가 가서 돌려. 야! 니가 가서 돌려.' 결국 남보고 해달란 얘기잖아? 내가 하기 싫어도 누군가 해야 되니까.

'아~ 니가 맨날 바꾸는 게 좀 괴롭다. 내가 이걸 개발해 줄게.' 이런 사람이면 되는 거지. 그쵸? 그래서 자기애가 엄청 강하거나, 그니까 이기적이지 않고 자기애가 엄청 강하거나, 그런 사람일 때만 혁신은 가능한 거 같아요.

요거를 보시고 아마 요런 반복 작업 이야기라던가 이런 거는 프로그래머 면접에서 많이 들으셨을 거예요. 본인이 여태까지 어떻게 대답을 하고 있었는지, 그리고 면접관의 입장에서는 '아, 내가 이런 질문을 했을 때 어느 정도 질문까지 끝까지 못 들어가서 잘못 채용한 것들이 있구나.' (저도 그걸 느꼈기 때문에.)

그런 것도 생각해 보시면 재밌을 거 같아요. 이 정도면 충분히 생각할 만한 재밌는 떡밥을 던져 드린 거 같죠?

그럼 여기서 끊을게요. 포프였습니다.