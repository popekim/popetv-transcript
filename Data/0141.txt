오늘 할 얘기는 인터페이스에 대해서 좀 얘기해보려고 해요. 인터페이스라고 하면은 뭐 프로그램에서 그런 거 있잖아요. 제가 말하는 인터페이스는 "프로그램"에서의 인터페이스예요. 뭐 유저 인터페이스 이런 게 아니라.

저희가 다형성이나 추상화, 다형성의 개념을 도입할 때, 그러니까 실제 오브젝트의 형태는 하나인데 거기서 함수를 호출했을 때 각 구현 따라 행태가 달라지는 것, 그런 거를 구현하려고 할 때 OOP에서는 아무래도 인터페이스를 쓰게 되잖아요. 결국에는 Virtual Function 얘기인데.

그래서 인터페이스는 정말 구현하는 구현 클래스가 가져야 하는 함수의 이름이라던가 매개변수와 리턴 타입을 정의하고, 실제 그 속의 내부 행동이 어떻게 도는지는 각 Implementation에 따라 따로따로 만들 수 있게 하는 개념이죠.

근데 참 좋은 개념이긴 한데, 뭐 어찌 보면 올바른 practice라고 해서 여기저기서 강요하고 있는 부분이기도 하고. 일단 게임 쪽에서는 성능 때문에 그걸 안 쓰는 경우도 있죠. 정말 필요한 데가 아니면 추상화 쓰지 말라고 하는 편이니까.

저는 그걸 떠나서, 지금 제가 있는 회사는 웹 회사거든요. 그래서 게임 쪽보다는 성능에 대한 걱정이 좀 적어요. 그보다는 올바른 practice를 중요시하는 것 같긴 한데. 제 개념에서는 아무리 올바르고 뛰어난 practice라고 여기저기서 광고하고 다녀도 실제 개발자가 봤을 때 코드가 읽기 어렵고, 디버깅이 어려워지면 그건 잘못된 practice라고 봐요. 잘못된 원칙이라고 보고.

제가 요즘 보고 있는 코드가 좀 그런 게 많아요. 보면서 모든 코드가, 모든 함수에서 return 하는 거라던가 함수의 매개변수를 받는 거라던가, 이게 전부 다 인터페이스로 받는 함수가 너무나 많아요.

그리고 문제는, 그 인터페이스가 구현이 몇 개가 있냐? 저희 지금 코드 베이스에서는 인터페이스 하나, 구현 하나예요. 결국 인터페이스가 구현하고 one-to-one 관계인데.

이거를 나중에 implementation이 바뀌었을 때 다른 함수를 고치지 않아야 되니까, 고치고 싶지 않으니까 인터페이스 만든 걸 추상화시키겠다는 생각은 나쁜 건 아닌데. 문제는 이게 코드를 읽을 때마다 굉장히 짜증이 나요. 코드를 읽을 때 모든 게 인터페이스가 돼 있으니까.

느낌에 "이게 구현이 어떤 구현일까?"를 모르잖아요. 그러면 그 코드를 보기 위해서 F12를 눌렀다. 그러면 실제는 인터페이스 코드로 가지, implementation 코드로 가지도 않거든요. 그리고 implementation이 과연 실제 인터페이스에 들어오는 implementation이 뭔지 알기 위해서는 코드 뒤지고, 읽어보고... 이러는 것도 귀찮고.

그래서 제가 이제 저하고 굉장히 친하고, 제가 존경하는 프로그래머가 하나 있어요. 러시아 친구인데. 그 친구하고 한번 이런 얘기를 해봤어요. "나는 개인적으로 이게 좀 싫은데, 너는 어떻게 생각하냐?"

이 친구가 굉장히 아키텍처라던가 그런 거에 빠삭한 친구고 신경 많이 쓰는 친구거든요. 놀랍게도 이 친구도 저하고 동의를 하더라고요. 이 인터페이스를 만드는 건 솔직한 얘기로 두 가지 중에 하나라는 거예요.

결과적으론 implementation이 많거나, 그래서 그 implementation이 많은 걸 각자 인터페이스 하나로 동일하게 쓰고 싶거나. 아니면 implementation이 하나더라도 우리가 지금 만드는 코드가 라이브러리가 돼서 이걸 외부 사람한테 팔 때. 외부 사람들은 저희 라이브러리에 대한 소스코드가 없는 거죠. 그러면 저희가 인터페이스를 노출하면, 걔네들은 그 인터페이스를 기반으로 다른 implementation을 만들어서 그걸로 함수를 호출하더라도 똑같이 호출되고 결과도 얻을 수 있게 하는... 그런 의미에서는 인터페이스가 맞다.

근데 지금 저희가 있는 데처럼, 이미 내부 라이브러리고 이 라이브러리를 웹에 가져다 팔지도 않고 저희 제품에 쓰는 라이브러리고. 언제든 저희가 뭔가 바꾸고 싶으면 소스코드를 고칠 수 있거든요.

그래서 그런 상황에서는 차라리 인터페이스 같은 추상화를 만들어서 코드 읽기도 복잡해지고, 디버깅도 어렵게 할 필요가 뭐가 있냐. 차라리 implementation 하나, Concrete 클래스(실제 구현 클래스)를 그냥 쓰는 게 훨씬 낫다라고 이야기하더라고요. 저도 굉장히 동의했어요.

그러면서 또 한 얘기가, 제 생각인데. "인터페이스를 하나 만들어놓고 implementation을 만들면 나중에 다른 implementation을 만들 때, 인터페이스를 안 썼다면 그 implementation을 매개변수로 받았던 그 모든 함수로 가서 고쳐야 되는 단점도 있지 않냐?"라고 이야기를 했어요.

인터페이스를 미리 정해두면 그거에 따라가면서 다른 것에 대한 엉뚱한 코드 체인지를 만들 가능성도 적고. 그런데 이건 제가 말하고 나서 곧바로 그렇지 않다는 걸 겪었거든요.

문제는 뭐냐면... 정말 인터페이스를 만들고 implementation을 만드는 아키텍처를 만들 상황이라면, System Architect가 처음부터 requirement를 다 구하고 거기에 맞춰 인터페이스를 정의한 다음에, implementation을 다른 사람에게 줘서 만들라 할 때는 말이 돼요. 처음부터 설계를 완벽하게 하는 거예요. 그래서 인터페이스는 완벽하고, 구현은 내가 안 하지만 다른 사람이 해도 똑같이 나오게.

굉장히 설계 시간이 많이 들어가죠. 어떤 의미에서는. 예전에 말했듯이 mission critical한 업종에서는 그게 맞을 수도 있어요. 비행기, 미사일, 의료기기 이런 건 말이 돼요.

근데 저희같이 게임이나 웹처럼 계속 무수히 변하는 상황에서는 비즈니스 requirement가 계속 바뀌거든요. 제가 얼마 지나지 않아서 본 게 뭐냐면, 이미 인터페이스와 implementation이 있는 코드였는데 뭔가를 더 추가해야 됐어요. 근데 인터페이스를 바꾸지 않고서는 추가가 불가능한 거예요. 그만큼 비즈니스 가치가 바뀐 거죠.

그 상황을 보면서 느낀 게, 인터페이스는 정말 필요할 때 만들어서 추가하는 게 낫지, 처음부터 괜히 premature하게(너무 일찍) 만드는 건 좋지 않다는 거예요. "Premature optimization is the root of all evil" 같은 얘기랑 똑같이.

인터페이스를 올바른 아키텍처다 하고 만들어봐야, 결과적으로 뭔가를 추가할 때마다 인터페이스와 implementation을 동시에 고치는 일이 많고. 다른 implementation이 들어오기 시작하면 이미 그 순간 인터페이스가 맞지 않는 경우가 있어서 굉장히 많은 코드를 바꿔야 돼요.

그럴 바에는 차라리 처음부터 인터페이스가 필요 없다면 implementation으로 가고, 나중에 필요할 때 추가하는 게 맞는 것 같아요. 지금 본 코드만 해도 모든 게 인터페이스+implementation 하나씩 갈라져 있는데, 정말 다른 implementation을 만들 가능성은 굉장히 적어 보여요.

결과적으로 이런 걸 열 개 만들면, 그중 한두 개 정도? 나중에 implementation을 추가로 만들 수 있겠다 싶어요. 그러면 20%의 일을 편하게 하기 위해 80%의 일을 불편하게 한다는 건데, 그게 이해가 안 되고.

그리고 그 20%를 편하게 한다고 하지만 정작 다른 implementation이 들어올 때 이미 인터페이스까지 바꿔야 될 가능성이 있어서 그것도 별로 올바른 방식 같지 않아요.

제 생각에는 진짜 외부에 내다 파는 라이브러리가 아니고, 정말 처음부터 스펙 완벽하게 잡아 절대 변하지 않는 인터페이스를 만들 게 아니라면, 차라리 코드 바꾸기 쉽고 읽기 쉽고 짜기 쉽고. 그렇게 implementation으로 떡칠한 다음에 바꾸고 바꾸고 하다가 어느 순간 완성이 되면, 그때 필요하다면 인터페이스를 추가해도 괜찮지 않을까.

이게 인터페이스에만 한정되는 얘기는 아니에요. 가끔 책에서 어줍잖게 읽고 "아 이게 좋은 방식이다"라고 생각해서 적용했다가 오히려 불편해지는 경우가 많거든요.

한국 모 유명 게임회사에서 말도 안 되는 템플릿 같은 거 만든 사례도 소문으로 들었고. 그래서 예전에도 몇 번 했던 얘기지만, 정말 코드는 군사 쪽이 아니라면 몇 번이나 바꿔서 짜야 되고, 몇 번이나 refactoring 할 걸 각오해야 돼요.

그러면 읽기 편하고, 저 혼자만이 아니라 다른 사람도 읽기 편하고, 디버깅도 쉬워야 하고. 결과적으로 읽기 편하고 디버깅 쉬운 게 가장 뛰어난 코드 같아요. 그걸 저해하는 요소들을 적용할 때마다 반드시 필요한 건지 확인하고, 필요할 때만 적용하고 아니면 차라리 단순하게 가는 게 나은 것 같아요.

그래서 뭐, 그 정도... 오늘은 포프였습니다!