안녕하세요. 포프입니다.
오늘은 UTC 타임에 대해 얘기를 좀 해보려고 해요.
되게 재밌는 것 중에 하나인데 이런 부분이
예전에 한때 처음에 유닉스 타임이 아니구나
처음에 MS-DOS 같은 데서 시간을 적을 때
밀레니엄 Y2K 문제 그때 날리쳤던 거랑 되게 비슷한 건데 어이가 없지만
해를 마지막 뒤 두 자리만 적었었어요.
왜냐하면 그때는 100명 이상 사는 사람도 잘 없었고
그래서 그냥 두 자리만 있어도 크게 문제 없겠지 이렇게 시작을 했었겠죠.
그러다가 2000년도가 되면서 앞의 두 자리가 바뀌어 버리니까
그때부터 해를 적는 걸 내 자리로 늘려야 되니 하면서
그게 큰 문제라니 뭐 하느니 그래가지고
온갖 난리 쳐가지고 엄청 돈 벌어 먹었던
사건이 Y2K인데 그런 것도 있었고
그리고 한동안 이거는 좀 레전드 같은 얘기죠 사실은
빌게이츠였나 누가 옛날에
네가 메모리가 640KB 이상 필요한 게 뭐 있겠니? 라고 했는데
지금 메모리가 32GB 달고 살고 있고
그런 식으로 예전에 만들었던 그런 assumption들 가정들
아니면 그때는 단지 필요가 없었기 때문에 신경을 안 썼던 부분들이
점점 사회가 발전해가고 해가 흘러가고 기술이 발전해가면서
새로운 표준으로 바뀌어야 되는 경우가 점점 나오고 있어요.
그래서 제가 그 중에 하나라고도 생각하는 게 바로 이 UTC 타임이에요.
일반적으로 이제 뭐 자바를 쓰시는 분도 그렇고
C#을 좀 옛날 코드를 쓰시는 분도 그렇고
이제 뭐 그 뭐야 유닉스 타임이라던가 유닉스 타임이 아니다.
C타임 이런 거를 봐도
뭐 이제 시간을 표현하는 방식이 되게 좀 옛날스러운 것들이 있어요 사실은
그리고 지금 제가 말하려고 하는 UTC 타임 결과적으로 뭐냐면
각 나라마다 원래 타임존이 있잖아요.
특히 이제 나라가 좁으면 크게 문제가 안 돼요.
한국 타임존은 무슨 뭐 플러스 7인가?
그러니까 영국 그리니치 천문댕그 거기가 타임존이 0이에요.
그럼 거기가
만약에 12시면은 타임존 플러스 1이면은 그게 아마 1시고
타임존 마이너스 1이면 11시고 이럴 거예요.
그래서 각 지구를 돌아가면서 그 타임존을 이제 플러스 12 마이너스 12로 나눠 놨겠죠.
그래서 이제 한국이 아마 마이너스 7인가 플러스 7인가 그렇고
제가 있는 쪽이 아마 플러스 8인가 마이너스 8인가 그래요.
그래서 저쪽을 이제 뭐 퍼시픽 타임이라고 PST라고도 하고 LA 타임이라고도 하는데
그럼 이제 미국이나 이제 캐나다 같이 큰 나라들은
타임존이 여러 개일 수밖에 없잖아요.
나라가 워낙 크니까 저희가 타임존이 4개예요.
이제 한국은 하나밖에 없지.
근데 한국하고 중국도 1시간이 차이가 나요. 베이징이 사실은.
그래서 그런 타임존의 문제가 뭐냐면
예전에 그냥 인터넷 없고 그냥 로컬 서버에서 그냥 쓸 때
나는 한국 사람만 서비스 할 거야 나는 이 조그만 지방만 서비스 할 거야 라고 할 때
시간을 적는 거를 그냥 그 로컬 타임으로 해도 크게 문제가 없었어요.
그래서 그 당시에 많이 했던 코딩 스타일 중에 하나가 로컬 타임으로 저장하는 거
근데 로컬 타임은 어디서 뭐냐
서버의 시간셋을 서버 타임이죠 사실은
서버를 이제 내가 서버를 서울에 두면서도 서버의 타임존을 미국으로 들 수도 있어요.
그럼 그냥 미국 시간이 들어가는 거죠.
그래서 그런 식으로 서비스를 많이 했어요.
근데 이제 모든 게 인터넷으로 연결이 되고 사람들이 이제 한 군데 서비스가 아니라 세 개를 서비스하는 그런 게 나오잖아요.
그러면 내가 무슨 예를 들어서 여기서 듣는 게 아니라
트위터를 아침 9시에 썼다고 해서 한국 사람들 폰에서 트위터가 아침 9시에 썼다고 나오는 건 말이 안 되잖아요.
아니면 한국에서 트위터를 썼어.
근데 한국은 보통 하루가 빠르거든요 저희보다.
그러면 거기서 이제 트위터 쓴 게 이제 새해인데 2017년
나는 아직 2016년인데 왜 새해로 나오지 이런 문제가 있고요.
근데 생각보다 아직도 굉장히 많은 서비스들이 UTC를 안 써요.
그러니까 UTC를 쓴 얘기가 뭐냐면
시간을 적을 때 타임존 정보까지 같이 적는 법이 있어요.
이거는 이 시간 대 이 시간의 타임존은 이거였다고 적는 법이 있고
아니면 시간을 그냥 저장할 때 서버 같은데 그냥 아까 말했던 그리니치 시간 그게 이제 표준이니까
타임존이 0으로 보는 거니까 그 시간으로 적어두고 아 이거는 그리니치 시간으로 이 시간이었어.
그러면 나는 지금 서울에 있으니까 서울 시기면 이게 몇 시일까.
그러면 그거를 시간을 추가하든 빼주든 해서 그냥 보여주면 되는 거죠.
보여줄 때만 그 시간을 변환해 주면 되는 거거든요.
근데 아직도 서버에 너무나 많이 너무나 많이 로컬타임을 박아요.
그래서 아 이건 좀 아니지 않나.
제가 한국 서비스 볼 때마다 로컬타임을 박는 걸 너무 많이 봤었고
그리고 그 두 번째로 이제 최근에 한 번 또 이거는 미국 회사긴 했는데 그 회사 거를 하는데
시간을 UTC로 안 주는 거야.
근데 표준상으로 보면은 걔네들이 쓰던 게 이제 유닉스 에포치 타임이었거든요.
유닉스 에포치 타임은 기본적으로 원래 그리니치 시간을 주게 돼 있어요.
근데 서버 세팅이 잘못되어 있다 보니까 시간이 그 UTC로 안 오고 말도 안 되게 무슨 인디아 시간이었나 뭐 이상한 시간이 오는 거예요.
그래서 그거 갖고 이제 한 번 좀 걔네들하고 몇 번 왔다 갔다 하면서 야 이거 너네 UTC 아니라고 그러니까
아 쟤네 맞다고 우기는 했는데 아니요 해보라고 아니라고 그래서 되게 많이 얘기를 했었죠.
그러니까 이제 문제가 뭐냐면 걔네들은 아마 코딩을 짤 때 그냥 서버 시간을 그냥 DB에 박은 거예요.
그러니까 생각이 없는 거죠 그냥.
아 서버 시간을 박으면 되겠구나.
그리고 아니면은 이제 서버 세팅을 UTC로 하면 되겠구나 생각을 한 거겠죠.
근데 서버 세팅을 UTC로 안 한 거야.
그래서 참 안쓰러운 일이죠 사실은.
아...
그래서 저는 DB에 기본적으로 데이트 타임을 안 한 거예요.

그래서 서버에 UTC를 박을 때는 저는 UTC로 무조건 박아요.
그리고 만약에 거기에 이제 타임존이 안 들어가 있는 그런 컬럼이라면 이름에 무조건 UTC로 보고
굳이 이거를 다른 시간 존으로 쓰고 싶으면 거기다 이제 그 어떤 시간 존에 들어갔는지를 컬럼 네임에 써주면 깨끗하다고 보거든요.
그래서 저는 이렇게 하는데
그래서 제가 하고 싶은 말은 그냥 서버에 박을 때는 UTC로 박자.
왜냐면은 웬만한 언어에서 UTC 시간을 구해오는 함수들이 이제 있거든요.

제가 썼던 자바에서는 막 타임오프셋 넣고 조금 복잡하긴 했는데
시작 같은 경우에는 그냥 데이트 타임 UTC NOW 이런 함수가 있어요.
그럼 UTC 시간을 그냥 줘요.
그리고 그렇게 해서 데이트 타임 오브젝트를 받을 때
이 데이트 타임 오브젝트에 이게 어떤 종류인지 이게 UTC인지 아니면은 뭐 서버 타임이라고 하나 로컬인지 나오는 게 있어요.
그래서 그 멤버 변수를 보는 것만으로도 이게 UTC 타임이라고 하는 거죠.


UTC 타임인지 아닌지 볼 수도 있고
근데 C#에 그런 데이트 타임 카인드 종류 멤버 변수를 넣는 것도 약간은 핵이라고 생각해요.
그냥 옛날에 데이트 타임 오브젝트를 썼으니까 UTC 생각 없이
그거를 옛날 거랑 심리스하게 지원을 해주기 위해서 어쩔 수 없이 넣은 것 같은데
그거 말고 이제 데이트 타임 오프셋이라는 오브젝트도 있거든요.
근데 그거는 기본적으로 오브젝트 안에 오프셋이 같이 들어가 있는 거죠.
이게 오프셋 0인지 오프셋 8인지.
오브젝트를 보는 것만으로도 아 이게 어떤 타임 존을 가지고 있는 거구나라는 생각을 할 수 있으니까
좀 더 안전하게 쓸 수가 있죠.
데이트 타임을 쓰는 사람은 그냥 흔히 봤을 때 그냥 이게 UTC인지 아닌지 생각을 안 해요.
그냥 아 그냥 데이트 타임이겠지.
그리고 그거 확인 안 하고 써서 버그가 나는 경우도 있죠.
그래서 UTC 시간을 기본적으로 고려하지 않았던 과거 때문에 이런 현상이 일어나는 것 같은데
그나마 C#은 그나마 잘 정리가 되거든요.
그래서 C#을 정리를 한 거고 지금 아직은 좀 문제가 있지만
자바 쪽에서 타임 오프셋 써서 이렇게 바꾸는 거는 좀 되게 클렁키하다? 이런 생각이 들어요.
괜히 좀 근데 자바도 역시 뭐 후방 호환성 지원하기 위해서 많이 깰 수가 없으니까 그렇게 난 거겠죠.
근데 이제 후방 호환성을 지원하는 방법도 조금 깔끔한 방법과 조금 안 깔끔한 방법이 있는데
C#이 아무래도 좀 더 모던하다 보니까 조금 나은 언어였던 것 같고
뭐 C는...
할 말 없이 그냥 안 좋아요. 일단은.
자바 근처에도 일단은 못 가. 그런 부분은.
그래서 그거는 그냥 언어의 나이에 따라
그리고 아까 말했던 기술의 발전에 따라
후방 호환성을 적당히 깨가면서 발전한 언어와
후방 호환성을 계속 유지하려고 했던 언어와의 차이인 것 같아요.
그래서 적당히 깨는 거는 좋은데 아직 못 걸고 있는 게 문제인 것 같고
그래서 뭐 서버에는 UTC를 박자. 아 좋아.
그래서 UTC가 아닐 경우에는 컬럼에 새로운 이름을 박자. 아 좋아.

그리고 뭐 오브젝트에서 만들 때는 그래.
저는 서버 코드에서 돌리는 데이트 타임도 모두 다 UTC로 돌려요.
그래서 저는 데이트 타임 오브젝트를 쓸 때도
뭐 이게 로컬 타임이니 이런 고민할 이유가 없어요.
무조건 UTC NOW로 쓰고
저는 DB에서 읽고 왔을 때 UTC이기 때문에
최종적으로 이제 뭐 사용자한테 보여주거나 뭐 로컬 타임으로 변환할 때가 있으면은
그 로컬 변수에서 잠깐 바꿔서 쓰고 끝나는 거죠.
그렇기 때문에 저는
코드가 이제 미스테이크를 만들 경우가 적긴 한데
또 하나 재밌는 게 제가 최근 봤던 게
JSON 파일로 데이터 주고받을 때
이제 JSON 파일이 되게 좀
느슨한 표준이에요. 사실은.
그래서 JSON에서 이제 시간을 패스해 줄 때 있잖아요.
그럴 때 이제 딱히 어떤 시간 타입으로 패스를 해 주라는 그런
아 뭐라 그럴까.
규약이 없어요.
그래서 어떤 이제 JSON 파일을 주고받는 그런
API를 보면은 어떤 경우에는 에포치 타임을 줘요.
유닉스 시간이죠. 처음 뭐 몇 년 몇 시부터 얼마가 시간이 지났냐.
근데 어떤 놈은 밀리세컨드로 주고 어떤 놈은 세컨드로 주고
어떤 놈은 마이크로세컨드로 줘.
그래서 제가 보면서 근데 문제는 JSON 그 컬럼 이름에
변수 이름에 이게 밀리세컨드지 마이크로세컨드지 세컨드지도 안 써놔요.
그냥 우리 API는 이런 거를 줘 라고만 써놔요. 에포치 타임을. 그러면 따보고 어쩌라고.
그럼 이제 API 따보고 이제 아 이게 밀리세컨드인지 마이크로세컨드인지 제가 판단을 해야 되는 거죠.
그래서 그런 표준이 없어요.
그리고 시간을 패스할 때 에포치 타임으로 주는 경우도 있고
아니면은 이제 그냥 뭐 몇 년 몇 월 몇 일 이런 식으로 주는 경우도 있고
아니면은 그거를 그냥 그런 스트링일 뿐이니까 거기에 그냥 타임존까지 넣어갖고 보내주는 경우가 있어요.
그래서 그 표준이 없기 때문에 어떻게 하라는 뭐 베스트 프랙티스도 없고
막 중구난방이에요.
막 JSON에 데이터 타임 들어가면은 아 이게 어떤 포맷이지?
그러면 일반적인 포맷은 그니까 C# 같은 언어에서 이제 뭐 JSON 단데서 쓰면은
일반적인 거는 그냥 알아서 지가 판단해서 변환을 해줘요.
밀리세컨드 마이크로세컨드 이건 할 방법이 없고
그냥 아까 말했던 시간 있잖아 year 뭐 month 뭐 day 이런 거는
어차피 C#에서 데이터 오브젝트 넣을 때 만들 때 스트링 넣어갖고 만들 때 자동으로 파싱하는 룰들이 있기 때문에
적당히 맞거든요?
근데 제가 JSON 파일을 한참 고민하다가 결과적으로 내린 결정은 뭐냐면
fwatch 타임 패스하지 말고
이건 밀리세컨드지 마이크로세컨드지 귀찮잖아요.
그냥 데이트 그니까 이제 몇 년 몇 월 몇 일 뭐 몇 시 이런 거를 스트링으로 넣어주되
표준안이 ISO 표준안이 있어요. 뭐 ISO라고도 하겠죠.
ISO 표준안 중에 데이트 타임을 타임존까지 넣어갖고
이제 해주는 그런 스트링으로 표현하는 표준이 있어요.
그래서 JSON 단내 쓰시는 분들은 그 표준은 그냥 뭐 간단히
Serializer 세팅만 넣어주면 바뀌거든요.
그래서 그렇게 하자라고 저는 얘기를 하고 있어요. 가면 갈수록.
왜냐면 아까 말한 UTC 이런 타임도 있고
fwatch 타임이 지내가 기본적으로는 Greenwich 천문대 시간이라고 하지만
API 보면은 그냥 서버 시간으로 다 와요.
그리고 지내 fwatch 타임이래.
그럼 아주 깔끔하게 제일 깔끔하게 그냥 몇 년 몇 월 몇 시
그리고 시간 있고 거기다 존인가 그게 이제 Z로 들어갈 거예요 아마.
T였나? T였던 것도 같고.
그리고 어느 존에 있는 데까지 나와요.
그러면 이 스트링 자체에 모든 정보가 있거든요.
그러면 그걸 서버에서 어떻게 쓰는지 지 맘이거든.
그래서 제가 JSON까지 봤을 때 확실히 ISO 포메타라가 따라갖고 하는 게 좋을 것 같고
JSON 단내 쓰시는 분들은 그냥 아까 말했듯이 세팅만 넣어주면 되고요.
뭐 자바에나 그런 쪽에도 뭐 그런 게 있겠죠.
뭐 G선 이런 것도 있으니까.
제가 많이 써보진 않아서 잘 모르겠어요.
정확히 JSON 시어라이저 쪽을 대충 썼거든요.
자바 쪽에선.
그래서 뭐 JSON 단내처럼 간단하게 지원해 주면 더 좋은 것 같고 제가 볼 때는.
그래서 오늘 했던 얘기는 그거예요.
이제 제발 시간은 저장하는 시간.
서버가 되든 폰이든 어디든 저장하는 시간에 UTC를 쓰자.
왜냐하면은.
만약에 내 서비스가 잘 떴어요 여기서.
그럼 이거를 다른 나라로 서비스를 같이 또 연동을 시키려고 해.
그러면 시간 같은 거 어떡하지?
기본적으로 한국 시간으로 했으니까 나머지는 이제 다른 시간으로 해야 되는데 그러면.
존 인포메이션 어떻게 집어넣고.
그러다가 이제 뭐 회사를 딴 데로 옮긴다거나 그럼 또 한 번 뒤집어야 되고.
코드 짜는 데는 별 차이가 없거든요.
타임 존을 넣나 맞나.
그러면 기본적으로 시작할 때부터 그냥 가장 표준스러운 타임 존으로 만든 게 좋은 것 같아요.
그냥 이거는 죽어도 한국 밖을 안 나간다.
그러면 100% 자신이 있다면 한국 외에 있는 사람은 서비스를 할 생각이 없다.
뭐 그런 자신이 있다면 안 써도 되죠.
그런데 점점 굉장히 많은 서비스들이 UTC 쓰는 게 좋은 것 같아요.
특히 저는 이것저것 이제.
저는 또 이제 이쪽 대륙이 넓은 데 있어서 그럴 수도 있죠.
중국만 가더라도 타임 존 필요할 거예요.
그래서 서버 쪽에 가능하면 UTC 쓰고.
프랙티스를 통해서 아예 데이트 타임을 무조건 UTC로 쓰는 습관을 기르거나.
그게 안 되는 경우 아예 그 offset까지 포함하는 데이트 타임 오브젝트를 쓰게 하거나.
그게 서버에서 할 일.
그리고 제이썬에서는 시간을 표현하는 방법에 여러 가지 방법이 있지만 그냥 ISO 포맷을 쓰자.
그래서 그냥 UTC 얘기를 했어요.
네, 포프였습니다.
