예 안녕하세요 포프입니다. 예전에 제가 게임 프로그래머 직종에 대해서
조금씩 조금씩 해서 언젠가 훌트 거라고 얘기를 했어요. 그래서 오늘도
그걸 하나 만들어 볼게요. 오늘은 제가 가장 확실히 말할 수 있는
직종이에요. 왜냐면 제가 한 10년 해먹은 직종이니까. 프로그래머
중에 그래픽스 프로그래머 아니면 렌더링 프로그래머로도 부르죠.
얘네 뭐하는 애들이냐. 한국은 보통 클라이언트 프로그래머 서버
프로그래머가 나눠져서 그냥 클라이언트 내 컴퓨터에 도는 거 하는 애들
다 있고 서버에 도는 거 따로 하는 애들이 다 있는데 이제 그게 세분화
되기 시작하고 팀이 커지면 특정 분야가 생기는 거겠죠. 해외에서는
보통 전문 분야가 있는 애들이 더 많아요. 저도 그래픽 프로그래머
가 있었고 제가 그래픽 프로그래머 를 하면 저희 아버님이 언제나 그래
네가 게임에서 그 아트 만드는 거야
나오는 모델 예쁘게 네가 만드는 거야 라고 물어보세요. 아니죠.
그건 아티스트가 할 뿐이에요. 그래픽 프로그래머가 하는 일이 뭐냐면
게임 속에 나오는 모델이라던가 이미지 라던가 이거는 다 누군가가 만든
거잖아요. 이미지면 2d의 이미지를 만드는 거겠고 3d면 누군가가 이렇게
차를 깎고 모형을 만들듯이 그런 프로그램을 가지고 3차원으로 모양을
만드는 거예요.
그러면 그건 누군가가 만들었는데 그걸 게임 속에서 보여줄 기술이
필요한 거죠. 그럼 그 기술을 만드는 게 그래픽 프로그래머예요. 그게
가장 단순하게 얘기하면 그래요. 그래도 이해가 잘 안 된다. 그러면
이제 3dx max나 maya를 써보신 분들 도 계실 거고 오토캐드를 써보신
분들도 계실 거고 그게 아니면 구글 맵 이런 데 가보면 스케치업인가
그런 프로그램을 다운받아서 간단한 모양을 만들어서 구글 맵에 3d 모델
로 올려줄 수가 있어요. 그 스케치업 같은 프로그램이 있어요. 그럼
그 프로그램 보면 내가 어떤 모양 만들 수 있고 돌려서 볼 수 있고
max나 maya까지 보면 조명을 이렇게 넣으면 조명이 어떻게 보이는지 볼
수 있거든요. 그거를 전부 다 게임 에서 돌게 하는 게 저희 일이에요.
그 기술은. 그러니까 한마디로 max maya 이런 프로그램을 만드는 게
저희 일이라고 보면 맞아요. 그런데 차이점은 max나 maya는 보통 모델 하나는
놓고 열심히 해도 속도가 그렇게 빠르지 않잖아요. 저희는 그게 삼각형
한 많으면 2천 만 개에서 2만 개 정도가 캐릭터 하나가 나온다고 보면
맞거든요. 요즘은 좀 더 많아졌 겠지만 그걸 만 개 2만 개 그릴 때
그 속도가 나는 건데 저희는 게임 속에서는 삼각형을 한 50만 개 좀
많은 거 같아요. 50만 개 좀 많은가 .
아니, 예전에 한 30만 개 그렸으니까 되게 예전에
50만 개 정도 이상을 실시간으로 그리는 게 저희 일이에요
그러니까 그 기술을 만드는 게
실시간이라는 거는 1초에 30~60번 정도 그려야 되는 거죠
그럼 1초에 처리하는 그 삼각형 양이
아까 뭐 50만 개 곱하기 2 하면 100만 개고
거기다 30 곱하면 3천만 개
그러니까 3천만 개에서 1,500만 개에서 3천만 개 정도를
1분에 그릴 수 있어야 되는 기술을 만드는 게 저희 일이에요
그만큼 성능이 매우 중요하죠
또 저희가 게임 쪽만 아니라 영화 쪽에서도 일을 할 수 있어요
그러면 저희는 어떤 일을 하냐면
영화 쪽에서 똑같은 일을 하는 거죠
영화도 그런 3D 캐릭터 가져다가 만들고 화면을 찍는 거니까
차이점은 그 친구들은 실시간으로 돌리질 않아요
그 친구들은 실시간으로 돌리지 않아요


그 친구들은 이게 실시간으로 안 돌더라도
30분에 한 장이 나오더라도 그거를 다 따로 저장해 놓은 다음에
프레임 다 맞춰서 보여주면 되는 거예요 차례대로
영화가 원래 그런 거잖아요
2D 이미지 연속으로 찍어 놓는 다음에 보여주는 게 영화일 뿐이니까
그래서 그쪽에서 하는 일과 저희 쪽에서 하는 일은 좀 다른데
그런 부분에서 기본은 똑같고
영화 쪽 퀄리티가 게임보다 높은 이유도 그거예요
그럼 그래픽 프로그래머가 그러면 해야 되는 게 뭐냐
저희는 삼각형으로 화면을 그릴 수 있어야 되고
삼각형을 어느 위치에도 옮길 수 있도록 변화를 시켜야 되고
카메라가 움직인다고 가정을 하면은 거기에서 삼각형을 보여주는 방법도 있어야 되고
이거용으로 특별히 제작된 언어가 있어요
이제 이거는 특별히 제작된 하드웨어도 있고 그래픽 카드가 그거예요
그리고 그래픽 카드에 돌리는 언어가 있어요
조명 같은 거 입힐 때 그걸 보통 저희가 쉐이더라고 그러고
그걸 작성하는 일도 저희 일이었고
뭐 지금도 저희 일인 경우도 많고
나중에는 이제 조명을 몇 천 개를 계산해야 될 때 어떻게 하면 더 빨라질 수 있을까요?

어떻게 하면 더 빨라지나 해서 새로운 방법을 개발하기도 하고
남들이 개발한 방법을 가져다 쓰기도 하고
뭐 피부를 어떻게 표현할 거냐
이 피부를 사실처럼 표현하기 위해서는
이거 피부가 굉장히 복잡한 표면이거든요
조명을 받으면 그대로 조명이 반사되는 게 아니라
어느 정도 침투가 돼서 튀어나오기도 하고
속에 있는 혈관이 보이기도 하고
두꺼운 데야 얇은 곳이 있기도 하고
여기는 좀 더 기름지고 여기는 안 지고 이런 것들도 있기 때문에
피부는 굉장히 복잡한 건데 그런 거 어떻게 표현할 거냐?
그런 것도 이제 쉐이더에서 수학 계산으로 다 하는 거죠
빛이 여기서 들어올 때 나는 표면이 여기 있고
그럼 물리적으로 이게 이렇게 계산되니까
이런 이런 계산을 100%는 아니어도 비슷하게 흉내내서 만든다
그럼 여기서 끝나는 거냐? 그것도 아니에요
실제 그래픽 프로그래머가 또 해야 되는 일 중에 하나가
아까 만든 아티스트가 만든 모델들 있잖아요
3D 모델 맥스나 마야 뭐 오토캐디언에서 만든 거
이걸 게임에서 돌려야 되잖아요
이 포맷을 그대로 맞출 순 없잖아요
그러면 여기에서 만든 거를 저희 게임에서 돌릴 수 있는 포맷으로 변경을 해서
뭐 데이터를 어떻게 굽냐 이것도 있거든요
이거를 이제 파이프라인 작업이라고 해요
툴 작업이라고도 하고
그 부분도 저희가 해야 되는 부분이 있고
툴 프로그래머가 해야 되는 부분이 있죠
저희는 이제 툴 프로그래머가 그래픽 쪽을 잘 모를 수도 있으니까
그래서 그런 부분도 해야 되고
그리고 이제 제가 예전에 발표한 자료에도 있지만
약간 시리즈가 안 보이지만
저쪽에서 바로 보여주는 조명 계산이라든가 이런 게
모든 게임마다 다를 수밖에 없어요
그러면 이제 저희 게임에서 모델링을 하고 나서 게임으로 불러오면
실제 맥스나 마야에서 보는 거랑 다른 경우도 있거든요
그러면 그걸 또 어떻게 비슷하게 보여주게 할 거냐라고 해서
맥스나 마야 쪽에서 직접 저희가 플러그인을 만들어 갖고
그걸 보여주는 법을 만들기도 하고
어떻게든 아티스트가 일을 효율적으로 할 수 있도록
많은 지원을 하는 것도 저희 일이에요
근데 재밌는 거는 그래픽 프로그램 에 굉장히 이쪽에 특화된 사람이에요
그러고 보면은 아 이 사람들은 게임 을 잘 모를 거야 라고 생각을 할
수도 있는데 게임 플레이 쪽은 모르 더라도 아트 쪽을 잘 알기 때문에
생각보다 많은 다른 그룹들하고 일을 해야 되고 또 그래픽 하드웨어
는 굉장히 특화되고 성능에 맞춰 나온 하드웨어거든요 그래서 이거를
하는 사람들은 성능 쪽을 굉장히 잘 알아요 최적화를 되게 잘해요
왜냐하면은 또 그래픽 하드웨어 디버깅 하려면 어셈블리를 해야
되는 경우도 많고 그리고 거기는 이제 하드웨어가 어느 정도 규격
이 정해져 있기 때문에 뭐 벡터 프로세서라던가 뭐 숫자 여러 개
한꺼번에 곱하는 것들 그런 것도 잘 돼 있기 때문에 그런 거에 대한
지식도 빠삭하고 메모리를 어떻게 쑤셔 박냐에 따라 속도가 몇 배가
차이나는 경우도 있기 때문에 그런 것도 되게 좀 빠삭해요
그래서 게임을 출시하다가 가끔 못 잡는 버그가 나오는 경우가 있어요
뭐 예를 들어서 저희 팀 버그는 아닌데 뭐 게임 플레이 버그기도
하고 뭐 아니면 ui 쪽 버그기도 한데 디버그 빌드 디버그 쉽게 할
수 있는 환경에서는 안 나오다가 최종 빌드에서 나오는 그런 문제
점도 있거든요 그런 문제점들은 거의 어셈블리로 디버깅을 해야
되는 경우도 되게 많아요 어셈블리 로 디버깅이 안 되는 경우도 있어
갖고
별별 이상한 꼼수로 쓰는 경우도 있어요 툴의 지원을 안 받고 그런
경우에는 대부분 이제 그래픽 프로그래머를 쳐박는 경우가 많아요
그래서 걔네들이 정말 이상한 버그 남들 못 잡는 버그를 어셈블리까지
봐가면서 고쳐야 된다 그러면 그래픽 프로그래머부터 쳐박아요 왜냐하면
걔네들이 가장 로우 레벨을 잘 알고 최적화를 잘 알고 그리고 워낙 그래픽
에 디버깅을 못 잡는 경우가 많아요 .
그래픽 프로그래머는 게임 툴 이런 게 되게 구리기 때문에 일반 코딩
에 비해서 그런 디버그 툴이 없을 때 어떻게 논리적으로 이것저것
시도해 보면서 아니면 화면에 뭔가 엉뚱한 걸 보여주면서까지 디버깅
을 할 수 있는 애들은 그래픽 프로그래머 가 크고 네트워크 프로그래머도
솔직히 그건 잘하긴 해요 왜냐면 걔네들도 거의 비슷한 처지라 근데
그래픽 프로그래머보다 좀 툴이 많죠 사실은 그래서 그래픽 프로그래머
는 가장 게임 휴가를 주로 하잖아요 .


게임을 늦게 갑니다 게임 끝날 때 그래서 보통 게임이 이제 막 열심히
만들다가 어느 정도 출시쯤이 되면 사람을 좀 휴가를 보내거나 빼요
약간씩 왜냐하면 계속 150명으로 게임 만들 수는 없잖아요 마지막
에 가면 점점 80명 70명 60명 줄여 가다가 게임 최종 뭐 나가고 끝날
때는 이제 서비스 티만 남는 이런 식이죠 근데 그 게임 출시 전까지
보통 이제 게임 플레이 쪽 애들은 많이 휴가를 보내요 몇 명 남겨
놓고 야 우리 끝났으니까 더 이상 게임 플레이 넣을 것도 없고 가 오디오
애들은 특별히 문제 없으니까 뭐 한 두 명 넣고 가 뭐 이런 식으로
점점 가는데 렌더링 프로그래머 는 마지막까지 보통 남아있어야
돼요 왜냐면 여기서 버그가 튀어 나왔는데 아무도 못 보는 버그일
가능성이 높아요 왜냐면 출시용 빌드를 구웠기 때문에 그럼 그거
디버깅 할 수 있는 애들은 너네밖에 없어 남어 이런 식이돼요 그래서
가장 휴가를 늦게 떠나는 애들로 도 유명은 하죠 하지만 장점은 그만큼
기술 쪽에 가까운 애들이기도 해요 .
게임 컨텐츠 쪽이 아니라 기술 쪽에 가깝기 때문에 게임은 보통
시간이 가장 많이 걸리는 게 컨텐츠 만드는 거 그리고 컨텐츠 고치는
거거든요 그리고 자꾸만 게임 밸런스 맞추기 이것저것 고치고 그래픽
쪽은 그건 좀 없어요 사실은 그게 오히려 그래픽 쪽 같은 경우는 프리
프로 정도에서 굉장히 많은 기술 이 끝나야 되고 그러면 이제 그때부터
아트를 마구 집어넣어야 되니까 그 다음에 좀 바뀌는 건 있지만
그래도 다른 부서에 비해 그렇게 확 바뀌는 게 없어요.
그래서 어찌보면은 일이 좀 프레딕터블 하다 예측가능하다 갑자기 어느
날 야 이거 다 바꿔야 돼 뒤집자 라고 해서 갑자기 야근으로 왕창
해야 되는 그런 경우는 또 적어요 .
봉급으로 따지면 일단 그래픽 프로그램 과 굉장히 스페셜한 기술이고 게임
에서 굉장히 중요하게 여기는 기술 이기도 해요 제가 예전에 게임계
를 떠나는 이유에서 말을 했죠 사실은 저는 그게 마음에 안 든다고 그렇기
때문에 상황은 어쨌든 그러니까 그래픽 프로그래머의 봉급이 아마
게임 직군 중에는 가장 높을 거예요 .
직군 평균으로 봤을 때 그 게임 프로그래머에서 갈리는 걸로 아티스트
하고 다 포함해도 그렇고 그래서 봉급은 가장 높아서 그것 때문에
이제 게임 프로그램의 꽃이라고 불리는 경우도 있어요.
자본주의 시대에서는 돈을 많이 받는 게 실력이 있다고 보기 때문에
.
근데 뭐 전편에서 dba에 대해서 말했듯이 그냥 수요가 높은 거고
그만큼 잘할 수 있는 사람이 적은 걸 수도 있고 제가 그래픽 프로그래머
를 좋아했던 이유는 제가 시작할 때는 그래픽이 정말 중요했어요
.
그래픽이나 후작섭고 게임들이 이걸 발전시켜야 될 정도가 있었
고 될 이유가 있었고 그때 나왔던 콘솔 ps2에서 ps3 넘어갈 때 이 시점
에 콘솔이 거의 슈퍼컴퓨터 수준 이었기 때문에 그럴 수 있는 기회
도 있었고 그리고 저는 뭐든 간에 결과를 빨리 볼 수 있는 걸 좋아하는
편이에요.
다른 시스템에 비해 그래픽 프로그래밍 은 뭐를 만들면 곧바로 화면에 떠
서 결과를 보여주기 때문에 뭔가 보상감이 더 있더라고요.
그리고 누구한테 쉽게 보여줄 수도 있고 아티스트한테 보여주고 됐어
하면 됐구나라고 하지만 네트워크 프로그래밍 같은 경우는 정말 보여주기
애매하거든요.
.
내가 봤어.
그게 뭔데 이런 개념도 될 수 있고 그래서 어찌보면 좀 자랑거리도
되고 제가 쉽게 봐서 보상감도 얻을 수 있고 그리고 마지막 이유 그리고
아마 이게 제일 중요한 이유일 것 같기도 한데 제가 생각할 수 있는
프로그래밍 중에 가장 어려웠어요 .
3d 수학도 들어가고 조명 계산도 들어가야 되고 아티스트랑 일하는
것도 있고 이런저런 걸 생각했을 때 정말 가장 기술적으로나 막

뭐 리서치적으로 그러니까 뭐 연구를 해야 되는 것들은 가장 힘든
쪽이 아니었나 그러면서도 보상 감이 바로 있고 그래서 저는 되게
좋아했던 것 같아요.
그래픽 프로그래머는 이제 그 정도 면 대충 설명을 한 것 같죠.
요즘 엔진이 좋아져서 그런 프로그래머 가 덜 필요하다 이런 얘기도 있지만
글쎄요.
그거가 되게 재밌어진 게 저는 그때 이제 당연히 뭐 그렇게 되면 영화
쪽으로 옮기면 상관없을 거라 생각을 했는데 실제 상관이 없고요.
그걸 떠나서 지금 또 가상현실이나 증강현실이 또 이렇게 막 부글부글
끌어올라오고 있잖아요.
그럼 그거 할 수 있는 게 누구야 누구야 어차피 그래픽 프로그래머
에요.
그래서 그래픽 프로그래머는 또 어이없게 새로운 길을 찾은 거죠
.
그래서 게임 쪽에서 그래픽 프로그래머 의 위치가 없어졌냐 아직은 모르
겠어요.
저는 게임 쪽에서 그래픽 프로그래머 로서 자리를 잡기가 어렵지 않기
때문에.
근데.
.
근데 주니어나 이런 사람들 아니요 그건 아니에요.
제가 전에 있던 회사에서 봤을 때 요즘은 많은 그래픽 프로그래머
가 게임을 떠나서 다른 쪽으로 옮겨 갔어요 사실은.
재밌는 쪽으로.
그러니까 제가 예전에 게임 프로그래머 를 관두는 이유에서 말했던 거랑
비슷하게 느끼는 사람들이 많았던 거 같아요.
그런 사람도 이제 떠나갔고 그래서 오히려 저희는 괜찮은 그래픽 프로그래머
찾을 수가 없어서 고생 중이었어요 .
그래서 렌더링 프로그래머에 대한 수요는 아직도 많다고 봐요.
.
괜찮은 애들은 못 구할 정도였어 니까.
그 정도면 이제 할 말 다 한 거 같 죠.
제가 가장 잘하는 직종이니까 또 열심히 말을 많이 한 거 같네요.
포프였습니다.
