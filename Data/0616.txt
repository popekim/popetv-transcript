안녕하세요, 포프입니다.

프로그래밍, 소프트웨어 공학 이쪽 업계를 보다 보면 닷컴 버블이 무너질 때 정도부터 꽤 많은 Silver Bullet, 은총알이라고 하죠? '이것만 하면 소프트웨어 품질이 좋아진다!' 라고 외쳤던 여러 주장들이 있었어요. 그 중의 하나가 좀 컸던 것들이 프로젝트 관리기법이었는데, 애자일, 그리고 스크럼. 특히 그 당시 스크럼이 앞서 나갔으니까 이쪽이었어요. 크럼이 결과적으로는 거기서 주장했던 것들이 이루려고 했던 바 중에 한 5% 정도는 영향을 미친 것 같고 95%는 솔직히 허황된 이야기였는데, 그게 이제 어느 정도 정리가 됐죠? 그래서 요즘은 애자일이라고 해도 '순수하게 애자일을 하는 사람이 없다'라는 얘기가 일반적인 통설이고, '그게 올바른 거다'라고 얘기를 하고 있어요. 한 10년 전만 해도 '그건 올바른 애자일이 아니다'라고 외치는 사람들이 있었고, 그 사람들이 이제 웬만하면 조용히 있죠.

그중에 애자일 쪽에서 특히 문제가 됐던 것들 중에 여러 개가 있는데, 그중에 오늘 하나만 말씀을 드리려고 하는 게 뭐냐면 애자일이라고 하면 스크럼이라고 하죠. 스크럼, Estimation, 일 산정하는 거. 그 일 산정의 방식이 스크럼 쪽 보면 정확히 '몇 시간이 걸린다' 하는 게 아니에요. 일이 '어느 정도의 큰 일이다' 스토리 포인트라고 얘기했는데, 스토리 포인트는 시간이 아니라 일이 얼마나 큰 건지, 중요한 건지. 그래서 티셔츠로 따지면 '티셔츠 X라지다, 라지다, 미디움이다.', '시간하고는 상관이 없다'는 식으로 얘기를 많이 했어요. 그리고 이 산정을 하는 주체도 각 팀의 팀장이 아니라 팀원이 '이거는 이 정도의 일이 걸린다' '이 정도의 스토리 포인트다' 이런 식으로 산정을 하라고 얘기를 해요. 그리고 '실제 시간을 쪼개는 거는 유저 스토리 안에 있는 일을 나누면서 거기에 시간을 넣으면 된다'라고 얘기를 하는데, 그것도 실제 유저 스토리를 가져간 사람이 산정을 해요. '얼마나 걸린다' 이러고 그래서 이제 스크럼을 하면서 업계에서 깨달은 점은 '스크럼 식으로 산정을 하니까 일이 안 끝나더라. 그리고 산정이 언제나 틀리더라' 산정이 언제나 틀리니까 앞으로 장기 계획을 세울 필요도 없고, PM은 자기는 스크럼 마스터라고 하고 있고, 그래서 '이게 언제까지 끝나고 뭘 먼저 해야 되냐?'고 그러면 PM은 '몰라. 그건 너네가 알아서 해야 될 일이야.' 개발자한테 물어보면 '이거 3시간 걸릴 것 같습니다. 스토리 포인트가 6입니다.', '왜요?' 이유를 못 대요. 실제 시간이 3시간에 끝나지도 않아요. 그런 것들이 너무 많았어요.

프로젝트 매니지먼트에 있어서 제일 중요한 거는 이 프로젝트가 언제 끝나는지를 아는 거예요. 이 중요한 기능이 언제 끝나는지 아는 거, 그게 애자일이나 스크럼이 들어오기 전에는 마일스톤이라는 걸로 다 있었고요. 두 번째 프로젝트 관리에서 중요한 거 하나가 뭐냐면 각 개개의 리소스예요. '각 개개의 사람들이 어느 정도의 일을 끝낼 수 있느냐?'는 판단이 필요해요. '이 사람은 이 정도의 일을 끝내니까 여기에 이 사람을 놓고 저 사람을 놓으면 끝나겠다.' 근데 스크럼은 무슨 이유에선지 '팀을 이루는 모든 사람의 스킬 셋은 거의 동일하다'라고 가정을 해요. 그리고 그 동일한 사람들이 지속적으로 유지가 될 거라는 식으로 생각해요. 그런데 회사를 다녀본 사람들은 알죠? 내가 팀을 꾸리고 있어요. 개발자가 10명이에요. 1년 지나면 10명이 다 온전히 남아있지 않는다는 거. 보통 한 2명은 나가고, 5명이 나갈 때도 있고, 2명 정도는 보통 바뀐다는 가정을 해야 하면 그 2명 바뀌었을 때 그 2명이 '기존의 시스템과 동일한 성능을 낼 수 있다'는 생각을 하는 것 자체가 인간에 대한 이해가 없는 거죠. 세상에 회사 다녀본 사람은 알아요. 옆에 있던 A 과장님이 나가셨어요. 새로운 B 과장이 왔어요. B 과장이 A 과장하고 동일한 성능을 낼 수 있다고 생각하는 사람은 많지 않아요. 그만큼 편차가 큰 게 사람이거든요.

그래서 올바른 방식은 뭐냐? 특히 이제 일 산정에 대해서만이예요. 일 산정을 제대로 하고 일이 제대로 끝나는 회사들은 보통 그 팀의 팀장이 일의 산정을 해요. 이거는 6시간이 걸리는 일이다. 6시간이 본인 기준에서 6시간일 수 있어요. 그건 상관은 없어요. '내 기준에서 6시간이면 된다', '3시간이면 된다' 일 산정은 끝내버리고 그다음에 일이 누구한테 갈지는 나중에 결정해도 돼요. 그래서 그렇게 됐을 때 그러면 결과적으로는 일이 나오잖아요? 우리 팀이 요번 한 스프린트에 끝날 수 있는 일을 유저 스토리에 포함을 하면 티셔츠 사이즈 이런 것도 솔직히 필요 없고 그냥 시간이 얼마나 걸리는지만 얘기가 나와도 돼요. 객관적인 게 제일 중요하고 가장 흔들리지 않는, 주관적으로 여기 붙이면 여기 되고 저기 붙이면 저기 되지 않는 한가지 수치가 있으면 트래킹이 가능하거든요? 유저 스토리가 7일 하면 7시간이라고 가정을 해요. 그냥 12면 12시간이라고 가정을 하고. 그러면 그걸 산정을 해요. 그러면 우리 팀에서는 이번에 총 유저 스토리 50만큼 하겠다. 그러면 '내가 팀장이 다 했을 때 50시간이 걸리는 일을 하겠다'는 거예요. 그러면 당연히 일을 가져왔을 때 이 일을 자기보다 밑에 있는 사람한테 주면 더 시간이 오래 걸릴 수도 있어요. 그리고 만약에 A 과장님은 이게 팀장보다 한 20% 시간이 더 걸린다면 1.2죠? 20% 더하면 되니까. 그리고 우리 새로운 말단 직원은 팀장보다는 4배가 시간이 걸릴 거야. 그럼 * 4죠? 400%. 그러면 각 사람마다의 수치가 나와요. 팀장 기준으로 했을 때 팀장이 이 일을 다 처리했을 땐 이 정도 시간이 걸린다고 Estimation을 했고, 그리고 각 팀원이 들어갈 때 '어 니가 하면 1.2 곱해야 되니까 그 정도 시간 들어갈 거 그만큼.' 시간은 보면 되는 거죠. 그리고 '너는 * 4니까 이만큼'. 그러면 각 사람마다의 기준치가 나오고 그 기준치에 대해서 트래킹이 가능해요. '팀별로 어느 정도 일을 끝냈냐?' 그게 유저 스토리가 원래 하려고 했던 티셔츠 사이징이겠죠? 딱 한 가지 기준이니까 '어느 정도 일을 끝낼 수 있냐?'가 나오고, 그리고 각 팀원 별로 얼마나 많은 일을 할 수 있냐? '팀장이 40시간 걸린다고 하는 일, 너는 40시간에 못하고 80시간이 걸릴 테니까 2주 동안 걸릴 테니까 팀장보다 효율이 절반이다, 과장님보다 효율이 3분의 1이다.'라는 어떤 곱셈치가 나와요. 그러면 각 개개의 발전이 있냐, 없냐는 이 멀티플라이어만 보면 되는 거예요. 만약에 원래 1.1을 했던 사람이 1.1이 됐어요. 그러면 10% 정도 더 나아지고 발전한 거예요. 그게 뭐 실력적으로 발전했던 회사에 있는 시스템을 배워서 발전했던. 그러면 그 순간에 팀의 진행 상황과 각 개개인의 발전 상황이 그래프로 나올 수가 있어요. 그럼 우리가 원래 하려고 했던 프로젝트 관리도 되고 인사 관리까지 되는 장점이 있어요.

그래서 회사가 잘 도는 데, 그런 데 보면 팀장이 다 Estimation 해요. 전통적으로 그래 왔고, 워터폴 상황에서도 그래 왔고요. 옛날에 워터폴 했을 때 문제들은 그거였거든요? 손으로 다 그리고 다 계산하고 복잡했던 거 워터폴을 하더라도 자동화가 많이 됐어요. 이런 변수들과 매개변수들, 사람 * 몇이고 일은 몇 자리고 몇 자리고 하면 자동으로 일정을 뽑을 수도 있어요. 저희 회사에서는 이런 수치화 되는 것들로 트래킹을 하고 있죠. 스크럼 하면서 고통스러워하셨던 분도 많죠? 제가 말했던 거 뭔지 다 이해하실 거예요. 이런 것들이 있으면 그냥 스토리 포인트 팀장이 생각할 때 팀장이 걸리는 시간 본인이 했을 때 그걸로 해버리고, 나머지 사람들이 하는 거는 멀티플라이어 개념으로 해서 진행을 하시면 훨씬 더 안정적으로 프로젝트 관리도 되고 훨씬 더 안정적으로 어떤 사람의 퍼포먼스 보는 거에 대한 피드백도 가능해요. '한 시스템으로 모든 걸 처리하면 좋으니까 그러자'라는 생각이고, 제 생각에는 이게 완벽히 스크럼하는 것보다는 훨씬 더 소프트웨어 품질을 높이는 영향도 있을 겁니다. 왜냐하면 일정이 제대로 나오고 사람이 어느 정도 시간이 걸리는지가 나오고 급하게 야근에 밀리고 뭐 하고 이런 일이 적으면 소프트웨어 품질을 높일 확률이 높기 때문에. 이 정도면 제가 하고 싶은 말은 다 한 것 같습니다.

포프였습니다.