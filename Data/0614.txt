안녕하세요, 포프입니다.

어쩌다 보니까 테스트 관련 비디오를 3편 연속으로 찍고 있어요. '유닛 테스트 하자'고 말했다가 갑자기 잘린 주니어 때문에 여기까지 왔는데, 첫 편에는 그 회사에서 어떤 일이 있었는지, 두 번째 편에서는 그 회사에서 어떤 어마무시한 자동화 테스트를 해서 최종 유저 입장에서 퀄리티를 보장을 하려고 했는지 몇 가지 예를 들었고, 오늘 하는 건 그 회사에서 하던 또 다른 어마무시한 테스트~~들인데~~에요.

게임을 예를 들어서 콘솔에 출시를 하려면 소니나 엑스박스가 플랫폼을 가지고 있기 때문에 그 회사들이 퍼스트 파티에요. 그러면 얘네들이 자체적으로 하고 있는 Certification Process가 있어요. '이 게임이 정말 우리 콘솔에 올리기에 충분한 품질을 갖췄냐? 품질을 갖추지 않았으면 출시 안 해주겠다.'라고 하는 것들이 있어요. 이게 옛날에는 없었어요. 근데 그랬다가 아타리 게임기의 품질, 특히 ET 게임을 보면 이 문제가 왜 생겼는지 아실 거예요. 'ET 게임 때문에 아타리가 망했다'는 얘기가 나올 정도로 그 당시에는 게임에 대해서 회사가 품질 보증이나 관리를 안 했고 아예 테스트도 안 했어요. 거기서 배운 게 있어서 그 이후에 나온 콘솔 회사들은 '너네 게임 만드는 건 좋은데, 우리 플랫폼에서 팔려면 우리 쪽에서 반드시 테스트 다 받아야 하고, 품질 구리면 출시 못해.'라고 하는 게 있어요. 근데 그게 게임이 재미없다가 아니라 '이 게임이 이런데 크래쉬가 나냐?', '이런 문제가 있냐?' 기술적인 부분들을 보는 거예요.

그래서 실제 각 회사마다 Certification Process에 뭐뭐뭐를 해야 되는지 쓰여있는 것이 있어요. 그리고 이제 게임을 출시하려고 하면 보통 이걸 골드 디스크라고 해요. 옛날에 CD에 복사해서 보냈었거든요. 그러면 이걸 보내면 그쪽에서 테스트를 하는 건데, 그럼 자기네 인력 들고 시간 들죠? 그래서 게임 개발사한테서 돈을 받아가요. 엑스박스 360, PS3 시절이죠? 그 당시에 그게 벌써 2005, 6년인 것 같아요. 꽤 됐어요. 그 당시에 Certification 한번 하는 비용이 5천만 원 수준이었던 거 제가 기억을 해요. 그래서 했는데 빠꾸 당해요. 그럼 고쳐서 또 내야 되잖아요? 두 번째 보내잖아요? 빠꾸 당할 때마다 돈을 내야 해요. 그래서 게임 회사에서 품질 인증을 안 해주면 돈이 어마무시하게 깨지는 경우도 있었어요. 그래서 비즈니스적으로 알아두라고 말씀드리는 건데, 게임 회사에서는 첫 번째 Certification은 무조건 탈락한다고 가정해요. '아무리 우리가 잘해봐야 저쪽에서 뭔가 이상한 거 할 때 문제가 생길 수 있는 것들이 있다.' 그래서 한 번 깨지고, 두 번째 통과하면 잘한 거, 세 번째까지 통과하는 게 목표라고 해요. 그러니까 한 플랫폼에 그걸 내기 위해서 Certification 하는 비용만 1억 넘게 드는 게 그 당시 상황이었습니다. 그런 부분 때문에 이 Certification을 통과하기 위한 어마무시한 테스트를 게임 회사에서 진행했어요. 당시에 이런 콘솔 게임을 내는 회사 앞에서 '너네는 QA가 구려'라고 말하면 큰 돌을 처맞는 이유가 어느 회사보다도 굉장히 QA를 잘했던 곳이 게임 회사예요.

물론 더 복잡한 데 있어요. 항공이라던가 의료 쪽은 더 심해요. 하지만 일반적인 컨슈머 대상으로 하는 제품들, 비즈니스 소프트웨어 이런 쪽에서는 게임 쪽이 굉장히 노력했던 이유가 어떻게 '고쳐 드릴게요' 그런 게 아니라 그냥 돈을 더 내야 되는 거기 때문에. 이때 제가 있던 회사에서 어떤 일을 했냐면 그때 Certification 목록 중에 그런 게 있어요. '게임 부팅하고 가만히 있고 유저가 아무 입력도 안 하면 몇 분 안에 자동으로 데모 플레이 모드로 들어가야 한다. 그걸 들어가야 하고, 그게 48시간 돌아도 게임이 크래쉬가 나면 안 된다'에요. 

그래서 실제로 게임 회사에서는 게임 출시와 가까워지면 자동으로 되는 데모 모드를 만들었고, 그럼 그걸 저희는 콘솔 하나 띄워놓고, 거기다가 48시간 이상 돌리는 거예요. 48시간 돌리면서 크래쉬가 나지 말아야 해요. 근데 크래쉬가 나는 거에 꽤 많은 이유 중의 하나가 보통 메모리 나가는 거거든요? 엑스박스 360에서 메모리가 제 기억에 맞다면 512MB였을 거예요. PS3도 512MB였을 거예요. 근데 듀얼 메모리로 나눠져 있었고요. 그래서 그 게임들을 이제 512MB 안에서 계속 게임을 들어갔다가 메인 메뉴 나왔다가 들어갔다가 나왔다가 이걸 수십 번을 해도 뻑이 안 나야 해요. 메모리 단편화가 나면 안 돼요. 그렇기 때문에 그걸 안 하기 위해 어마무시한 메모리 관리 기법들을 도입하고, 그리고 개발하는 도중에도 메모리가 게임에 들어갔다 나왔으면 게임에 들어가기 전에 메모리 사용량이 320MB였고, 그리고 메모리 Footprint가 정확히 어느 메모리에 뭐가 있는지가 이 모양이었는데 들어갔다 나왔는데 그게 바뀌었다? 그러면 저희 Assert 떴어요. 그래서 그걸 맞추기 언제나 위한거였어요. 게임에 들어갔다 나왔는데 이게 안 맞는다는 건 어딘가 메모리 관리가 안 되는 거고 메모리가 새고 있는 거예요. 그렇기 때문에 이런 거에 대해서 Assert를 주고 계속 개발자들이 고쳐나가는 과정이 있었어요.

그래서 개발하는 개발자 각각의 머신이 결과적으로는 테스트 한 번 한 번 할 때마다 자동으로 메모리 Footprint QA가 됐었어요. 그리고 Assert는 당연히 자동 데모 모드에서는 안 돌 테니까 거기서는 그렇게 메모리 누수가 나다 보면 48시간이 지나면 어느 순간에 뻑이 나기 때문에 크래쉬가 나는 걸 확인하기 위해서 돌렸던 거에요. 그래서 저희 개발하는 동안에 개발 킷은 비싸기 때문에 모자랐지만, 언제나 한, 두 대씩 빼놔서 계속 돌리고 있는 것도 있었어요. '이거 몇 월 며칠 빌드한 거고 계속 돌리고 있다.', '만 몇 시간 통과? 오케이.', '통과 못 하고 크래쉬 나면 크래쉬 덤프 가져다가 디버깅.' 그래서 이런 식으로 해서 메모리 관리를 빡세게 했습니다. 그래서 그 당시에 했던 제가 생각했던 것 중에 가장 가장 가장 확실하고 핵심적인 테스트가 이거였어요. 왜냐하면 48시간 돌아요. 그러면 우리가 다음 날 출근하면 돌고 있는 거예요. 딱 봤는데 갑자기 애들 얼굴이 까매졌어요 다. 그러면 '아 어디선가 문제가 생겼구나.' 라는 게 눈으로 보이거든요? 그래서 계속 큰 화면에 계속 돌고 있었고 우리는 계속 봤고 그러다 크래쉬 나면 고쳤고 이랬습니다. 제가 좀 전에 말했듯이 메모리 Footprint 이런 얘기 있잖아요? 그래서 이게 저희가 Assert를 두 번째 걸 넣었어요. 두 번째 걸 딱 넣고 끝났어요. 끝나고 이제 퍼스트 파티에서 답이 올 것만 기다리고 있는데, 답이 오기 전에 갑자기 QA가 게임하다가 크래쉬가 났어요. '뭐지?' 게임 들어갔다 나오고 들어갔다 나오는데 크래쉬가 났어요. Out of Memory, 한마디로 메모리 단편화가 나서 메모리 블록이 없다는 거죠. 그래서 메모리 블록 덤프를 그때 쫙쫙 내빼도록 만들어놨거든요? 그래서 쫙 나온 파일을 봤어요. 진짜 메모리가 중간중간에 4바이트? 8바이트인가? 하나씩 들어가 있는 거예요. 그래서 거기가 안 되는 거예요. 그래서 회사가 난리가 났어요. 어떻게 된 거냐? 너네 뭐했냐? 물어보니까 온라인 게임을 하고 있었대요. 아 그렇구나! 저희가 말했던 데모 모드, 자동으로 도는 모드, 일반 개발자 컴퓨터에서 하는 그런 테스트들 다 싱글 플레이 모드예요. 온라인 모드를 한 적이 없어요. 해봐야 한두 게임하고 마는 거예요. 근데 얘네들은 이 QA들 정말 대단한 QA예요. 그러고 보면 이렇게 하루 동안 온라인 게임을 하고 그럼 보통 집에 갈 때 컴퓨터 끄고 가거나 막 이러잖아요? 얘네들은 더 해보자. 걔네들은 그냥 그런 거예요. 이런 거에서 깨지는 게 있다라는 걸 아는 거예요. 경험상. 그래서 그냥 켜두고 다음날 또 퇴근했다 출근해서 계속 며칠을 한 거예요. 그래서 며칠 동안 주구장창 온라인 게임만 했더니 게임 수가 있겠죠? 그랬더니 크래쉬가 난 거예요. 그래서 그제야 온라인 개발자들이 들어가서 봤어요. 실제 메모리 누수가 있었어요. 그거 생기는 게 게임 한 번 들어갔다 나올 때마다 16바이트인가 4바이트인가 메모리 누수가 난대요. 그래서 계산은 했어요. 우리가 메모리 Footprint를 정확히 유지해 왔으니까, 들어가다 나올 때마다 이 위치에 16바이트씩 메모리 누수가 나면 최종적으로 메모리가 없어 터지는 경우는 온라인 게임을 몇백 게임을 하면 그때 크래쉬가 난대요. 이걸 우리가 Assert가 일단 들어가 있지만 고쳐갖고 한 번 더 Assert를 낼 수도 있어요. 근데 그걸 고치는 순간에 다른 게 빠개질 수도 있는 거잖아요? 그래서 어차피 Assert만 통과하면 어느 미친 게이머가 온라인 게임을 몇백 게임을 리부팅을 안 하고 하겠어요? 그래서 그냥 유지했던 기억도 있어요.

여기서 저희가 아무리 품질 관리를 잘했다고 하지만 결과적으로 자본주의 앞에서는 무릎 꿇는 모습인데, 비즈니스적으로 '이건 이래서 안심하고 그냥 내보낼 수 있다'고 판단할 수 있는 이유 자체가 그 당시에 메모리 관리를 빡세게 했기 때문이었고, 그리고 다 48시간씩 이렇게 돌리면서 게임을 실제 돌려보고 유저 입장에서 크래쉬가 안 난다는 걸 깨닫고 그러면 여기는 문제가 아니고, 저기는 문제고, 이건 우리가 오케이 해도 확률적으로 크게 문제가 없다는 판단을 내릴 수 있었기 때문이에요. 하지만 이런 판단을 내릴 수 있으려면 이런 식의 End to End 그리고 굉장히 정형화되고 Deterministic 한 테스트가 반복이 돼야 돼요. 그게 아니라 그냥 이 조그만 거 하나, '함수 하나가 제대로 도냐?' 이거 판단하는 것만으로는 이 큰 그림에서 판단할 수는 없어요. 그래서 최종 소프트웨어 품질의 End to End 테스트라든가 Integraation Test가 훨씬 더 중요한 이유들이 바로 그런 것들이에요. 수학 배우신 분들은 정규분포가 왜 정규분포가 나오는지 아신다면 결과적으로 정규분포로 나오는 최종 결과가 End to End 테스트라는 것도 알고 계시거든요. 그런 거기 때문에 그쪽이 정말 중요하게 봐야 되는 것들이고, 이걸 잘하면 소프트웨어 품질이 굉장히 올라갑니다. 근데 이걸 잘 안 하는 이유가 되게 어려워 보이거든요.

이 정도 되면 또 테스트 관련된 재밌는 썰을 한 2, 3편에 걸쳐서 풀었으니까 당분간 테스트 관련 이야기는 잠시 안 하도록 하고요. 라이브 할 때마다 맨날 물어보시긴 해요. 근데 본방으로 만들기에는 너무 반복하면 안 좋으니까 테스트는 여기까지. 다음 편부터는 또 다른 얘기를 좀 해보도록 할게요.

포프였습니다.