안녕하세요 포프입니다. 최근에 제 비디오에 달린 댓글 중에 그런
댓글이 있었어요. 요즘 포프님이 너무 관리자로만 가는게 아닌가
걱정이 된다고 그 얘기를 듣고 제가 거기에 댓글을 남겼는데 그거에
대한 답변을 해볼 필요가 있을 것 같아서 비디오를 만들어요. 이 생각을
오랫동안 해왔고 언젠가 비디오를 만들어야지 생각을 했는데 좋은
기회다 생각이 든거죠. 제가 한참 리드 프로그램을 하고 있을 때
그게 벌써 2~3년 전인 것 같아요. 150밀리언 달러짜리 프로젝트 하면서
그때 회사에서 보내줘서 아키텍트 마스터 클래스라는 코스에 불려
갔어요. 되게 유명한 코스고 실제 되게 유명한 분이 진행하는 코스
에요.
보면서 뭐 그 사람하고 동의하는 것도 있었고 당연히 동의 안하는
것도 있었지만 일단 그 사람이 자기를 굉장히 잘하는 거고 그 사람이
말하는 거에는 거짓이 없다는 거는 확실히 알아요. 그 사람이 했던 말
중에 저도 코딩을 되게 좋아하는 스타일이고 그때도 굉장히 많은 코딩을
하고 있었어요. 팀 애들은 프로그래머 15명 관리하면서도 또 제가 안 하면
못 나가는 것들이 있기 때문에 코딩 도 열심히 하고 그랬는데. 근데
그때 이제 그 아키텍트가 했던 말이 그거였어요. 그 강사가 아키텍트
는 코딩을 하지 말아야 된다. 라는 말을 딱 했어요. 딱 듣는 순간
겉봉이 팍 뜨는 거예요. 무슨 개소리 지. 그 생각이 들 수밖에 없어요.
왜냐하면 제가 이제 말로만 혀로 만 프로그래밍 하는 사람 중에 굉장히
문제가 많은 이제 시니어급들을 많이 봤거든요. 말로는 되게 열심히
하는데 해보라면 하나도 못해. 그러면 어디서만 이제 주어들은 책에서 주어
들은 그런 지식 갖고 이제 막 열심히 말만 하는 거죠. 똑같은 의미로
제가 그래서 책 속에만 하는 강연 들을 되게 안 좋아해요. 그만큼 걘
실력이 없다는 거니까. 그래서 그렇게 딱 이제 거부감을 딱 들었는데
한 그분이 그거에 대해서 한 15분 정도를 설명을 했어요. 15분 정도
설명한 마지막 순간에는 그분의 의도가 뭔지 알았고 그래서 그분의
말하고 동의를 하게 됐죠.
이분이 누구냐면은 이제 이름이 뭐더라. 주발 로윈가라고 해서 마이크로서비스를
처음 만든 사람이에요. 어떤 의미에서. 마이크로서비스의 개념을 처음 만든
사람이고 그래서 그 마이크로서비스에 필요한 언어를 처음으로 이제 개발을
한 사람이라고 보면 맞아요. 그리고 그 언어가 굉장히 유명했고 사실은
닷넷을 대체한 언어였는데 이제 마소가 내부적으로는 그걸 쓰면서 이제
애즈워를 팔아먹기 위해. 애즈워가 마이크로서비스에 적당하잖아요. 일부러 그
언어를 이제 잘 안쓰고 있는. 그러니까 잘 밀지 않고 있죠. 일부러. 근데
이제 내부적으로 애즈워는 다 그걸로 돌고 있을 걸 생각을 해요. wcf란
언어예요. 그래서 그거에 굉장히 크게 참여했고 그 분야의 최고의
권위자이기도 해요. 그리고 wcf를 안 해보신 분들이 더 많을 것 같은데
이거를 해보시면 이게 차세대의 언어라는 게 이제 감이 잡혀요.
그냥 저희가 지금까지 짰던 그런 언어의 그 단계를 넘어서. 이게
그냥 코드를 짜면 네 로컬에서 돌기도 하고 마이크로서비스도 돌기도 하고
별대로 따로 할 게 없는 그런 이상한 언어를 만들어 놨고 디버깅도 굉장히
괜찮고 그 마이크로서비스끼리 간에 이제 디펜던시 트래킹도 다 되고
되게 신기한 언어를 만들어 놨어요. exception handling도 굉장히 잘하는
언어고. 그래서 그런 훌륭한 언어를 만든 정도의 사람인데 뭐 잠시 얘기가
딴 데로 샜고. 이 사람이 아키텍트 랑 코딩을 하지 말아야 한다고 했던
얘기는 이거였어요. 네가 아키텍트
니가 프로덕션 그러니까 라이브 서버에 올라가는 코드를 니가 짜면 안 된다.
단 니가 해야 될 일은 뭐냐면 새로운 개념이나 이런 게 나왔을 때 어느 정도
코딩을 안 하면은 이제 이해를 못하는 부분들이 있어요. 왜냐하면 문서만 보고
아무리 이게 개소리를 하지만 진짜 까보면 안 되는 게 되게 많거든요.
어느 문서든 간에. 그럼 그런 것 을 충분히 알 때까지는 니가 코딩을
해야 된다. 근데 그 코딩이 프로덕션에 나가는 그런 코딩이 아니라
이해를 위해서 니가 따로 코딩 하고 데드라인을 맞춰서 하는 코딩도
아니고 니가 이런 새로운 테크놀로지 나 새로운 패러다임이나 이런 걸
이해하게 코딩을 하고 단 니가 코딩을 멈춰야 되는 때는 니가 이제 충분히
알았고 누가 너한테 이제 일을 시키면 모든 코딩을 너 혼자 할 수 있을
정도의 이해가 되면 멈추라는 얘기를 했어요. 이제 그게 사실이거든요.
훌륭한 아키텍트는 이제 내가 어떤 걸 어떻게 구조를 잡고 어떤 걸 어떻게
어떻게 클래스를 만들고 그 실제 내부 구현을 어떤 로직으로 돌려야 되고
어떤 컴포넌트를 껴넣을지까지 완벽하게 100%가 나올 때
그게 훌륭한 아키텍트가 할 수 있는 일이에요
그 정도 수준의 이해력이 되면 거기서 코드로 옮기는 거는 단순하게
머리에 있는 걸 시간으로 옮기는 작업이 전부예요
그러면 어떤 의미에서 뭐냐면 이미 모든 설계 디자인은 끝났고
이 디자인을 조립할 사람들만 있으면 되는 거죠
그럼 이제 그 강의하시는 분이 말했던 거는
너는 설계를 끝내고 모든 걸 기반을 잡고 블루프린트가 만들어지면
시니어들이 들어가서 그 내부에 클래스단 만들고
그리고 그 클래스단 만들어 놓고 API 지정 다 해주고 시그네처 다 만들고
그럼 그 밑에 있는 코드 몽키들이 들어가서
그 함수 하나하나 들어가는 거에 기능만 만드는 게 올바른 아키텍처다
그리고 그게 실제 큰 회사가 유일하게 계속 뻗어나갈 수 있는 방법이다
왜냐하면 그 정도의...
설계를 할 수 있는 사람이 별로 없으니까라는 얘기였어요
그 얘기를 듣고 나서는 이제 동의를 했죠
왜냐하면 제가 그 당시 회사를 돌릴 때도
제가 코딩하는 양이 많아지면
제 밑에 있는 15명 애들이 실수를 하는 일이 더 많아져요
왜냐하면 제가 관리를 더 많이 하면 애들이 이상하게 방향 가는 거 보고
잡고 그거 방향 아니야? 이렇게 가?
이거 확실하지 않은 스펙이야? 가서 찾아와?
이런 식으로 이제 실수를 할 일을 많이 줄여주는데
제가 코딩을 하면 그 코딩하는 거 하나의 성능은
다른 개발자들보다 10배 이상이 빨리 나오는 거 같긴 해요
그러니까 뭐 저 정도급 되는 사람이면 똑같이 나오는 거고
흔히 말하는 이제 회사에 있는 평균 애들보다 10배가 빨리 나오는 건 사실이에요
그러나 밑에 15명이 있으면 내가 10배가 나오는 순간
애들이 두 배씩 느려지면 그건 이미 느려진 거거든요
그래서 그렇게 회사가 성장을 하면 할수록
아 정말 위에서 큰 그림을 보고 애들이 잘못 뻗어나가는 건...

나가는 거를 잡아줄 수 있는 사람이
그거를 못 할 수 있는 시간이 사라지기 시작을 하면은
정말 프로젝트도 산으로 가는구나 깨달았어요
그래서 그 이후에 이제 제가 흔히 하는 얘기가 그거예요
지금 있는 실리콘밸리 회사에서도 그렇고
뭐 제가 지금 운영하는 회사에서도 그렇고
그 전에 다음에 다녔던 게임 회사에서도 그렇고
저는 코딩하는 걸 되게 좋아해요
그리고 진짜 코딩을 많이 하지만
제가 매니저한테 하는 얘기가
내가 코딩을 할 때랑 안 할 때랑 전체팀 퍼포먼스를 생각...
그러니까 이제 효율성을 생각을 해보라고 어느 게 훨씬 낫냐고
그러면 이제 언제나 매니저들이 하는 얘기가
네가 코딩을 안 할 때가 전체적으로 회사가 훨씬 잘 돈대요
아니면 코딩을 덜 할 때가
그러나 회사라는 게 가끔 굉장히 중요한 컨퍼런트가 있어요
정말 한 1%의 프로그래머들 정도만 할 수 있는 부분들이 있어요
그리고 그게 실수가 됐을 때...
실수를 용납할 수 없는...
가끔 그런 릴릿이라든가 이런 게 있어요
그럼 그런 거는 이제 제가 들어가야 되고
그럼 이제 제가 들어가서
뭐 저 혼자 하는 경우도 있고
여러 명 잡고 하고 있는 경우도 있지만
그럼 이제 그거 잡고 열심히 하다 보면은
이제 그 일은 끝나요
할 수 있는 거에 이제 주어진 환경에 주어진 리소스에서
가장 최선의 방법이라고 할 수 있을 정도로 끝내긴 끝내요
그러고 이제 다시 딱 그걸 끝내고
아...
심도가 끝났다고...
딱 돌아와서 좀 쉬어야지라고 생각을 하는데
그 순간에 잘못 가고 방향이 조금 잘못 잡힌
그러니까 효율적인...
그러니까 저는 이제 뭐라고 얘기해야 될까
생산성보다는 효율성이 되게 중요하거든요
그럼 이제 효율적이지 못하게 가고 있는 부분들이 있어요
이거를 요만큼만 잡아주면은
실제 훨씬 효율적으로 일을 끝낼 수 있고
훨씬 덜 힘들게 끝낼 수 있는데
이게 이제 제가 신경을 못 쓰는 순간
어느 정도 틀어지는 경우가 있는 거죠
그러면 그거를 이제 보면서 못 쉬는 거예요
아... 이것도 망가졌구나
그래서 언제나 제가 릴리스 힘든 릴리스 할 때마다 그 얘기를 해요
아... 나는 정말 코딩 안 하는 게 훨씬 나은 거 같다고 점점
그래서 그런 의미에서
아키텍... 그니까 아키텍트급에 이제 직종이 있다는...
그니까 직급이 있다는 거 자체가 회사가 적당히 크다는 얘기거든요
아키텍트급 아니면 CTO급에 가는 사람들은
아키텍트급 아니면 CTO급에 가는 사람들은
진짜 코딩을, 그니까 제품에 들어가는 코딩을 반드시 하는 건 아닌 거 같아요
이제 문제는 뭐 필요할 때는 해야겠죠
언제라도 들어갈 수 있는 정도의 실력은 있어야 되지만
그리고 언제라도 올바른 대답을 줄 수 있는 정도의 이해도 있어야 되죠
근데 이제 그분은 제가 생각할 때 이제 걱정을 하면서 남겼던 거 같아요
제가 사람 관리 얘기도 많이 하고 막 이런 얘기도 많이 하니까
근데 약간 이해는 안 됐던 게
제가 봤던 이제 제대로 된 코딩이 아닌가?

제대로 된 아키텍트급, 제대로 된 CTO급들은
다 그렇게 모든 거를 머릿속에서 프로그래밍을 할 수 있을 정도로 이해를 하고 있거든요
자기들이 쓰고 있는 기술군이라든가 제품군이라든가
그러면 이제 그 사람들이 저런 코딩을 안 하는 거에 대해서 문제를 삼은 적이 없어요
그냥 그게 안 되는 상황에서 말만 하는 사람들은 문제가 많았지
근데 그래도 아키텍트급에 있는 사람들은 그 정도 문제가 많은 사람들은 좀 적었거든요
시니어급은 그런 애들이 있어도
CTO급은 뭐 케바케인데 사실은
왜냐면 CTO는 순수하게 그냥 기술자라기보다는 말도 안 되게 이제 약만 잘 파는 사람도 있기 때문에
그래서 보면서 그분이 이렇게 걱정을 말씀을 해주신 건데
걱정하는 말을 들으면서 제가 느낀 건 뭐냐면
한국에서 CTO나 아키텍트급 달고 있는 사람들은
실제 그 기술을 이해 못 할 정도의 사람들이 있는데

그 정도로 못 하는 상황에서 그걸 하는 건가 하는 생각도 들기 시작했어요
물론 전부 다 그런 건 아니겠죠 당연히
제가 알고 계시는 어떤 MS MVP분 한 분도 CTO인데
그 분 페이스북 글 볼 때마다 이 분은 정말 훌륭한 기술자라는 생각을 하거든요
근데 그 분이 뭐 코딩을 몇 % 하는지 정확히 모르겠지만
그에 비해서 또 제가 따로 전에 들었던 어떤 CTO는 코딩을 거의 안 한다고 보면 맞더라고요
그래서 말하는 거 들으면은 그냥
그냥 애들 야근시키는 것만 좋아하는 것 같고
자기가 뭘 알고 있는 것 같지도 않고
그래서 그것도 케바케일 수도 있는 것 같은데
그런 생각이 들었어요 그래서
저는 기본적으로 코딩하는 거 되게 좋아하고
저는 뭔가 새로운 거 재밌는 게 있으면 제가 먼저 코딩을 해요
그 다음에 이거 재밌다 해보자 여기서 갖고 오는 스타일이에요
근데 문제는 갖고 올 때
저는 뭔가 이제 문제가 될 수 있는 걸 먼저 찾으려고 노력을 해요
예전에 한번 비디오 만들 때 무슨 DB 인크립션 얘기할 때도
아직은 쓸 때가 아니다라는 얘기를 했던 것도 그렇고
예전에 무슨 애저 펑션 비슷한 얘기할 때도 그런 얘기했던 것도
다 그런 짬짬이 제가 따로따로 하는 코딩에서 나온 거예요
그걸 이제 회사 업무랑은 상관이 없는 거였거든요
단지 제가 먼저 이런 걸 찾고 더 좋은 걸 찾아내서 다음 방향으로 진행이 되니까
회사 방향이 잡히고 그대로 이제 따라가고 있는 거죠
그래서 결과는 지금 저희 회사 프로그래머들이 저희 회사 코드
스탠다드라든가 라이브를 되게 좋아해요
다른 회사에 다니다가 온 애들 보면은 다
여기만큼 코드가 잘 되어 있고 깔끔한 데를 못 봤던 얘기를 많이 하거든요
이해해도 쉽고
그래서 뭐 요약은 해야 될 거 같은데
일단 제대로 된 이제 제대로 돌아가는 테크 회사라면은
그리고 규모가 이제 뭐 CTO 한 명에 프로그래머 두 명이 있는 이런 회사가 아니고 한
대여섯 명이 있는 회사라면은
CTO는 원칙상으로 아니면 아키텍트도 마찬가지고 원칙상으로
이제 실제 서버에 올라가는 실제 제품으로 나오는 코드를 덜 하는 게 맞아요
그리고 그 사람들은 이제 온갖 새로운 걸 리서치를 해야 되고
그리고 그 사람들이 뭔가 회사에서 뭔가를 한다고 결정이 났을 때
이 사람들이 결정일 수도 있고 다른 쪽이 결정일 수도 있을 때
이 사람들은 이 시스템이 정확히 어떻게 돌아갈지 완벽하게
청사진이 머릿속에 안 그려지면 일을 제대로 못하고 있는 거예요
그러면 그걸 이해하기 위해서 그 관련된 스택을 뒤지고 뭐 하고 일해야겠죠
그래서 그렇게 생각을 하고 있어요
이게 이제 뭐 그분이 제 댓글을 봤을 거라고 생각을 하는데
이미 댓글을 남겨놨으니까 그거에 대한 이제 추가 설명이 됐으면 좋겠고
그거에 대한 이제 추가 설명이 됐으면 좋겠고
그리고 이제 CTO나 아키텍트로 빠지시는 분들 중에
코딩을 내가 실제 서버에 들어가는 코딩을 지금 이렇게 줄이고 있는데
괜찮을까라고 생각하시는 분들이 있으면
그거 걱정보다는 모든 게 이해가 될 정도의 지금 이해력이 있냐
그림이 나오냐 본인이 그걸 지시하고 100%까지 아니냐
95% 정도 이건 된다라고 확신을 가질 수 있냐
그거를 좀 더 신경을 써주시길 바라고
그거를 좀 더 신경을 써주시길 바라고
그에 비해 이제 또 전혀 또 나쁜 쪽으로 보면은
아 나는 이 CTO나 아키텍트 달았으니까 코딩 전혀 몰라야 되고
밑에들이 알아서 할 거야
나는 그냥 나가서 접대만 하면 돼
라고 생각하시는 분들은
그 밑에 사람들 존경을 못 받을 거예요
이제 그게 회사에 이제 직원들이 자주 떠나고
이런 것 중에 하나가 자랑하는 애들이
자기 윗상사가 자기보다 실력이 없을 때가 되게 많아요
이제 그 회사의 유지를 위해서도
이제 그 회사의 유지를 위해서도

본인이 그런 내가 이 분야에서는 아직 최고다라는 거를 가지고 있는 게 좋아요
그럼 그것 때문에라도 좋은 엔지니어들은 남아있더라고요
그래서 뭐 CTO가 코딩을 해야 되는지
아키텍트가 코딩을 해야 되는지
그런 부분에 대해서 제가 생각했던 거와
그리고 아까 말했던 주 이름이 뭐지
주발 로이 였나
이름이 맞겠지 내가 잘못 알고 있는 거 아니겠지
주발 로이 맞는 거 같아요
그 분 얘기와 그냥 제가 본 것들을 정리해서 얘기를 했어요
아 끝내야지 포프였습니다
