안녕하세요, 포프입니다.

오늘은 변수명 또 함수명에도 적용될 수 있을 것 같긴 한데, 특히 변수명 짓는 거에 대해서 또 한 번 얘기를 해보려고 해요. '이렇게 지어라'기보다는 '이렇게 지으면 망한다'라는 거에 좀 더 가까워요. 왜냐하면 변수명을 짓는 방법은 굉장히 좋은 이야기들이 많이 나와 있어요. '변수에 모두 다 아는 축약어가 아니면 최대한 쓰지 말고, 그 대신에 좀 제대로 이게 무슨 대상을 지칭하는지 풀어써라'라고 얘기를 많이 해요. 그러면 주구장창 풀어쓰는 사람들이 있어요. 그러면서 '나는 그 규칙을 따랐다' 그러는데, 주구장창 풀었음에도 불구하고 더럽게 안 읽히는 경우도 있어요. 이건 단순히 인간을 이해하지 못한 거. 아니면 내가 보고도 헷갈리는데 더 나은 방법을 모르니까 그냥 슬쩍 무시하고 넘어가는 거. 아니면 내가 보고 문제를 일으키는 거 알아요. 근데 뭐 그러려니 하고 넘어가는 거, 대충주의. 이런 여러 가지 이유들이 있어요.

그러면 사람들이 어떤 변수명을 잘 읽냐? 일단 축약어를 당연히 못 읽는다는 건 맞아요. 왜냐면 내가 그 의미를 모를 수 있으니까. 한 번 더 생각해야 하니까. 그래서 명확한 게 좋기는 해요. 근데 명확하게 글을 써놔도 사람들은 잘 못 읽어요. 똑같은 책을 줘도 못 읽는 사람이 있고, 잘 읽는 사람들이 있어요. 그래서 실제로는 잘 읽고 못 읽는 것의 문제들을 연구한 결과들이 많죠.

그래서 제가 이번에 들려주려고 하는 연구 결과는 꽤 된 건데, 사람들한테 어떤 글이나 단어 같은 걸 주고 앞부분 두 글자와 뒷부분 두 글자만 제대로 쓰고, 중간을 대충 이상한 것들을 넣어놔도 사람들은 문제없이 다 읽더라는 거예요. 그래서 실제 그 연구에서 했던 얘기는 사람은 앞에 있는 거 몇 글자, 뒤에 있는 거 몇 글자로 중간을 그냥 다 뇌가 알아서 메꿔 넣는다. 그러면 우리 이제부턴 변수명은 앞에 두 글자, 뒤 두 글자만 제대로 쓰고 중간에 대충 쓰라는 얘기? 아니 그 얘기가 아니에요. 그러지 말고 제대로 쓰고 앞 글자 두 개와 뒷글자 두 개, 아니면 우린 좀 프로그래머니까 좀 넓혀서 보통 우린 단어를 쫙 붙여 쓰잖아요? 앞 단어 하나와 뒷 단어 하나가 공통되는 애들, 예를 들어서 어떤 변수명이 있는데 앞 단어 하나가 다 공통되고 뒷 단어 하나가 다 공통돼요. 그런 게 여러 가지가 있으면 가독성이 확 떨어져요. 그래서 가독성을 좋게 하려면 변수명을 질 때 제일 중요한 건 앞 단어를 다르게 하는 게 일반적으로 굉장히 중요해요. 그 앞 단어가 굉장히 흔하게 사용해서 보고 넘어가고 다음 단어를 곧바로 보는 게 아닌 이상. 근데 아까 말했듯이 주구장창 양창창창 변수명 길게 쓰시는 분들은 뒷 단어만 달라지는 경우가 많아요. 그것도 나쁘진 않아요. 문제는 변수명이 길어지고 뒷 단어가 달라지면 굉장히 읽기가 힘들어져요. 예를 들어서 이런 경우 있잖아요? Error Message ~하고 뒤에 Error Message가 붙는 경우. Error Message Invalid Object, Error Message ~. 그러면 앞에 Error Message를 보는 순간 뒤를 봐야 하는데 너무 길어서 잘 못 보고 같은 건지 다른 건지 헷갈리는 거예요. 한눈에 안 보인다는 얘기예요. 그럼 이걸 바꾸면 이렇게 쓸 수도 있죠. Invalid Object Error Message. Overflow Error Message. 근데 문제는 나중에 또 Invalid ~ Error Message가 아니라 Warning Message가 나면 또 앞 문장이 같아지면서 또 헷갈린다는 거예요. 어떤 놈이 Error고 어떤 놈이 Warning인지 한눈에 안 보여요. 그래서 그럴 때 이제 많이 쓰는 방법들이 정해진 축약어를 쓰는 거예요. '에러 메시지니까 앞에 ERR로 시작하자.' ERR 그리고 뒤에 Invalid Object, ERR ~. 그러면 ERR은 굉장히 빨리 보고 넘어가고 그다음이 어떤 건지 곧바로 알 수 있으니까.

그래서 변수명을 짓는 방법은 굉장히 여러 가지가 있지만, 일단 '축약어를 쓰지 말라'는 조언은 굉장히 좋아요. 근데 확실히 뭔지 알 수 있는 축약어, 변수 하나만 봤을 땐 모를 수도 있지만 변수 두 개 봤을 때 알 수 있는 거, 위에 보고 '아! 이건 Error Message구나.' 그리고 다음 거 쭉 스캔하면서 '얘는 Error Message 아니고.' 이렇게 볼 수 있는 거, 그런 것들은 굉장히 좋아요. 그래서 '축약어 절대 쓰지 마라'라는 식으로 얘기하는데, 축약어를 잘 쓰면 오히려 가독성을 확 높이는 경우들이 훨씬 많아요. 

그리고 또 하나의 축약어를 쓰거나 이런 거에 좋은 건 뭐냐면 정렬이 잘 맞아요. 옛날에 C++ 프로그래머들은 막 스페이스를 띄워서 변수명을 예쁘게 정렬했어요. 자료형이 달라져도 변수명을 정렬한다던가 그러면 위에서 아래를 훑어보는 것만으로 뭐가 이거고 뭐가 저거인지 딱 보이니까. 근데 요즘은 자동 포매팅 기능이 들어오면서 그게 많이 깨지거든요? 그렇기 때문에 이제 스페이스로 정렬하는 건 좀 오버인 때가 왔고, 단 앞의 왼쪽에 붙는 타입형이 다 같다면 이런 축약어를 잘 정함으로써 Error Message는 딱 한 줄에 정렬되고, 그다음에 '네 번째 Column부터 실제 어떤 건지 보인다' 이런 식으로 눈이 확실히 확인할 수 있게 그런 경우도 있고요. 그리고 그런 거 알죠? 예전에 '만약에 배열에 들어갔을 때 이 배열에 들어간 요소가 몇이냐?' 그러면 옛날에 C, 굉장히 고대 C로 가면 num을 앞에 많이 붙였어요. 아니면 n을 붙이거나 numScores, nScores 그러면 이게 'scores 안에 그 배열에 몇 개가 들어가 있냐라는 걸 나타내는 변수다'라는 식으로 많이 썼어요. 근데 요즘은 '그게 읽기 좋게 바꿔야 한다. 축약어로 없애야 한다'라고 하고 그러면 number Of scores 하면 보통 전치사 들어가면 또 안 좋다고 보니까 그럼 뒤로 돌려서 scoresCount 이런 식으로 많이 했거든요? 근데 좀 전에 말했던 변수명을 지을 때 정해진 축약어를 앞에 붙이면 읽을 게 줄어들어서 굉장히 빨리 된다. 그리고 scoresCount와 scores와 중복되는 게 있잖아요? 사실은 앞에 scores라는 게. 그런 경우에 가독성이 더 떨어져요. 그래서 이런 경우에 확실히 정형화된 것에서는 numScores 정도는 저는 훨씬 가독성이 좋다고 봐요. 그리고 코드가 복잡하고 변수가 많아질수록 훨씬 읽기가 편해요.

오늘은 '반드시 이렇게 지어라'가 아니라 그냥 몇 가지 예를 들어드린 거예요. '반드시 이렇게 지으면 힘들어진다'는 건 비슷한 변수명이 많아질 때 앞 단어가 동일한 놈들이 많아지면 정말 힘들어지고, 앞 단어가 달라도 뒷 단어가 조금 달라지면 복잡한 경우가 있어요. 근데 앞 단어가 달라지는 게 중요해요. 앞 단어가 달라지는 게 중요하지만, 비슷한 부류의 여러 가지 것들이 있을 때 ~count, scoresCount, studentCount 이런 거 있을 때 그럴 때는 차라리 num을 앞에 뽑는 걸로 인해서 이게 실제 어떤 것의 카운트라는 걸 확실하게 보여주는, 어떤 특별한 접두어 잘 넣는 거 되게 중요해요.

그래서 이런 것들이 변수명을 잘 짓는 데 도움이 되는 얘기들이고, 그래서 어떤 한 가지 원칙에 의해서 이게 좋아질 거라 생각하지 마세요. 내가 나중에 그 코드를 봤을 때 아니면 코드를 다 작성하고 나서 봤을 때 어떤 변수가 뭔지 한눈에 들어오고 한 번에 코드가 읽힌다? 그럼 무조건 좋은 거예요. 근데 그게 아닌 경우들이 많으니까 자꾸만 가독성 얘기가 나오는데, 한, 두 가지 규칙으로 하려고 하니까 그게 안 되는 거예요. 서점에 가서 책 읽어봐요. 책 다 제대로 한국어로 쓰여 있고 어떤 특별한 원칙을 따라 쓴 책들이 있는데, 어떤 건 술술 읽히고 어떤 건 계속 위로 올라와서 읽고 이렇게 해야 해요. 그게 어떻게 문단을 구성하느냐, 어떻게 단어를 배치하느냐의 문제거든요? 변수명도 함수명도 사실은 똑같은 거고, 함수 안에 있는 코드 진행 상황도 똑같은 거예요. 그래서 '함수에서 Early Exit이 좋다' 그것도 다 똑같은 얘기예요.

그래서 결과적으로는 잘 읽히냐? 그럼 원래부터 잘 못 읽는 사람들은 잘 구성된 것도 못 읽고 잘 구성된 것도 못 읽는 사람들은 그런 개념이 잡힐 수가 없어요. 왜냐하면 나는 그냥 모르니까. 뭘 읽어도 잘 안 읽히니까. 그래서 그런 사람들은 사실은 독서부터 하는 게 좋기는 해요. 책을 많이 읽고 언어 능력이 좋은 사람들은 일반적으로 코드를 작성해도 좀 더 깔끔하고 가독성이 좋은 게 많이 나와요. 근데 그거 안 되는 사람들이 특정 한 책에서 말하는 한두 가지 원칙을 광신적으로 따르면서 나는 내가 모자란 걸 속으로는 알고 있는데 드러낼 수 없으니까 '이 원칙을 따랐으니까 내 코드는 무조건 가독성이 좋아. 무조건 그래야 해!'라는 헛소리를 하죠. 소프트웨어 공학 쪽에서 있는 규칙들은 무조건은 아니에요. '그러는 게 일반적으로 좋다. 협업에 좋다'라는 얘기고, 협업에도 아닌 경우도 충분히 많아요. 그래서 그걸 알아야 하는데 자꾸만 쓸데없는 종교 서적을 만들어서 얘기하는 것들이 문제인 거죠. 이 정도면 제가 하고 싶은 얘기는 다 한 것 같죠?

포프였습니다.