오늘은 이제 저희가 그런 얘기 하잖아요
건물을 지으시는 분들은 이제 설계사, 아키텍 이런 식으로 얘기를 해요
그리고 이제 우리는 소프트웨어 설계하는 사람을 소프트웨어 아키텍이라고 하죠
물론 이제 큰 회사에 가면은 아키텍만 하시는 분들이 있고
코딩은 전혀 안 하시는 분들이 있죠
그냥 그분들은 코딩을 하면서 테스트해보고 이런 건 하죠
근데 이제 결과적으로는 이렇게 전체적인 스트럭처 잡아주고
이 다른 모듈과 다른 컴포넌트가 어떻게 서로 통신하는지 얘기하고
뭐 API 정의해주고 뭐 기타 등등을 하죠
근데 이제 사람들이 그런 얘기를 많이 했어요 옛날부터
이제 뭐 우리가 소프트웨어를 이제 저희가 소프트웨어 엔지니어라고 부르잖아요
근데 실제 엔지니어링 하시는 분들은 보고 비웃어요
이제 그 엔지니어링이라고 하는 게 자체가 뭐냐면
굉장히 잘 정형화된 프로세스가 이제 있죠
뭐 당연히 처음에 건물을 지을 때는 수도 없이 많이 무너졌겠고
근데 요즘은 건물을 딱 누가 짓고 설계하고 뭐 한다 그럴 때
기본적으로 그 건물이 무너진다는 생각은
안 하잖아요
그 사람들이 다 계산하는 무슨 뭐 공대 가면 그런 거 하더라고요
뭐 뭐라 그러지 이게 수학 중에 하나인데 제가 이름을 까먹었어요
칼큘러스 쪽인 거 같은데 뭐 미분 적분 뭐 이런 비슷한 건데
이게 과연 어떻게 뭐 물리학이기도 하고
하중을 얼마나 받으면 이게 무너지고 그럼 이 하중을 덜 받기 위해
뭐 이런 지붕을 동그라미 원형으로 하면 좀 잘 버티고
뭐 이런 것들이 이미 정형화가 돼 있고
뭐 이제 시뮬레이션도 많이 하고
그래서 굉장히 정형화된 과정을 거쳐서 엔지니어링을 하는 거고
이 사람들은 건물이 무너지면 사람이 죽기 때문에
그렇게 뭐 뭐 당연히 가끔 무너지지만
일반적으로 건물을 지으면 일단 무너지지 않는다는
확신을 가지고 시작하는 게 있어요
그래서 이제 그런 게 굉장히 정형화 되고
사람이 안전하고 관련된 거기 때문에 그런 상황이 왔는데
이제 저희는 이제 소프트 엔지니어링이 그렇게 될 거다
라는 식으로 얘기를 많이 했어요 많은 사람들이
결론부터 말씀드리면 안 그래요
.
그럴 수가 없는 이유가 이제 일부분의 소프트 엔지니어링은
있어요
당연히 그런 사람의 목숨을 다루고 뭐 그런 거에선 당연히 이런 올바른
아키텍트 해야 되고 올바른 엔지니어링 해야 되고
올바른 프로세서 거쳐야 되고 올바른 qa까지 거쳐야 되는 게 정상
이죠
전에도 몇 번이나 말씀드렸듯이 보잉사 뭐 메디칼 쪽 이런 애들은
다 그래요
근데 대부분의 소프트웨어 직종 이라는 게 사실 그쪽 일이 아니에요
저희는 저희 시스템이 다운돼도 죽는 사람 없고요
.
시스템이 다운돼도 오락을 못 하고 돈이 잠깐 안 들어올 뿐인데
차라리 그게 평생 다운이 안 되는 걸 만들기 위해 애들의 1000배의 시간으로
갈아 넣느냐 아니면 1000배의 인권 비를 아끼고 가끔 1년에 하루 따라
운다느냐 그러면 이제 1000배 한 것보다 3배 아끼는 거잖아요
그러느냐 그 차이예요 사실은 그래서 오버 엔지니어링이 많이
나오는 것도 그거예요 이제 오버 엔지니어링이 필요한 곳에서 아무리
오버 엔지니어링을 해도 그건 오버 엔지니어링이 아니에요 걔네는 그래야만은
하는 거고 그래야만 하는 거예요 근데 문제는 일반적인 소프트웨어
업계에서 일반적인 소프트웨어 분야에서는 내가 해서 돈을 1000배로
낭비하겠어 회사 돈을 근데 회사에 가져오는 거는 적당히 끝내고 그
상황에서 회사에 돈 가져오면서 적당히 유지보수가 되는 거 유지
보수가 안 되면 말이 안 되죠 그 정도면은 프로필이 나고 회사도
버티고 제 직장도 이렇게 계속 가지고 올 수 있고 그게 전부예요 정말
사람들이 원하는 것도 완벽한 게 아니거든요 정말 완벽해야 된다면
아이폰 같은 게 떴을 수도 없고요 아이폰이 얼마나 크래쉬가 많이
났어요 시작할 때 엔조이드 떴 수가 없어요 사람들은 어느 정도의 실수가
나는 거 그게 정말 아주 중요한 실수가 아닌 이상은 인정을 한다는
거예요 일단 그거를 이해해야 돼요 자기가 있는 분야가 어디냐 자기의
고객이 어디냐 요즘 게임하다가도 툭하면 게임 다운되잖아요 하루
종일 게임하면 게임 크래쉬 나잖아요 저 처음 게임 만들 때는 제 게임을
한 달을 돌려도 절대 크래쉬가 안 날 정도로 게임을 만들어야 했거든요
어찌 보면 그때는 오버 엔지니어링 이었죠 근데 그 뒤에 게임이 크래싱
이 나면서부터 사람들이 크래싱 을 받아들이는데 재밌는 거는 세이브
로 잃어버리면 크래쉬를 안 받아들 여요 그래서 제일 중요한 게 오토
세이브 기능이 나온 거예요 그 다음부터 아니 오토 세이브가 나오기
전에 세이브 포인트를 줬죠 사람들이 크래쉬 날 때를 대비해서 미리
세이브를 해 그러다가 나중에는 오토 세이브가 되니까 세이브를
할 필요가 없는 거예요 결국에는 5분 전 정도만 잃어버리는 거지 그때까지
있거든 ms 워드도 똑같아요 ms 워드 가끔 뻥나죠 가끔 다운되요
근데 뭐 있어요 오토 리커버리 자동으로 뒤에서 오토 세이브 하고 있다가
어 너 저번에 뻥 났는데 이거 리커버리 해갖고 다시 쓸래 한 5분 정도 일
초 그 얘기예요 사람들은 리커버리 가 되면은 크게 완벽한 동작에 신경
을 안 쓰게 되는 게 대부분이에요 사실은 뭐 그럼 아 우린 이렇게 소프트웨어
개판으로 만들어도 되냐 이건 우리만 너무 개판 아니냐 그것도 아니에요
우리 주변에 존재하는 온갖 그런 가구라든가 이런 것도 다 제품
하자가 있고 그걸 고쳐 쓰고 아니면 뭐 그게 아주 커다란 하자가 아닌
이상은 목숨에 해가 없고 뭐 아주 심각한 거 아닌 이상은 대충 고쳐
쓰고 받아들이잖아요 그리고 말 그대로 소프트웨어 퀄리티가 그렇게
중요한 거였다 그러면 뭐 하드웨어 퀄리티도 더 중요해야죠 그러면
하드디스크 백업 이런 게 왜 있어요 하드디스크가 뻑이 안 나면 되는
거지 결과적으로 디펙트라는 건 어디다 있는 거거든요 어느 정도
까지 유지를 하고 어느 정도까지 해야 고객을 잃지 않고 어느 정도까지
해야 미친듯한 그런 인건비를 쓰지 않느냐의 문제예요 이 얘기를 왜
하느냐 결과적으로는 소프트웨어 아키텍트에 대해서 얘기하려고
해요 이제 빌딩 아키텍트는 그러니까 건물 건축사 자기가 만드는 빌딩
에 알맞은 자재와 설계와 이런 걸 해요 왜냐면 자재비가 많이 들면
걔는 돈을 곧바로 잃으니까 빌딩 은 보통 이제 융자를 받아서 짓고요
빌딩은 이제 공작 끝나고 분양하면서 돈을 벌고 끝나는 과정이거든요
근데 내가 1억에 팔 수 있는 건물을 10억을 들여서 만들었다면 그건
이미 망한 거예요 이 사람들은 그게 확실해요 그래서 그 사람들이 돈을
많이 버는 거기도 하고 내가 1층 짜리 집을 짓는데 고층 아파트 50
층 짜리 짓는 거만큼 막 무슨 액취빈 받고 이런 건 말이 안 되는 거예요
사실상 누군가 그 돈을 주지 않는 이상 그래서 그게 빌딩 아키텍트는
일단 최소한의 품질이 되는 거와 거기에 엑스트라를 넣어갖고 만드는
게 아키텍이요 뭐 그래도 예쁜 디자인을 넣어갖고 그게 뭐 가치도
높이고 자기 그것도 높인다면 크게 회사를 망하게 하지 않는 이상은
또 하겠죠 소프트웨어 아키텍트 는 조금 이상해요 자기 직종에 대한
책임감이 없다고 전 봐요 뭐냐면 전부가 아니라 그런 분들이 있다고
.
저희가 소프트웨어 아키텍트 쪽에서 가끔 듣는 얘기들이 있으면 학계
쪽이나 아니면 무슨 뭐 정말 굉장히 대규모 회사 아키텍트 빡세게 하는
회사 그런 데 있잖아요 아까 제가 보잉을 맨날 얘기 듣는데 그런 식으로
절대 페일하면 안 되는 그런 데서 우리는 아키텍트 이렇게 했고 우리는
이제 페일을 방지하게 이런 아키텍트를 쫙 도입을 했다 그래요 그러면 좀
생각 없는 소프트웨어 아키텍트 들은 아 저거 정말 대단한 거 아니
생각은 있는 거지 이건 정말 대단한 거다는 건 맞아요 근데 자기 프로젝트
가 그거 필요가 없는데 그걸 다 도입 하려고 하는 거예요 새로운 거니까
시도해 보고 싶고 또 괜히 멋져 보이고 그리고 프로그래머가 상당히
많은 수가 완벽주의자들이 많거든 요 정말 완벽해 보이거든 근데 중요한
거는 그런 뭐라 그럴까 복잡한 아키텍트 그런 대규모 아키텍트를 위해서
그런 식으로 뭔가를 만든다 보면요 .
그만큼 잃는 것도 있어요 최근에 얘기하는 마이크로서비스 이런
개념도 릴리스 프로세스가 완벽하게 잡혀 있어야만 되고 그리고 마이크로
프로세스마다 이제 뭐가 페일이 났을 때 그런 걸 이제 뭐 페일오버
라든가 아니면 로그인을 제대로 한다던가 그런 게 제대로 잡혔을
때 그리고 그 지원된 소스 컨트롤 이나 예를 들어서 이제 마이크로서비스
단위로 하다 보면 디버깅이 어려워 지는 것도 있잖아요 근데 뭐 내
컴퓨터에서 다 디버깅을 해보고 싶어 그러면 그 개발환경을 내
거에서 어떻게 그대로 구현을 하고 .
거기다 디버깅 할 정도의 그런 자동화가 있느냐 이런 것도 굉장히
중요하거든요 그리고 어쩌면 마이크로 서비스를 갖는데 그래 완벽한 서비스
다 좋아 그만큼 마이크로 서비스 오버웨이드가 좀 더 많은 것도 사실
이에요 왜냐면 서버 하나에 돌리는 게 아니라 각 서비스가 다른 서버
가 되니까 그러면 그 상황에서 이게 우리가 동접수가 많으면 50
명인 거예요 근데 50명에서 무슨 마이크로 서비스를 해 서버 한 대
에 그 마이크로 서비스 10개 합쳐놔도 동접 50명의 리퀘스트 10개 아니
10개.
해봐야 뭐 기껏 해봐야 뭐 500개 2000개 이 정도예요 서버 하나로
핸들 되거든요 그러면 서버 한 대 두 대로 핸들 되는 거를 서버 10대
들어서 돌리는 거예요 그러면 이거 에 대한 비용은 어떡할 거야 이런
여러 가지가 있어요 그러니까 그런 대규모의 완벽한 걸 하기 위해서
포기하는 게 굉장히 많아요 뭐 예를 들어서 매일같이 컴퓨터를 포맷
해야 되는 경우도 있고 완벽한 안전 특별한 프로그램이 따로 깔려
가고 안 되는 경우가 없기 위해서 인터넷 끊고 이쪽에서 bm으로 돌리는
경우도 있고.
그 모든 것들도 있고 한마디로 개발 에서 나오는 그런 속도 프로덕티비
리는 줄어들 수밖에 없어요 그러면 왜 필요하지도 않은 걸 해서 회사
전체의 efficiency 성능 효율성을 절반 으로 줄여야 하는 거예요 그런
얘기는 많이 하잖아요 효율이 좋은 회사가 살아난다 이런 얘기도 하잖아요
그러면 또 뭘 하자는 건지 모르겠어요 정확히 그런 경우에는 그래서 제가
정말 소프트웨어 아키텍스에서 제가 정말 소프트웨어 아키텍스에서
좋은 소프트웨어 아키텍스를 하면 언제나 그걸 봐요 내가 어디까지
필요한 거냐 아이순타인도 그런 얘기 했잖아요 간단한 게 제일
좋은 거라고 근데 너무 뭐지 딱 필요한 만큼만 간단한 게 좋은 거라
그랬나 딱 그게 되게 중요한 마인드 에 그걸 읽을 줄 아는 눈이 있어야
소프트웨어 아키텍스예요 그걸 읽을 줄 아는 눈이 없으면 소프트
아키텍스는 절대 아닌 거 같아요 그래서 제가 그런 경우 많이 봤어요
.
완벽주의자 그런 오류에 빠지기 쉽고.
이제 나는 돈은 생각하기 싫어 그냥 내일만 할 거야 난 그 대신
완벽한 엔지니어링을 할 거야 근데 이런 엔지니어는 뭐라고 그럴까
소프트웨어 밖에는 별로 없다고 보시면 맞아요 외부에서 말하는
엔지니어라는 거는 정확한 스펙과 정확한 금액과 이걸 다 해갖고 그
모든 걸 계산해갖고 딱 정말 필요한 솔루션을 만들 수 있는 거 그리고
돈이 부족하다고 그러면 정말 필요한 솔루션을 만드는 이 정도 돈이 필요
하다는 것까지 뭐랄까 수치로써 계산해서 볼 수 있는 사람이 엔지니어링
이거든요.
그래서 아키텍이라고 하죠 엔지니어링 은 다른 엔지니어링이 아니라 아키텍
이 그런 거거든요.
그게 되게 아쉬운 거예요.
그래서 심지어는 뭐 어느 굉장히 한국에서 큰 게임 회사에서 엄청나게
스타 팀이 하나 있었죠.
그 팀이 말 그대로 똑같은 짓을 했고 그냥 뭐 c4 프로 이런 거에
새로운 거 나온다니까 새로운 거 써 보자 이러다가 코드 개판으로
만들고 뭐 결국에는 게임 뭐 못 나오고 몇 년 동안 뭐 심지어는
게임 개발 환경도 구축 안 된 상황 에서.
한 5년 6년 7년 8년 9년 10년 몇 년 인지 모르겠지만 그 년 수 동안
회사 돈 낭비하고 결국엔 팀 쪼개 지고 이런 경우도 많거든요.
이건 제가 볼 때는 모르겠어요.
왜 그러는지 그리고 자기에 대한 프라우드가 있을 수 모르겠어요.
자기가 팀을 말아먹었다는 건데 뭐 우리는 이렇게 뛰어난 게임을
하나 런칭했으라는 프라이드를 평생 먹고 살려는 건지 아니면
우린 엔지니어링이니까 엔지니어링 만 잘하면 돼 완벽한 코드베이스를
만들면 돼 새로운 건 다 써 봐야 돼 이런 건지.
그리고 또 하나 이제 같은 얘기가 나왔을 때 얘긴데 뭐 다음에
분명히 메타 프로그래밍 얘기할 때 잠깐 얘기할 것 같은데 그 건축
아키텍터요 빌딩 아키텍터는 새로운 아이디어라고 무조건 수용하지
는 않아요.
이게 정말 어떤 장점과 단점이 있고 그걸 다 확인해 본 다음에 사람을
죽이지 않겠다는 생각만 갖고 오는 거지.
이제 소프트웨어 아키텍터의 문제는 아까 말했듯이 완벽한 세상을
추구한다고 하면서 그 망상에 빠져 있으면서 불구하고.
새로운 걸 받아들일 때 새로운 거에 너무 흥분하는 그런 게 있어요
.
여기에서 오는 단점이 뭔지가 명백 히 보이는데도 그걸 해결할 방안을
찾지 않은 채 장점이 더 단점보다 크다는 확신도 없고 아니 뭐 확신
까지는 아니어도 50% 이상의 믿음 도 없으면서 그냥 새로운 거 재밌는
거 큰 회사 사니까 나 따라해야지 .
이런 어찌 보면 그냥 뭐라 그럴까 그런 거 있죠 예를 들어서 어디
가서 학벌 따기.
.
타이틀 따기 이런 얘기 있잖아요 .
뭐 그런 거랑 거의 비슷한 개념인 것 같아요.
나 이런 새로운 거 해봤다 이런 거를 하기 위해서 오히려 회사 돈을
축내고 있는 게 아닌가 라는 생각 도 해요.
그래서 오늘 하려고 했던 얘기는 소프트웨어 아키텍터라는 거를
정말 자랑스러워 하려면 저희는 현실을 좀 더 봐야 한다고 생각을
하고요.
우리는 소프트웨어에 있기 때문에 현실을 보지 않아도 돼.
이 정도의 마인드로 자기 합리화를 하면서 어 새로운 우리는 이제 소프트웨어.
뭐야 뭐야 엔지니어링 빌딩 아키텍터처럼 그렇게 대단한 직업이라는 생각을
하는 그런 이중적인 자태도 좀 마음에 안 들고 제가 하려고 했던 얘기는
최종 고객과 최종 제품과 어디까지 필요하고 회사에 내가 하는 아키텍
에 주는 가치까지도 생각을 해야 될 것 같아요 진짜로.
그게 어찌 보면 뭐라 그럴까 제가 속해있는 분야에 대한 적당한 비판
이기도 했고.
제가 하는 일에 대한 적당한 비판 이기도 한 것 같아요.
그 정도로 암울하게 포프TV는 끝낸 거죠.
포프였습니다.
