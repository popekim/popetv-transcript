안녕하세요 포프입니다
오늘은 빌드 시스템과 버전에 대해서 좀 얘기를 해보려고 해요
어쩌면 이게 굉장히 빌드 시스템과 버전이라고 하면은
여러 가지 의미가 있거든요
한 두 세 가지가 생각이 나는데
제가 이걸 왜 적어놨는지 모르기 때문에
두 세 가지를 일단 말하려고 해요
보통 게임 회사부터 얘기를 하면은
이제 게임 회사가 굉장히 EA처럼
한 지점에 1,600명이 일하는 이런 회사도 있는 반면에
한 한 두 명이 일하는 회사도 있고
보통 한 20명에서 50명 남짓이 일하는 회사들이 있잖아요
그러면 이제 그 회사마다 빌드 시스템은 다를 수밖에 없어요
일단 EA 같은 데를 가면은 이제 빌드 시스템이 되게 잘 만들어져 있고
굉장히 열심히 만들어 놨고
근데 이제 거기서 하는 방식을 보통 보면은
언제나 빌드를 만들 때마다
개인 컴퓨터에서 빌드를 만들어 갖고 배포하는 개념이 아니라
제가 코드를 넣으면은 그걸 자동으로 빌드를 해서
아 이게 어떤 체인지 리스트로 빌드를 했다
그게 이제 버전 넘버가 되거든요 보통
그 버전 넘버를 매기고 이게 뭐 몇 시에 만들었고
뭐 그런 거를 다 기록을 해서 빌드를 만들어요
그리고 그런 버전 정보 자체가
실제 exe 파일 안에 들어갈 수가 있어서
그 exe 파일 안에서 그냥 이제 실행하다가
버전 넘버가 뭔지 볼 수 있으면 보여주는
그런 거를 만들고
이거를 이제 그러는 이유가 뭐냐면
exe 파일을 구웠어요 실제 exe 파일을 구워서 테스트를 하다가
여기에 버그가 나거나 그런 경우가 있잖아요
그러면 버그 리포트도 오기도 하고 그렇지만
결과적으론 이 버그가 다른 버전에서 안 날 수도 있고
왜냐면은 그냥 메모리가 약간 바뀌어 갖고
메모리 때문에 나는 문제가 안 생길 수도 있고
타이밍이 바뀔 수도 있고
아니면 이걸 누군가 고쳤기 때문에 안 날 수도 있어요
그래서 결과적으론 그런 버그가 들어왔을 때
그 빌드를 가져와서 이 버그를 이제 리프로를 해야 되고
다시 내 컴퓨터에서 이제 다시 뭐랄까
만들어 보는 거죠 똑같이 따라하면 버그가 만들어지는지
그 버그가 만들어졌을 때 버그가 있는 이유가 뭔지를 알려면
그거하고 똑같이 매치되는 이제 데이터베이스
디버그 데이터베이스 파일 pdb 파일이라고 보통 많이 하거든요
그 파일이 있어야 되고 그거하고 또 같이 있는
소스 코드가 있어야 돼요 사실은
그래서 이제 비주얼 스튜디오 쪽에서 이제 빌드를 하면은
빌드가 될 때마다 이제 심볼 서버를 만들어서
이 pdb 파일하고 소스 코드를 다 어떤 서버에 올려놓고
필요할 때마다 받아 갖고 볼 수 있는 그런 방법이 있거든요
그래서 그런 게 되게 잘 돼 있어요
그래서 뭐 그게 안 돼 있다면 이제 뭐랄까
그 코드를 제가 거기까지 이제 그 체인지 리스트로 바꾸고
그걸 내가 실제 로컬에서 빌드를 해 본 다음에
리프로를 하려고 하는 방법도 있죠
그럼 이제 그래서 제가 언제나 하는 얘기는 이제
뭐 qa에 쓰는 빌드라던가 실제 제품 내는 빌드
게임에서 할 때는 빌드 관리를 되게 잘해야 되는 것 중에 하나
그런 버전을 관리를 잘하는 게 되게 중요해요
이게 이제 중간 회사에 가면은 그걸 잘하는 데가 있고 안 하는 데가 있어요
그리고 조그만 회사에 가면은 아예 안 할 거고
그럼 이제 조그만 회사에 어쩔 수 없다고 생각하는데
한 중간 회사에서 이걸 안 하기 시작을 하면은
어 버그 잡는 거 진짜 헬이 되고 있어요
어 이건 안 나오는데 왜 안 나오지 안 나오나봐 넘어갔다 또 나오고 나중에
그래서 그런 일단 첫 번째는 그 빌드 버전을 관리를 잘하자는 얘기고
두 번째 이제 버전 얘기는
제가 이거는 아마 예전에 이제 뭐 오픈소스 얘기를 잠깐 하다가 아마 나왔던 얘기인 거 같아요
노드 js에서 npm 패키지 관리할 때 버전 번호 잘 관리하라던가 이런 얘기를 했던 거 같은데
그 이 바이너리를 빌드할 때 이 바이너리를 빌드하는 툴셋 있잖아요
뭐 ms 빌드 버전 몇이라던가 비주얼 스튜디오 버전 몇이라던가
아니 심지어는 여기 디펜던트 되어 있는 그런 라이브러리 버전이라던가
이런 게 언제나 동일하게 유지를 하지 않으면 이제 버그를 리프로 하는 게 굉장히 힘들어져요
그래서 되게 중요한 부분 중에 하나가 개발자가 쓰는 머신과 일단 빌드 서버가 쓰는 머신 그 둘 사이에 이제
빌드 툴셋이 되게 비슷해야 된다는 건 되게 중요한 거고 버전이 같아야 된다는 거
그리고 그거에서 이제 컴퓨전을 해결하기 위해서 그러니까 혼돈을 해결하기 위해서
빌드 자체에 아예 아까 말했던 스트링처럼 이제 이게 뭐 툴셋 뭐로 빌드했다고 넣거나
아니면은 이제 빌드 로그라던가 아까 말한 심볼 서버 같은데 들어가 줄 수가 있죠
또 그런 게 들어가는 게 되게 중요하고요
그리고 아까 말했던 라이브러리 버전 하는 거는 이제 제가 예전에 그 npm 쪽에서 저희 회사 직원이었는데 약간 좀 뭐
정치만 열심히 하고 실력 좀 별로 없는 애였다고 하면 맞는 거 같은데
걔네들이 하면은 이제 꼭 언제나 인스톨할 때 npm 뭐 인스톨하면서 꼭 최신 버전을 인스톨하게 만들어 오는 적이 있었어요
제가 아니 그리고 이제 문제는 그게 실제 문제가 터진 거였죠
나중에 다른 새로운 애가 와갖고 이제 제대로 실행하려고 하면은 그 버전이 바뀌면서 뭔가 깨진 게 있고 안 되는 게 있고
막 이런 문제가 있어갖고 또 그거 트러블슈트 하는데 오래 걸리고
그래서 그때 제가 했던 얘기가 어떤 라이브러리를 쓰던 간에 버전을 명시해서 쓰라고 그랬어요
이 버전을 명시해서 쓰고 네가 정말 업데이트하고 싶은 경우에는 네가 업데이트해서 테스트해 보고 다 도는 거 확인했을 때 그거를 업데이트해갖고
모든 사람이 같은 버전을 갖게 만드는 거예요
모든 버전을 쓰게 만들어야 한다 그거는 아까 말했던 툴셋도 똑같은 거죠
가끔 이제 개발자 중에 새로운 비주얼 스튜디오가 나왔어 그럼 무조건 업데이트하는 사람도 있는데 회사에서도
일단 제대로 돌아가는 회사에서는 그거 금기사항이에요
네가 테스트해 보기 위해서 따로 시간 줘갖고 테스트해 보는 경우는 있지만
모든 사람이 업데이트 3를 쓰고 있는 상황에서 비주얼 스튜디오 2015 업데이트 3를 쓰고 있는 상황에서
너 혼자 업데이트 4로 올려갖고 문제를 발생시킨다?
그건 이제 그냥 네 문제라고 하는 거죠 그건 네 잘못이다라는 식으로
그래서 뭐 그 외에도 이제 콘솔 개발하다 보면은 모든 콘솔 플랫폼에서 그 새로운 버전을 지원하지도 않기 때문에
그걸 되게 같은 때 올려야 되는 그런 문제도 있는 거죠
그래서 그런 이제 툴셋의 버전 관리도 되게 중요해 툴셋이라든가 라이브러리 버전 관리
그리고 이제 이거는 뭐 여태까지 제가 말한 거는 뭐
보통 이제 자체 빌드 서버 툴을 돌려서 뭐 이렇게 빌드를 하고 뭐 exe 파일 만들고 소스 뭐라 그럴까
뭐 심볼 서버 넣고 이런 거를 직접 만드는 경우의 얘기거든요
근데 요즘은 이제 웹 쪽이 특히 아직도 많이 사용하지만
이제 뭐 컨티뉴스 인테그레이션 이런 쪽으로 해갖고 CI라고 많이 하죠
내가 빌드해서 코드 넣으면은 뭐 이제 클라우드에서 자동으로 빌드하게 해주는 그런 플랫폼이 점점 많이 나오잖아요
그래서 이제 비주얼 스튜디오 쪽이나 닷넷 쪽 쓰는 계열에서는 당연히
비주얼 스튜디오 온라인 쪽이 굉장히 편하고 좋고
오픈 소스 쪽에서 많이 쓰는 건 이제 트래비스나 뭐 젠킨스를 많이 쓰는 거 같은데
이제 뭐 트래비스가 좀 더 셋업은 쉬운 거 같고 젠킨스는 좀 뭐 다양한 걸 할 수 있지만
뭐 그런 세팅 일일이 안 하고 싶다면 솔직히 팀시티나 비주얼 스튜디오 온라인이 훨씬 편한 건 사실이고요
그래서 돈을 좀 내면은 편하게 살 수 있다
근데 이거를 하는 순간 되게 재밌어지는 게 특히 이제 비주얼 스튜디오 온라인을 제가 많이 써봤는데
할 수 있는 얘기는 뭐냐면
빌드를 하면은 거기에 있는 빌드 툴셋을 이제 설정을 해줄 수도 있고
보통은 그냥 가지고 있는 거만 해도 상관이 없죠
그럼 제가 다운받아갖고 빌드 다 해갖고 빌드를 딱 구워서 이제 그 바이너리를 만들고
바이너리 서버에 올려놔주고 이제 거기에 버전을 매겨줘요
그리고 그 버전 그 빌드한 히스토리를 보면은 거기에 어차피 커밋 넘버가 다 들어갈 수밖에 없거든요
그래서 그렇게 보면은 제가 여태까지 말했던 그래 이 코드에서 이걸 빌드했다
그리고 심지어는 그 비주얼 스튜디오 같은 경우는 심볼 서버에 올리는 코드까지 있어요
사실은 올리는 그 빌드 스택까지
그래서 빌드했고 이게 exe 파일이 거기서 나왔고
여기서 나온 심볼은 이거고 뭐 그런 것까지가 이제 그 웹 대시보드에 아예 들어가져 있는 거예요
어찌 보면은 그래서 굉장히 편해진 건 맞는데 이제 웹 프로젝트나 같은 경우는 이제 뭐 바이너리도 그렇게 많지 않고
누겟도 굉장히 잘 돼 있고 그 패키지 매니저 같은 거요
누겟이나 뭐 그런 뭐 npm도 잘 돼 있기 때문에 그냥 지가 빌드하는 순간 패키지 받아 갖고 빌드하고 넘어가고 이런 것도 있지만
이게 이제 심볼 쪽으로 들어오면은 아직 그렇게 누겟을 지원하기는 하는데 뭐 c#에서 하는 것만큼 깔끔하게 지원도 못하고
그 외에 이제 누겟으로 제공되지 않는 수많은 sdk들이 있잖아요 뭐 예를 들면은 fbx sdk를 깔아 갖고 이제 뭘 해야 된다 그러면
그걸 빌드 머신에 미리 깔아놓을 수는 있지만 아 또 그냥 클라우드에 제공하는 빌드 에이전트를 그냥 쓸려 그러면
그걸 또 일일이 셋업 해주기도 귀찮고 그렇다고 이런 fbx sdk를 그냥 리포에 박자니 너무 용량이 커지고
그 뿐만이 아니라 바이너리도 구워야 되는데 바이너리 굽는 툴셋은 대부분 커스텀 툴셋일 수 밖에 없어요
왜냐하면은 뭐 바이너리 데이터 포맷 자체를 커스텀으로 많이 쓰기도 하고 뭐 그래서 이런 저런 이유로
이 부분에서 아직 그런 웹 쪽에 혜택을 많이 못 받는 거죠 어찌보면은 근데 분명히 굉장히 큰 회사 같은 경우는 이 시스템을 다 만들었을 거고
제가 그런 큰 회사에서 몇 번 일해 봤기 때문에 알죠 아니면 이 회사들이 정말 비주얼 스튜디오 온라인 같은 걸 쓰려고 한다면
자체적으로 이제 빌드 에이전트를 빌드하고 거기서 돌리겠죠 그래서 그런 부분이 뭐라 그럴까 어차피 뭐 비주얼 스튜디오 온라인을 쓰면은
당연히 쓰는 만큼 돈을 내야 되는 건데 처음 240분이 공짠가 그 빼고는 나머지는 이제 매달 돈을 내야죠 매달 240분을 넘기면은
그렇게 내야 되는 건 있는데
어쩌면은 뭐 자기 서버를 만들고 자기 혼자의 웹 대시보드를 만들고 이 모든 걸 점점 발전시켜 나가는 것보다는 그냥 그걸 쓰는 게
쌀 수도 있다는 생각을 해요 사실은 중간 정도의 회사한테는 뭐 대규모 회사는 당연히 지니들이 만들지만
그 만들어 놓은 툴 중에 솔직한 얘기로 뭐 비주얼 스튜디오라던가 젠킨스라던가 이런 것보다 편한 툴은 보진 못했어요 아무래도 인터널 개발의 한계고 뭐 돌면 되니까라는 개념일 수도 있고
그거를 일단 도는 거를 계속 뭐 새롭게 좀 더 모던하게 바꿔야 되는 모티베이션이 없는 걸 수도 있죠 뭐 젠킨스나 뭐 팀시티나 비주얼 스튜디오는 그거 자체가 제품이니까 그걸 계속 좋게 만들 이유가 있지만 내부 툴이 좋은 경우는 거의 없잖아요 회사 내부 툴이 그런 단점도 있는 거 같고요 그래서 뭐 가면 갈수록 저는 클라우드 쪽으로 갈 거라고 보는데 중견 회사 쪽에서 아직 그렇게
그래서 뭐 가면 갈수록 저는 클라우드 쪽으로 갈 거라고 보는데 중견 회사 쪽에서 아직 그렇게

그래서 뭐 가면 갈수록 저는 클라우드 쪽으로 갈 거라고 보는데 중견 회사 쪽에서 아직 그렇게
아무 생각 없이 그냥 아 이거를 빌드해줘라면 빌드해줄 수 있는 게 아 그렇게 많지 않은 게 좀 아쉬운 것 같아요 C++ 쪽에서 특히 다양한 SDK를 꽂고 있을 때 특히 바이너리를 꽂게 될 때
뭐 어쨌든 주저리주저리 말은 많았는데 하고 싶었던 말은 그거였던 것 같아요 첫째는 QA하는 빌드 그리고 뭐 출시하는 빌드 이런 빌드에는 언제나 빌드 넘버가 박혀있어야 돼요 그게 첫 번째 얘기인 것 같고
고요 그리고 여기서 나오는 Symbol 이라던가 뭐 거 뭐 a CivSource 뭐 모지? 아까 말했던 Source Code 라던가 Symbol 같은 PDB 파일 이런 것들도 있으면 좋아요
그리고 여기서 나오는 Symbol 이라던가 뭐 거 뭐 caterp maintain 뭔지 아까 말했다 Source 코드라던가 Singur 여같은 PDB 파일 이런 것들도 있으면 좋아요
이거를 반드시 있어야 된다고 말은 하진 못했는데 PDB 파일 언제나 가져서 가지고 있을 수 있거든요 근데 Soles 코드의 그 뭐랄까 charts 내 팔로 인 고� 코로나 때 snapshots 를 가지고 있어야 냐 아냐는 어차피 뭐 뭐 씽크하면 되는 refusing to receive Frank 싸워달라고 하는데 pd 파일은 언제나 가져 가지고 있을 수 있거든요 pd 파일은 언제나 가져 가지고 있을 수 있거든요
그렇게 해야되요. 그리고 이제 세번째가 개발자가 쓰는 도구나 디펜던트 라이브러리 그거 버전관리를 잘해야되고
그리고 빌드 머신과 개발자 머신과 그거를 언제나 최대한 동일하게 가주는게 좋고
네번째는 이제 자체적으로 빌드 서버를 만드는 능력이 안되면 웹쪽이라면 그냥 뭐 그냥 비주얼스트리트 온라인 이라던가 뭐 트라이비스 라던가 이런거 다 쓰면 되구요
트라이비스가 프라이빗이 있나 모르겠어요. 공짜 버전에서. 그거는 모르겠어요. 빌드 있겠죠?
모르겠어요. 근데 어쨌든 비주얼스트리트 온라인에서는 전부 다 프라이빗 리포로 해도 이제 뭐 240분까지는 이제 공짜로 쓸 수 있으니까 나쁘지 않고
음 그리고 이제 뭐 큰 회사들은 아직도 일단은 빌드 서버를 자체가 돌리겠죠. 팀씨티로 돌리든 뭐로 돌리든 자체 회사에 돌릴테지만
뭐 직접 만들 수도 있고 작은 회사들은 점점 비주얼 스튜디오 온라인 같은 쪽에 빌드 시스템을 쓰지 않을까 생각이 되요. 특히 게임 쪽에서. 웹쪽은 이미 쓰고
있다고 보면 맞고 웹쪽은 그렇게 했고 디플로이까지 다 그런식으로 하니까 요즘
그 정도로 이제 빌드 시스템과 버전 넘버 그런 쪽으로 맞추면 되겠죠. 예. 보표였습니다.
감사합니다.
