안녕하세요 포프입니다.
오늘은 sql과 no sql 여기서는 sql no sql 이렇게 부르는데 그거에 대해서
좀 얘기해 보려고 그래요.
제가 예전에 비디오에서 말한 지 모르겠지만 일단 이제 아 여기부터
말하면 안 되겠구나 제가 이 얘기를 왜 하냐면은 이제 원래 전통적으로
저희가 sql 데이터베이스 relational 데이터베이스를 되게 많이 써왔
잖아요.
그러다가 이제 한 지난 한 5년 정도 라고 하면 될까요 5년 정도부터
시작을 해서 이제 뭐랄까 sql 관계형 데이터베이스는 너무나 복잡하게
구조를 짜야 되고 스키마도 있고 이런 상황에서 아 이거가 말고 좀
더 편하게 문서를 아무렇게나 저장 할 수 있는 방법이 없나 뭐 그런
식으로 나온 게 이제 no sql이라고 생각해요.
sql이 아니고 그냥 일반적으로 언제나 모든 건 그런 건 아니지만 일반적으로
json 파일을 빠르게 저장하는 그런 시스템이라고 보면 돼요.
그래서 일단 뭐 이제 뭐 sql 같은 데이터베이스를 보면은 뭐 테이블
만들고 이렇게 컬럼 만들고 컬럼 별로 놓지만 이거는 그냥 json을
문서를 놓아버리면은 그걸 나중에 어디선 갖고 와서 그 json 오브젝트
를 쓰려면 쓸 수 있다 이 개념이 거든요.
이거는 제가 예전에 한 번 말했던 이제 orm이라고 하는 거 있었잖아요
오브젝트 relational mapping인가.
그래서 이제 sql.
sql 데이터베이스 직접 짜지 않고 이제 코드에서 코드로 실제 오브젝트
를 짜놓으면 그게 알아서 db로 들어갈 수 있는 그런 기술이라고 말을 했어요
.
그래서 그게 가는 방향과 되게 비슷 했던 방향인데 이제 orm 쪽은 그래도
여전히 db 스키마가 있고 그 오브젝트가 바뀔 때마다 스키마 업데이트를
통하고 마이그레이션을 통해서 문제를 해결하는 거였다면은 이
no sql이라는 거는 그냥 아무 문서나 쳐박는 건데 그냥 일반적으로 json
문서를 아무데나 쳐박을 수 있다.
그런 정도로 생각을 하시면 될 것 같아요.
그래서 뭐 일단 뭐 json과 no sql의 장단점이 있는데 뭐 그냥 간단하게
말하면 이제 sql 같은 경우는 일단 스키마가 있잖아요 어떤 구조가 돼
있고 그리고 이제 어떤 특정 컬럼 에 이제 뭐 cache를 건다거나 이래
서 거기에 대한 search를 빠르게 하거나 이런 게 되게 도움이 되는 그런 시스템
이라고 보면 맞아요.
그만큼 구조가 잘 잡혀 있고 제약점 이 있기 때문에 뭐 search가 빠르다.
그리고.
뭐 이렇게 아무 제약 없이 이상한 데이터가 들어올 수가 없다.
뭐 그 정도의 장점으로 보면은 no sql의 장점은 그냥 말 그대로 sql이
너무나 복잡했다 이거예요.
내가 이거 뭐 하나 추가하려고 해도 스키마 추가해야 되지 그리고 어찌
보면은 이제 이 뭐라 그럴까 효율적으로 하기 위해서 막 그 노멀라이제이션
을 많이 하잖아요.
데이터를 뭐라고 해야 되지 이거를 음 그러니까 이제 db가 워낙 그
.
행이라고 하나요 로우를 로우를 저장하는데 로우를 저장하는 되게
특화되어 있는 언어다 보니까 컬럼 을 추가할 때마다 그러니까 투디멘션
으로 갈 때마다 이게 원투맨이 하나당 여러 개가 이렇게 들어갈 수 있는
그런 컬럼이 생기기 시작하면은 컬럼 몇 개까지 만들어야 되지
많이 만들어 놓고 이건 비오더 해야 되나 이런 문제가 생겨요.
그래서 그렇게 투디멘션으로 있는 거를 이제 원디멘션을 두 개짜리
테이블을 해갖고 서로 연결을 시키는 게 이제 포링키 릴레이션십이나
노멀라이제이션이라고 하면 맞거든 요.
그래서 그런 쪽으로 이제 하는 것도 복잡하고 이렇다 차라리 모든
거를 오브젝트 개념으로 이 오브젝트 는 얘도 가지고 있고 이 포링키 다
연결된 거 하나를 합쳐갖고 제이썬 의 처박자라는 거에서 좀 더 간단함
이 있었다는 거죠.
그래서 어쩌면 사용하기 용이함 그리고 확장에 용이함 대 성능의
차이였던 것 같아요.
물론 이제 반드시 노스 히컬이 성능이 나쁘냐라고 하면 또 그것도
애매하지만 어쨌든 기본적으로 특정 컬럼에 이제 뭐라 그럴까 인덱스를
걸어놓고 찾는 성능이라던가 데이터의 효율적인 저장이라는 부분에서
는 딸리는 건 사실이고 그러나 이제 여기서가 되게 재밌어지는 건데
뭐라 그럴까 이제 노스 히컬 그런 기반 중에는 컨시스턴시가 이제
보장되는 게 그냥 일반 히컬하고 는 되게 달라요.
일반 데이터베이스에서는 그냥 라이트 할 때마다 락을 걸어놓기 때문에
무조건 아토믹 오퍼레이션으로 가서 내가 라이트 하는 동안 다른 애가
동시에 라이트 할 수 없고
레이스 컨디션도 없고 이런 거를 저는 db 수준에서 아예 해주는
거죠.
그래서 제가 예전에 한번 멀티스레딩 얘기할 때도 cpu 쪽에서 하지 않고
그 멀티스레딩 레이스 컨디션 처리하는 거를 db 쪽을 꼽아서 해버리면
자동으로 해준다라는 얘기도 했 었던 것 같고 그리고 제가 지금
알고 있는 현조라는 그런 기술 중에 sql 데이터베이스만큼 튼튼한
기술이 없어요.
아무리 이상한 짓을 하고
아무리 빡이려고 해도 빡이기 어려운 기술이 sql db라고 저는 보고
그리고 심지어는 어떻게든 서비스를 다운 시켜보겠다고 별별 이상한
짓을 다 해도 결과적으로는 서버가 죽으면 죽었지 db가 죽는 일은 드물
다라고 생각해요.
db가 제일 마지막에 죽는 일이라고 저는 보고 죽는 놈이라고 봐요
.
그래서 그런 거에서 일단 여태까지 트랜잭션 아토믹 오퍼레이션 이런
부분에 있어서 db가 워낙 튼튼하게 만들어왔고 그래서 그런 튼실성이
중요한 그런 분야에서라면은.
여전히 sql db를 쓸 수밖에 없어요 .
그게 아니라 이제 대표적으로 제가 노시퀄 쪽에 이제 몽고 db를 쓴 프로젝트
대표적인 프로젝트를 제가 아는 게 트렐로거든요.
트렐로 같은 경우는 말 그대로 그냥 보드에 글 하나 올리는 거고 카드
하나 올리는 거고 이 카드의 개념이 점점 바뀌어갈 때마다 빨리 빨리
바뀌려면은 그냥 뭐 db 스키마 전체 다 바꿔갖고 마이그레이션을 하는
것보다는 새로운 json 파일 추가된 필드가 있거나 옛날 필드가 사라져가고.

그거를 집어넣으면은 그냥 새로 이제 오브젝트 새로 만든 버전에서는
읽어와서 없으면 안 쓰면 되는 거고 있으면 쓰면 되는 거고 그런 식으로
해서 이제 발전도 했고 또 하나의 이제 장점이 뭐였냐면은 sql db에서
예전에 무슨 서버 한 대 있고 뭐 이제 엄청 빠른 서버 한 대 엄청
빠른 뭐 db 한 대 이렇게 해서 돌릴 때는 크게 문제가 없었는데 규모
엄청나게 큰 그런 서비스들 있잖아요 .
뭐 페이스북이라던가 동접이 몇백만 명 막 이러는데 동접이 몇백만
명인가 한 달 사용자가 몇백이었나 뭐 어쨌든 엄청 많은데 그거를
다 버티기에는 db 하나로는 어렵다 는 거예요.
왜냐하면은 아까 말씀드렸듯이 db는 write 할 때마다 전체를 그 필요한
부분은 lock을 걸어야 되기 때문에 그 lock이 걸려있든 다른 read operation
도 뭐 제대로 돌지 않고 write operation 도 돌지 않고 이런 문제가 있는 거죠
.
그래서 이제 그거 같은 거를 해결 하려고 옛날부터 별별 짓을 다
했어요 사실은.
그래서.
그래서 뭐 가장 간단한 방법은 write 하고 read를 분리하는 거였죠
.
write 하는 거는 마스터 read는 이제 여기서 리플리케이트 해갖고
언제나 read만 되는 인스턴스 read 되는 인스턴스에는 lock이 걸릴
일이 거의 없으니까.
그런 식으로 한 경우도 있고 아마존 같은 경우는 이제 사용자가 워낙
많으니까 이제 db를 여러 개 만들어 놓고 뭐 사용자 1번부터 1만번까지
db 1번 사용자 1번부터 2만번까지 db 2번 이런 식으로 해서 아예 db 인스턴스를
여러 개 만들어두고.
어떻게 들어오느냐에 따라 db를 이렇게 나눠 가지기 시작했던 거죠
.
그래서 그렇게 해서 하는 경우도 있었고 근데 이제 no sql 쪽으로
오면서는 이제 뭐 이제 그만큼 세대가 바뀌었고 그만큼 디스트리뷰트 시스템
그러니까 분산 시스템을 돌릴 수 있는 환경도 됐고 이제 뭐 클라우드
도 나왔기 때문에 그런 걸 수도 있지만 그리고 이제 새로운 기술
이었기 때문에 새로운 환경에 적용 하기가 쉬웠던 거죠 처음부터.
그래서.
기본적으로.
이런.
뭐라 그럴까 분산 db를 지원하는 no sql이 굉장히 많아요 뭐 얘네
개념도 솔직히 되게 간단해요 왜냐면은 이제 json 파일 들어갈 때도
어차피 엔트리에 대한 유니크 키 는 있어야 되니까 그 유니크 키가
이제 구이디가 됐던 해쉬키가 됐던 해쉬키가 뭐 해쉬키라고 하죠
그 키가 있어야 되거든요 그럼 해쉬키 라는 거 개념 자체가 그거
잖아요 이제 수학적으로 어떤 숫자 일 뿐이고 그거를 뭐 나누기 연산
을 하면은 64개로도 쪼갤 수 있고 뭐 128개로 쪼갤 수도 있고 그럼
그런 식으로 쪼개서 아 내 해쉬키가 0번이면은 뭐 이제 저쪽 db 인스턴스
여기에 들어가고 1번이면은 저기 들어가고 그런 식으로 해서 no sql 같은
경우는 자체적으로 이제 분산을 그렇게 지원하는 경우가 많고 내가
만약에 이미 10개 정도의 인스턴스 를 돌리고 있었는데 no sql db를 그
중에 하나를 더 올리면 또 알아서 그걸 나눠갖고 분산을 시키는 그런
기술이 있어요 정확한 이름이 있었 는데 제가 지금 까먹었고 그런 식으로
디자인된 게 많기 때문에 처음 인스턴스 한 2개만 올려놓고 있다가
나중에 어 사람이 몰리는 거 같아 .
그래서 뭐 10개를 올리든 20개를 올리든 자기 마음이라는 거죠 그럼
자기가 내부에서 알아서 서버가 하나나 두 개 죽었을 때도 문제가
없게끔 이렇게 데이터 리플리케이트 해 놓고 근데 이제 뭐 기술 따라
마스터는 여전히 하나인 경우도 있고 뭐 여러 개인 경우도 있고
쓰는 순간 모든 노드가 다 업데이트 되는 경우도 있고 아니면 나중에
오래 있으면 업데이트 되는 경우도 있고 뭐 그런 여러 가지 기술이
나왔던 거죠 그래서 뭐 간단히 말하면 sql db에서 쓰면은 무조건 있다
.
이런 보장이 생기지가 않는 경우가 많아요 그거를 보장하려고 하는
기술도 있지만 그래서 이제 그거에 따라 어디에 뭐를 써야 될까 이런
고민들을 많이 하게 됐던 거죠 그래서 no sql 쪽에서 나왔던 것 중에 굉장히
주목해 볼만한 게 카산드라였던 거 같고 그거는 이제 속도도 빠르고
뭐 근데 아까 말했던 쓰자마자 데이터가 있는 건 아니고 언젠가는 있는 거
고 쓰자마자 데이터가 있어야 되면 은 옛날에 아파치 진행에서 나온
거 같은데 엣취 베이스라는 게 아마 그게 될 거예요.
이름이 제가 정확한지 모르겠는데 잠깐 보고 넘어갔기 때문에 그런
것도 있었고 근데 또 하나 재밌는 거는 이렇게 뭐 도큐먼트 db 생기고
뭐 생기고 다 좋은데 결과적으로 클라우드에서 돌리기에는 금액이
좀 비싸요 이상하게 sql보다 비싸요 아무래도 sql이 워낙 일반화되고
누구나 쓰는 거고 뭐 그렇기 때문에 그런 걸 수도 있지만 정작 뭐 수다
터미널이나 이런 데서 돌리려고 하기에는 좀 이제 한계가 있다는
거죠.
좀 이돈 내고 못 돌리는데 그래서 그냥 sql db를 여전히 쓰면서 막 json
파일을 거기도 받기도 하고 여러 가지 일들을 하고 있어요.
제 생각에는 sql 서버에서 xml 지원 은 꽤 됐잖아요.
그래서 json 지원도 금방 뭐 지금 되거나 아니면 금방 나오거나 그럴
것 같은데 근데 여기서 또 재밌는 게 하나 뭐였냐면 결과적으로는
이제 no sql의 장점이 아까 말한 대로 유연하다.
뭐든지 유연하게 되게 데이터를 추가할 수 있다는 개념이거든요
.
근데 이제 그것도 저는 이제 orm 쪽에서 얻는 이득과 좀 비슷하다고
생각은 해요.
사실은 orm은 마이그레이션 문제가 있지만 그래서 이제 뭐 반드시 둘
다 옳다는 건 아닌데 미래는 점점 어떻게 돼야 할 것 같냐면 sql 자체
가 가지는 내재적인 문제점들이 있었죠.
이제 뭐 아까 말했듯이.
이렇게 나누는 거 여러 인스턴스 나눠 갖고 쓰는 것도 자동으로
리플리케이션 안 해주고 내가 손수 막 갈라줘야 되고 이런 것도 있었
고 데이터가 이제 오브젝트 개념 에서 접근하기엔 너무 이제 스키마
문제라든가 이런 게 좀 복잡했다는 거.
그 정도가 아니었을까 싶어요 사실은 .
그러지 뭐.
근데 요즘 재밌는 또 이제 트렌드 중에 하나가 이제 뭐 분명히 아마존
에도 똑같은 게 있을 거라고 생각하지만 이제 애저에 보면은 마이크로소프트
에서 하는 클라우드요 거기에 보면은 이제 엘라스틱풀이라는 db 인스턴스
가 나오기 시작했어요.
그래서 정확히 이 개념이 뭐냐면 sql db를 있는 그대로 쓰는데 이 엘라스틱
풀만 켜주면 지금은 금액은 되게 비싸요.
지네가 알아서 로드가 어떻게 들어오는지 따라 여기서 아까 말했듯이
뭐 유저를 몇 번 부터 몇 번까지 자른다고 그랬잖아요.
그런 식으로 제가 자르든 뭘 하든 내부에서 관리를 하겠다는 거예요
.
서버 하나가 아니라 내가 로드를 봐서 뭐 필요한 만큼 서버가 50개
가 되든 200개가 되든 알아서 지네 가 뭐라 그럴까 확대 축소해 주겠다
그럼 아까 말했던 인스턴스 막 던져갖고 리플리케이트하고 막 그
뭐랄까 나누고 이래서 속도 빠르게 했던 거랑 다르지 않게 해 주겠다
는 거죠.
그러면 보면은 지금 sql이 굉장히 튼실한 프로젝트 아니 뭐랄까 기술
이고.
그리고 굉장히 오랫동안 써왔고 그리고 여기서 있는 아토믹을 보장
해 주는 그런 부분들 그런 장점과 지네가 알아서 샤딩까지 해 주겠다는
얘기거든요.
그러면 굉장히 갑자기 괜찮아 보이는 거예요.
이게 아 그리고 이미 모든 클라우드 에서 아니면 모든 서버에서 너무나
잘 지원하고 있고 no sql 서버를 올리 려면 생각보다 할 일이 많거든요
일반 sql 서버보다는 그래서 그런 장점도 있고 그리고 아까 말했던
유연하게 확장하는 거는 아직도 no sql이 조금 낮긴 한데.
뭐 그 사용례마다 다르겠죠.
트렐로같이 엄청난 양의 데이터를 이렇게 그냥 정말 읽기 전용 보드
식으로 갖고 있어야 되는 거면 당연히 no sql이 날 수도 있고 그게 아니라
일반적인 회사에서 어떻게 하는 거라면은 제 생각에는 오히려 sql
쪽으로 가서 마이그레이션 루트 를 타는 게 훨씬 깔끔할 수도 있다고
생각을 해요.
그래서 생각보다.
그러니까 no sql이 정말.
네.
많은 새로운 방식과 새로운 패러다임 을 열어줬는데 지금 있는 no sql의
이제 뭐라 그럴까.
퍼퓰라리티 그러니까 유명세 그러니까 인기도에서 자극을 받은 sql이 다시
비슷한 기능을 올리기 시작을 하고 그래서 그럼으로 인해서 오히려
no sql 쪽에서 시작했던 거를 좀 더 뺏어가지 않을까라는 생각을
해요.
그래서 솔직히 한 3년 전쯤에 no sql 한참 막 일어났을 때 사람들이
몽고디비도 써보고 못 써보고 엄청 했던 거 같은데 오히려 그 뒤에
그때 이제 또 사람들이 실수한 것도 있고 sql이 맞는 데다가 또 no sql을
썼던 경우도 있고 그래서 또 적당히 많은 사람들이 또 약간 sql 쪽으로
돌아오기도 했고 그래서 제가 볼 때는 이제 sql 쪽으로 이제 시작을
해서 조금 더 얘네가 그 no sql에서 배운 걸 더 강화하지 않을까 생각을
했어요.
그래도 뭐 여전히 이제 sql 기반 애들은 메모리 온리 인스턴스는 없는 경우가
좀 많거든요.
그러니까 하드에 안 쓰고 메모리에만 있는 그런 no sql들이 있잖아요.
뭐 redis도 그 중에 하나라고 봐야 죠 그럼 이를 memcache 대신에 이용할
수 있다.
db에서 긁어온 거 다 노멀라이저 되어 있던 거를 하나로 합쳐서
디노멀라이저 해서 전체 오브젝트 만든 다음에 json으로 메모리에 던져
놓고 cache처럼 쓰겠다 그리고 그 cache가 서버 간에 공유가 되겠다 하면은
여전히 redis 같은 경우는 값어치가 있는 거죠.

그렇지만 데이터 스토리지만으로 에 no sql의 장점이 얼마나 오래 더
갈지는 모르겠어요.
지금보다는 조금 줄어들 거다 라고 저는 생각을 해요.
왜냐면 이제 sql 쪽에서 일단 강화를 시작하고 그리고 일단 클라우드
쪽에서 굉장히 쓰기가 편하기 때문에 .
제가 보는 no sql과 sql은 그거였 고 그리고 또 뭐가 있을까.
그리고 어떤 의미에서는 이제.
이제 sql이 발전하는 게 참 재밌다 고 생각을 해요.
왜냐면은 예전에 아마 sql이 나오기 전에 처음 나왔던 게 db2 이런 걸
많이 썼을 때인데 sql 새로 나왔을 때 사람들이 되게 비웃었다고 알고
있거든요.
아 이게 이렇게 허접해서 어따 쓸 거냐 막 이런 식으로.
근데 이제 그게 다 끝나고 이제 실제 는 sql이 이겼잖아요 db2를 그 온갖
뭐랄까 허접한 단계를 끝나고 그리고 굉장히 튼실한 기술이 되어 있다
고요.
그러면 이제 sql에서 나왔던 문제점 을 no sql이 이제 고치려고 나온 거라고
보면 좀 맞는데 이게 sql을 저는 언젠가 그대로 넘어갔지 않을까.
그러니까 이제 더 이상 뭐 데이터베이스 무슨 뭐 아토믹 이런 게 뭐가 필요해
라는 이상한 세상이 오면은 그럴 수도 있겠다 아니면 no sql에서 이걸
다 집어올 수도 있겠다고 생각을 했거든요.
그런데 생각보다 그렇게 되고 있지 않는 게 조금 신기하긴 해요.
어찌 보면은 이제 db2 애들이 했던 만약에 실수들을 이제 no sql 쪽에
서 빨리 깨달아 고치고 있는 걸 수도 있고 아니면 sql 쪽이 지금
가장 크게 드라이브하고 있는 게 오라클하고 마손데 요 두 회사가
이제 굉장히 이 sql에서 버는 돈이 엄청 많잖아요.
그래서 그것 때문에 오히려 시장 을 계속 지키려고 열심히 노력하는
걸 수도 있고 그래서 그런 그런 생각을 해봤어요.
그래서 뭐 학교에서 가끔 이제 학생들 얘기 들으면 아 no sql이 훨씬
더 중요하다.
이것도 다 많이 배워야 된다.
이런 식으로 얘기를 하는 사람도 봤거든요 학생 중에.
근데 솔직히 no sql은 별로 배울 건 없어요 그냥 그냥 제이썬 파일
저장해 두는 거기 때문에 이거를 무슨 뭐 세팅하는 회사 세팅하는
그런 과정 it 뭐 서포트 이런 거 하는 그런 it 회사 it 직원 설비하고
이런 쪽 하는 사람들이 아니라면 은 굳이 이거를 한 번 프로젝트
하는 동안에 자기가 혼자 써보면 될 것 같거든요.
학교 프로젝트 동안에 굳이 이걸 배울 게 뭐 있나 생각은 들지만
sql 데이터베이스는 아까 말했듯이 그 무조건 원디멘션으로 가야
되는 그 제약 때문에 막 그 뭐 노멀 폼이라고 그러죠 세컨드 노멀
폼 토트너멀 폼 이런 거 하는데 그런 거 하는데 드는 시간도 되게
많기 때문에 그거는 사고의 전환 이 필요한 거고 또 배우는 데 약간
좀 처음에는 좀 이게 뭐지라고 하는 부분도 있기 때문에 그런 걸
더 가르치는 게 맞다고 보고 그래서 그냥 요즘 no sql과 sql에 대한 얘기가
한참 많았지만 요즘 많이 좀 줄어들어요.
그러던 상황에서 갑자기 생각나서 비디오로 만들어봤어요.
예 포프였습니다.
