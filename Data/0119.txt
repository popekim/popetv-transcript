안녕하세요 피구왕 통키 포프입니다 저번인가 만들었던 비디오 중에
뭐가 있었지 코드 리듈 시스템 얘기를 했었잖아요 생각보다 많은 분들이
되게 좋아하셨는데 어쩌면 그거랑 조금 관련이 있는 얘기일 수도 있을
것 같아요 제가 아시는 분은 아시 겠지만 지금 리드 디벨로퍼라는
타이틀을 달고 있어요 그게 공식적으로 타이틀을 단 건 처음인데 하는 일은
바뀐 것 같진 않고 예전에 비해서 근데 제가 리드 타이틀을 달기 전에
사실 이 비디오를 올리려고 했는데 다른 비디오에 약간씩 약간씩 이
아이디어가 들어간 상태에서 그냥 얘기를 안 하고 있다가 그냥 오늘
목록 보다 보니까 이게 있었구나 그래서 타이틀 단 겸 타이틀 달기
전과 달고 난 후와의 생각이 바뀌 지 않기 때문에 한번 정리해서
올리는 건 나쁘지 않다고 생각합니다
뭐 흔히들 그런 얘기해요 뭐 과연 리드의 자질이 뭐냐 리더의 자질이
뭐냐 물론 제가 말하는 여기서 리더 는 보통 제가 주로 일하는 분야
의 리더를 얘기하겠죠 프로그래밍 분야의 리더 뭐 게임 프로그래밍
이라던가 일반 프로그래밍이라던가 기술자의 리더 이런 얘기인데 여러
가지 다양한 말이 있는데 저는 모르 겠어요 백그라운드 자체가 노 레벨
프로그래밍이고 성능을 좀 신경 써야 되는 분야에서 와서 그런
지 저는 굉장히 비인간적이긴 한데 사람들을 그냥 cpu 코어의 개념
으로 보게 되더라고요 팀원들을 어떤 개념이냐면 예를 들어서 제가
저를 포함해서 팀원이 8명이 있어요 그러면 저는 그거를 이 팀 자체를
코어가 8개 달린 cpu로 보겠다는 거예요 그래서 뭐 멀티스레딩 프로그래밍
해보신 분들은 알겠지만 싱글스루 그니까 만약에 코어가 1gb 정도가
8hz짜리 코어가 8개가 달려있으면 그게 8ghz잖아요 그러면 그거를
멀티스레딩으로 돌리는 거와 아니면 싱글 코어에 8ghz를 돌리는 거하고
차이를 보면 싱글스레드를 돌리는 게 성능도 높아요 아무래도 멀티
코어로 하다 보면은 작 분배부터 시작해서 서로 일이 겹치지 않게
하는 거 서로 일을 덮어쓰지 않게 하는 거 그리고 최종의 일을 합칠
때 기다리는 것까지 해서 그만큼 오버헤드가 있거든요 저는 팀도
그렇다고 생각을 해요 그렇기 때문에 제가 이상적으로 생각하는 팀과
그리고 이상적으로 생각하는 리드의
컨디션은 뭐냐면 리더라는 건 결국은 잡큐라고 봐요 뭐 잡큐를
아시는 분도 있겠지만 한마디로 일이 이만큼 왔을 때 그 일을 누구에게
어떻게 분배를 하고 그 분배를 했을 때 그 모든 그 저를 뺀 일곱
스레드가 일곱 코어가 쉬지 않고 계속 돌 수 있는 거 한마디로 다운
타임이 없는 거죠 그래서 그게 저는 굉장히 중요한 리더자라고 생각을
하거든요 리더는 잡큐라는 거 그리고 최종적으로 일이 마무리 됐을 때
그걸 뭉쳐갖고
하나의 결과를 보여줄 수 있는 거 그것도 역시 잡큐가 보통 하는
일이죠 싱크라든가 조인이라든가 저는 그거라고 봐요 물론 그렇게
하기 위해서라면 당연히 어떤 일이 중요한지도 먼저 우선권도 정해야
되고 어떻게 어떤 걸 합쳐야 되는 지도 생각을 해야 되고 이를 어떻게
배분해야지 생각을 해야 되겠죠 저는 굉장히 단순한 개념이라고
생각을 했거든요 옵티마이제이션 이나 멀티트레이딩 이쪽에서 생각을
하면 근데 결국에는 리드의 포지션 이라는 게 그거거든요 물론 리더라는
게 물론 제가 엄청나게 뛰어날 수는 있어요 코어 하나가 엄청나게
뛰어날 수는 있지만 제가 코어 하나를 돌리는 것보다 8개를 어떻게 효율적으로
쓰는 거에 따라 결과가 빠르고 좋게 나오는 거기 때문에 그거를 최대화
시킬 수 있는 관리자라고 관리자 역할이잖아요 관리자 역할이죠
근데 뭐라 그럴까 상당히 많은 리드들이 그거를 생각을 못하는 거 같아요
결국에 제가 잡큐라면 저는 남한테 일을 계속 서비스하는 그런 서비스업
종이거든요.
내가 일을 편하게 만들어야 된다고 생각하는 리드들이 상당히 많았어요
그 대표적인 예를 들기 전에 제가 아까 코드리뷰 시스템하고 관련이
있다고 얘기를 드린 게 뭐냐면 제가 기존에 있던 프리컴의 코드리뷰
시스템을 별로 안 좋아했던 이유가 그 어떤 사람의 집중력을 뺏어 온
다였잖아요 결국 이 얘기가 뭐냐면 예를 들어서 코어2 그러니까 저희
두 번째 멤버가 열심히 일을 하고 있어요 그러다가 걔가 코드리뷰
가 필요해요.
그러면 저를 잡아야겠죠 그럼 저도 아니면 다른 애들 잡던가 그럼
그 코어도 일하고 있었는데 둘이 잡고 커뮤니케이션 하는 순간 이미
하고 있던 일은 멈춰져요 그러면 코어에서 아이들이 생기고 아이들
코어가 생기면서 둘에서 뭐가 필요한지 싱크하는 동안 그 싱크포인트가
거기서 있으니까 한 쪽에 한 쪽을 기다리던가 양쪽 딱 기다리던가
하는 문제가 생기고 그리고 다시 리뷰를 볼 동안 뭐 리뷰를 보는
동안은 두 명이 하나의 일을 하는 거잖아요 그럼 50% 캐퍼시티로 둘
다 약간씩 일을 하다가 다시 다 끝나고 체크인하고 다시 본래대로 돌아가는
거죠.
그러면 한마디로.
cpu 그래프를 그리면 각 코어에 두 개가 이렇게 올라가서 일을 하다가
중간에 멈칫하고 기다리다가 하나 또 기다려서 멈칫해서 싱크를 한
다음에 다시 조금 50% 정도 올라 갔다가 쭉 일을 하다가 다시 뭐
체크인 어쩌고 하고 다시 올라가는 거예요 그래서 그 중간중간 시간의
낭비라는 게 저는 굉장히 심하다고 생각을 하거든요 그리고 멀티
스레딩 하시는 분들은 알겠지만 제가 이 일을 하다가 다른 일로
잡을 교체할 때가 있잖아요 그러니까 뭐라고 그러지 컨텍스트 스위치
그 컨텍스트 스위치 때마다 오는 오버헤드가 뭔지는 아실 거예요
무슨 뭐.
시스템 마이크로 커널이라든지 뭐 이런 그 구조 따라 다르긴 한데
기본적으로 제가 컨텍스트를 바꾸면 일반적으로 메모리 주소도 그 제
스레드의 메모리 주소로 바꾸고 뭐 있던 뭐 뭐 메모리에 있던 내용
까지도 바뀌고 뭐 가끔 하드로브 디스크 드라이브에 스왑을 해야
될 때도 있고 메모리가 충분하지 않으면 그러면 거기에선 오버헤드
가 또 엄청나거든요 그래서 멀티 스레딩에서 컨텍스트 스위치를
덜하면 덜할수록 성능은 좋아지는 게 사실이에요 제가 말한 게 그거
죠 코어에서 딴 사람이 리뷰를 볼 때는 컨텍스트 스위치가 일어나서
그만큼 더 효율성이 떨어진다 그래서 그게 전에 말했던 코드
리뷰 시스템하고 말했던 거고 좀 전에 하려고 했던 얘기는 그 리드
들이 자기가 서비스직이라는 걸 생각을 못 한다.
그걸 어떤 상황까지 봤냐면 이건 진짜 말도 안 되는 거 같아요 진짜
큰 회사였거든요 저희 팀 qa만 500 명이 넘었던 걸로 기억을 하고
뭐 게임도 전 세계에서 가장 큰 게임 중에 하나였고 근데 이 회사의
버그 트래킹이 장난이 아니었어요 버그 트래킹을 하면은 보통 무슨
프로그램 쓰잖아요 회사가 특히나 뭐 개발자가 몇백 명이 넘어가고
뭐 그렇게 되는 상황이면 근데 버그 트래킹은 이제 데브트랙이라는
걸 썼어요 데브트랙을 썼는데 여기 원래 데브트랙이 사서 쓸 수 있는
프로 공짜였나 그건 모르겠다 어쨌든 사서 쓰는 걸 건데 거기에 버그가
저한테 누가 저한테 버그를 줄 때마다 이메일이 날라오게 돼 있어요 원칙
상은 그런데 그러려면 smtp 서버를 뒤에 꼽아야죠 이메일 서버를 근데
뭐 존재한 지도 20년 정도 지난 회사고 그런데 이메일이 안 날라오는
거예요 버그가 와도 그래서 제가 처음에 뭐 qa 매니저라던가 저희
팀 매니저 프로그래밍 전체 매니저 다 얘기를 해서 이메일을 연결을
하자 이게 말이 안 되지 않냐 개발자가 예를 들어서 현재 그러니까 버그를
보통 보면은 그 뭐라 그래야 하지 중요도 중요도가 아니 시비어치
라고 하는데 굉장히 심각한 수준 을 나타내는 게 있잖아요 크리티컬
버그라던가 뭐 이런 게 그래서 저희 는 a가 되게 심각한 버그 반드시
고쳐야 되는 거 b는 뭐 그래도 좀 중요하다고 할 수 있는 거고 b는
중요한 버그 c는 굳이 안 고치고 게임 출시해도 되는 버그 뭐 이런
식으로 되는데 예를 들어서 제가 버그가 아무것도 없어요 지금 버그
를 그래서 하나가 왔어 c버그를 고치고 있어요 근데 시간이 좀
오래 걸려요 그럼 c버그를 고치는 동안은 저는 계속 버그를 고치고
있잖아요 근데 그 순간에 누군가 저한테 버그를 a버그로 보냈다고
생각을 해봐요 크래쉬 버그 반드시 고쳐야 되는 거 그러면 일의 중요도
가 a버그가 되게 중요하기 때문에 c버그 고치는 거 멈추고 a버그로 돌아가
서 a버그를 먼저 고쳐야 되거든요 근데 이메일 로티피케이션 안 날라
오면 방법이 없어요 내가 왔는지 확인할 수 있는 방법이 그 dev track
프로그램 들어가서 다시 리프레쉬 를 눌러야만 되는 거예요 그리고
그게 어떤 사람 같은 경우는 프로젝트를 여러 개를 같이 참가하는 개발자
도 있거든요 딴 데 도와주느라 그러면 dev track에서 그 새 프로젝트
를 하고 있다 그러면 새 프로젝트를 볼 때마다 프로젝트를 바꾸고 리프레쉬
바꾸고 리프레쉬 바꾸고 리프레쉬 를 해야 돼요 그거를 그렇게 하고
있고 실제 그래서 버그가 빨리 오늘 고쳐야 되는 버그가 하루 이틀
늦어지는 경우도 있고 그것 때문에 qa도 못한 테스트를 못 하고 아니면
뭐 그런 경우가 있어요 그래서 정말 중요한 버그가 들어오면
은 예를 들어서 프로젝트 매니저 라던가 이런 사람들이 와서 얘기를
해준다는 얘기를 하는데 이제는 그 사람들도 언제나 그 f5를 누르고
있는 게 아니거든요 그래서 제가 진짜 이 많은 얘기를 했는데 반응
들이 진짜 웃겼어요 첫째 그 회사 에 12년인가 있던 프로그래머 그
dev track 그거 우리 회사에서 만든 프로그램 아니야 그런 기능 없을
걸 이 얘기를 하는 거예요 그래서 어이가 없어가지고 dev track이 얼마나
유명한 버그 트럭킹 시스템이고 그리고 그거를 왜 없다고 생각을
하지?
이메일 노티피케이션만 들어가서 이메일 노티피케이션 세팅이 있거든요
그래서 그거 어이없었고 저희 팀 프로그래넹 매니저 계속 뭐 별로
생각 없는 애였다고 생각을 하는데 가서 얘기하니까 그게 왜 중요하냐
고 이메일 노티피케이션이 f5만 누르면 되지 그리고 뭐 qa 매니저
라던가 뭐 해줄게 그리고 안 해주 고 it 매니저라던가 이메일 서버
세팅이 어려워서 어렵긴 뭐 어려 요 smtp 그냥 샌드메일만 연결하면
끝인데 포트폰만 적어주고 그래서 이런 반응이 있었는데 뭐 다들 뭐
어차피 그냥 일 안 하고 뭉개기 좋아하는 애들이 오래 남아서 올라가는 애들이라고
보지만
리더한테는 굉장히 실망했던 게 그거예요 그게 왜 중요하냐 f5를
누르면 되지 그거는 네 일이고 리더의 일이고 너는 프로그램을 안 짜는
리드니까 그럼 그래 너 f5 평생 누르고 있어 괜찮은데 중요한 거는
지가 f5를 눌렀고 찾아서 애들한테 미리 말하기 좀 좋죠 지도 안 해요
어차피 다 각자 그렇게 하라는 거야 왜 저도 몰라요 그러면 제가 아까
말했듯이 일하다가 계속 그러면 한 시간마다 f5를 눌러야 되는 건가
그러면은 그때마다 컨텍스트 스위치 잖아요 어떻게 보면 잠시 멈추고
확인하고 잠시 멈추고 확인하고
왜 애들이
능력을 떨어지는 일을 하려는지 도 모르겠고 그리고 아까 말했듯이
애들의 우선권이라든가 이런 걸 정해줘야 될 위치는 리더예요
근데 리더가 그렇게 그걸 도와줄 수 있는 시스템이 있음에도 불구하고
자기가 귀찮아서인지 아니면 뭐 새로 들어온 애가 이런 게 있는데
왜 안 하느냐고 지가 무능해 보이는 걸 싫어하는 건지 그런 거를 거부
한다는 거 자체가 전 이해가 안 됐어요 그래서 아 이거는 진짜 이상한 팀
이구나 뭐 당연히 빨리 나왔지만 그것도 있고 그리고
뭐 말이 좀 더 깊어질 것 같긴 한데 아까 말했듯이 우선권이 라던가 일의 중요성 이런거를 잘 알기 위해서는 리더의 테크닉과 스킬도 꽤 중요해요 특히
프로그램 쪽에서는 그래서 저는 주니어 실력을 가진 사람이 단순히 개인 사람 관리를 잘한다고 리더에 올라갈 수 있다는 건 말도 안되는
소리라고 보고 지금에서도 그런 애가 어떻게 뭐 정치를 잘해서 올라가 있는 걸 하나 보긴 보는데
어차피 오래 안 갈지 알릴 거라 생각은 하니까 상관 안 하지만 그래서 리더는 제가 볼땐 그래요 뭐
그런 얘기 있잖아요 정말 뛰어난 프로그래머를 관리자로 올리지 마라
인정해요
그래서 제가 생각하는 건 아마 예전에도 얘기한 거 같은데
프로그래머가 커리어 패서에서 리더하고 시니어는 확실히 구분돼야 돼요
그래서 어느 정도 기술 실력이 오른 다음에는
얘네가 리더로 가든 시니어로 가든 어느 쪽으로 갈 수 있어야 되는데
리더라면 관리자 시니어라면 순수 개발자
이게 어느 분야로 가든 간에 얘네들 봉급은 거의 비슷해야 된다고 봐요
예를 들어서 제가 인터미디어 있다가 리더로 갔다
그리고 다른 애가 인터미디어 있다가 시니어로 갔다 그러면
저는 시니어와 리더의 봉급 차이는 거의 없어야 된다고 생각을 해요
인터미디어까지는 최소 기본 스킬을 줬고
그리고 리더는 말 그대로 대인 관리, 관리 능력, 조직 능력
이런 거에서 인정받아 거기서 돈을 받고 시작하는 거고
개발자는 이건 없어도 순수한 기술력이 뛰어나기 때문에
돈을 받으면서 계속 자기만의 길을 가는다고 생각하거든요
리더로 갔다가 얘네들이 무슨 매니저직으로 빠질 수도 있고
시니어 같던 애들은 테크니컬 디렉터라든가 좀 더 기술 쪽으로
양 갈래지 않든지 이런 식으로
빠지는 그런 거에 중요하다고 생각을 해요
그래서 EA 캐나다에서는 그게 더 잘 됐어요 EA 스포츠는
거기서 인터미디어 이외에 둘로 나뉠 수가 있어요
그래서 걔네는 보면서 아 얘네는 그 책은 잘했구나 생각을 했고
그래서 제가 인터미디어 이외에 갈린다고 했잖아요
그래서 제가 생각하는 프로그래머 기준도 그거예요
최소한 인터미디어 정도의 프로그래밍 실력이 없는 사람이
저는 팀 리드가 돼서도 안 된다고 생각을 하고
그 위로 올라가서도 안 된다고 생각을 해요
특히 기술 쪽에서는
그래서 제가 생각하는 프로그래머 기준도 그거예요
그거는 거의 불가능한 얘기고
왜냐면 말 그대로 아까 일의 중요성을 모르고
뭐가 우선적으로 해야 되는지도 몰라요
판단이 안 돼요
그리고 자기가 판단이 안 되고 자기가 관리가 안 되는데
8명 코어를 돌릴 수 있다는 건 말이 안 되는 거예요
그래서 굉장히 중요한 직업이에요
그런데도 불구하고 자기의 효율성을 떨어뜨리는 거죠
나는 원래 100% 200% 낼 수 있는 코어인데
오버클락까지 되는 코어인데
내가 200% 오버클락 해봐야
8명이 80% 돌리는 거를 이길 수가 없거든요
8명이 80% 해봐야 640% 나니까
저는 200% 해봐야 200%예요
저쪽에 3배가 난 거예요
그래서 그러면 결과적으로 내 효율성을 좀 줄이더라도
왜냐면 자기가 일 전체를 볼 수 있는 눈이 있으니까
그 코어를 돌려주는 게 리더 일이라고 생각을 해요
그래서 어찌 보면 관리자가 중요한 일이고
모든 중요한 일을 결정하는 위치지만
또 다른 입장에서는
팀원들이 정말 이런 전체적인 그림을 좀 덜 보더라도 일할 수 있게
그리고 말 그대로 잡을 딱 던져주면
언제든 잡이 있게 뭔가 할 수 있는
라고 부려먹겠다는 얘기는 아니고요
그냥 언제나 할 수 있는 일이기 때문에
팀원이 있고 팀원이 언제 안 잡았고
할 일이 없으라고 노는 일이 없게
그리고 대부분 커뮤니케이션 잘 되고
싱크 잘 되게 하는 것도 중요한 거고요
그래서 저는 그게 리더의 자질이라고 생각을 해요
라고 했지만 굉장히 많은 얘기를 했어
대충 알아서 정리하세요
네 퍼프였습니다
