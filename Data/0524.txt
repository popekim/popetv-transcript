안녕하세요 포프입니다
이번에 잘못 말하면 어그로가 되게 끌릴 것 같은 비디오인데
그래도 굴하지 않고 꿋꿋하게 말해보겠습니다
대충주의로 일을 하시는 분들이 있어요
그 어떤 의미냐면은 일을 어떤 걸 할 때
올바르게 하는 게 아니라 어떻게든 일만 끝내는 거야 대충
그리고 나중에 이게 문제가 되면 그때 또 고치지
이런 마음가짐으로 하시는 분들 그런 분들이 있어요
참고로 이거는 모든 분야에 적용되는 얘기는 아니에요
만약에 그 일이라는 게 단발성 일인 게 주로인 그런 분야들도 있어요
프로그래머 아닌 다른 쪽 분야에서
그런 거는 그냥 한 번 하고 끝내고 넘어갈 거면
빨리 끝내고 넘어가는 게 가성비로 봤을 때 훨씬 훌륭하고 좋은 일일 수 있죠
그러나 프로그래밍 쪽은 대부분의 일이 재활용이 가능한 제품을 뭔가 만들거나
이런 것들은 그냥 한 번 하고 끝내고 넘어갈 거면
아니면 어떤 걸 만들어두고 계속 개선을 시켜나가는 게 일반적이에요
그게 디지털 쪽 제조업이 아닌 디지털 쪽 제품의 장점이에요
재활용성이 높다는 거
그게 되기 때문에 프로그래머가 대충주의로 어떤 거를 만든다?
그럼 나중에는 문제가 생기는 경우들이 꽤 있어요
그래서 대충주의로 재빠르게 어떻게 결과만 내는 사람?
그거와 뭔가 제대로 해서 결과를 내는 사람
시간이 두 개가 똑같아요
똑같다면 당연히 제대로 하는 게 좋은 거고
대충하는 게 시간이 빠르다면 대충주의가 좋을 수도 있겠죠
그러나 이거는 단발성의 한 가지 일만 보고 생각을 하는 거예요
내가 만들어 놓은 것들
나중에 누군가 개선시켜야 할 때 아니면 어딘가에서 재활용을 할 때
그때마다 이제 생기는 문제점들이 있을 거예요
내가 잘 만들어놨으면 그거는 손대지 않고 계속 사용할 수 있는 거고
잘못 만들어놨거나 고치기 힘들게 만들어놨거나
아니면 읽기 어렵게 만들어놨거나
안 만들어놨다면 누군가 한 번 건드릴 때마다 그만큼 더 문제가 생기는 거고
그래서 장기적인 시간과 단기적인 시간은 달라져요 어쨌든 간에
자 그럼 이렇게 생각을 해볼게요
이건 실제 제 주변에 있는 사람을 보면서 좀 친한 사람인데
요즘 느꼈던 문제이기도 해요
그 친구가 일단은 남들보다 손이 빠르기로 유명한 친구였어요
남들보다 뭔가 일을 되게 빨리 끝내고 뭐 그러는데
약간 핵을 좀 많이 하는 친구였어요
그런 성향이 있는 친구였죠
그래도 필요에 따라서는 이 빠른 속도 곧바로 뭔가 빨리 고쳐야 할 때는
이 친구가 필요한 경우들이 있죠
이런 친구가 있었는데 그래서 남들보다 꽤 계속 잘했던 친구예요
근데 이게 장기적으로 쌓여가니까 어느 순간에 발목을 잡고
뭐 내가 계속 성장을 했을 거 아니야 이렇게 잘한다고
남들이 보면서 뭐 봉급이 성장을 했든 실력이 성장을 했든
이게 어느 순간 이렇게 평가절하가 되는 순간이예요.
그게 무슨 의미냐면은 이게 사람의 성향과도 관련이 있는 것 같아요
예를 들어서 내가 남들보다 일을 빨리 끝내요
어떻게든 빨리 끝내요
근데 핵을 했어
근데 중요한 거는 그 핵을 보자마자
이거를 문제 삼는 회사가 있고 아닌 회사가 있어요
보통 사람들이 주니어들이 좀 못하거나 이러면은
가르쳐주고 고쳐나가면 된다고 생각하기 때문에
장점은 살리고 단점은 지적하면서 고쳐주는 게 회사의 환경이에요
그러나
그 회사는
그 단점을 지적했을 때
이거를 고치는 척만 하고 넘어가는 사람도 있어요
내가 왜 이 단점을 지적받았는지 고민을 안 하고
그냥 야 이거 잘못됐어 저렇게 고쳐 네 고치고 넘어가
그럼 나중에 또 똑같은 게 등장해요
근데 똑같은 실수를 또 해
야 이렇게 고쳐 네 그리고 또 넘어가
그런 식으로 실수들 하는 거
그런 실수를 하는 이유 그리고 왜 그러면 안 되겠는지 원칙이 있는데
원칙을 이해 안 되고 누군가 나한테 이거 고치라고 했으니까
고치고 넘어가면 빠르거든
이해하려고 하면 오래 걸리거든
그래서 그런 식으로 하면서 자기 문제를 안 하고
안 고치고 그 순간에 누가 고치라고 했을 때 빨리 고치고
끝난 거 같잖아
그리고 넘어가는 사람들은 여러 가지 분야에 계속 사람들은 실수를 하고
그거에 대한 지적이 들어오기 때문에
계속 쌓여만 가는 거예요
왜냐면 하나로 제대로 고친 게 없으니까
자기의 문제 하나를 제대로 고치고 확실히 이해하고 손에 익히고
다시는 그 문제를 만들지 않을 정도가 되지 않은 사람들은
이게 장기적으로 쌓이면 원래는 하나였던 문제인데
한 달에 문제가 하나 나온다면은
이게 3년이 지나니까 문제가
이미 36개가 나온 거야
36개 중에 내가 직접 고친 문제 하나도 없는 거야
그러면 나중에는 무슨 일을 하든 간에 그 문제가 보일 수밖에 없어요
자 3년이 지났어요
이게 무슨 문제냐면은
이렇게 얘가 여러 가지 문제가 계속 발생하는구나 라는 거를
누군가 깨닫기까지는 좀 시간이 걸리죠
그냥 반복되는 패턴이 보여야 되니까
사람이 한번 실수했을 때
그냥 무조건 잘라버리는 회사 문화가 있다면
이런 문제는 없을 수도 있어요
그러나 저희는 사람을 의심하지 말라는
참 참되고 아름다운 교육을 받고 자란 사람들이기 때문에
사람이 한번 실수했다고 의심하고 이 사람을 내치진 않죠
근데 그렇게 기회를 주는 과정들
그런 과정들에서 오히려 사람 성향에 따라
게으름을 피울 수 있는 사람들이 생기는 거고
처음에는 그렇게 넘어가도 큰 문제가 없는 거야
내가 1년 지나봐야 문제가 12개 있거든
12개가 한 번에 몇 번이나 나올 거야
한 달에 한 번씩 나온다 그랬잖아요
그럼 나는 한 달에 한 번씩 나올 거야
그런 문제 만드는 아무 문제 없는 친구예요
근데 이게 3년이 쌓이면 그보다 3배가 더 많이 보이겠죠 한 달마다
그런 식으로 점점 문제가 보이는 게 문제예요
그 3년이 되기까지 이 사람은 똑같은 봉급을 하고 있었을까요?
아닐 거예요
내가 남들보다 해킹을 해서 문제를 빨리 끝내는 사람이에요 어쨌든 간에
그러면 그거에 따라 봉급이 올라갈 거예요
아 넌 쟤보다 좀 일을 빨리 하는구나
그럼 업무 수행 능력으로 그게 이제 평가를 받으면서
자기는 그 높아지는 봉급을 받았겠죠
근데 내가 3년째 봉급을 받았을 때
봉급을 올려받았어
그때부터 내가 과거부터 이상한 짓 해왔던 게 계속 문제가 드러나고
그제서야 그 윗사람이 인식을 하기 시작한 거예요
그럼 이 사람은 윗사람은 어떻게 하겠어요?
자 이제 그거 고쳐라고 얘기를 하겠죠
그리고 이 사람은 이제 모든 일을 할 때마다 자기의 문제들을 고쳐야 되는데
그때 가서 자기가 36개의 문제를 다 고칠 수 있다
그러면서도 자기의 업무량을 그대로 소화할 수 있다
그러면 문제는 없죠
그럼 봉급이 평해선을 긋겠지 최소한
근데 거기서 봉급이 올라가니까
발전하긴 더 어렵겠죠
여태까지 3년 동안 안 해왔던 노력 다 퍼붓고
그 다음에 올라가야 하는 거니까
그래서 이때 보통 이런 사람들이 선택하는 게 이직
이직해서 또 한 번 3년 정도 버틸 수 있겠죠
그 뒤에 또 이직
그 뒤엔 이직을 못하는 경우가 더 많아요
그래서 이런 부분들이 오히려 나중에 발목을 잡아요
그래서 올라가다가 한 중간까지 잘 올라가다가
이렇게 떨어지는 분도 있어요
그런 분들이 보통 이 처음에 좀 괴롭더라도
제대로 올라가고
제대로 장기적인 계획을 보고 제대로 하는 습관
원칙이 뭔지 알고 그걸 이해하면서 고쳐야 되는데
순간순간 빨리빨리 그냥 고치고 넘어가는 스타일
어떻게 보면 게임에서 현질 많이 하시는 분들
게임에서 현질 안 해도 시간으로 충분히 할 수 있는 것들 있잖아요
근데 그 순간 그 순간에 현금 딱 넣으면 딱 한 방에 해결되고
재밌고 끝나니까 고통 안 받으니까 넘어가는 스타일
게임할 땐 그래도 돼
업무에서 현질을 하기 시작하면 좀 위험한 현상들이 나중에 나온다는 거예요
그래서 그런 식으로 올라갔다가 평가가 좀 떨어지는 친구를 본 적이 있어요
그래서 그런 게 조금 위험한 것 같아요
특히 아까 앞에도 말했듯이
저희처럼 재활용이 가능한 제품 코드 이런 거 만드는 분야의 사람들일수록
그래서 그런 거를 생각하면 위험한데
문제는 그 특히 나라에 따라
그 나라에서 나쁜 말 하는 걸 싫어하는 문화들이 있어요
어떤 사람에 대해서 이거 못한다 저거 한다 그러면은
뭐 그게 꼰대지처럼 하는 것 같아요


이런 식으로 몰고 가는 문화도 있고
아니면 괜히 좋은 게 좋은 거다라고 해서
나쁜 말 하지 말고
그냥 뭐 2년 지나고 사람 자르고
더 괜찮으면 남겨두지
이런 생각하는 그런 문화들도 있고
그런 걸 보면 피해보는 거는
결과적으로는 본인이죠
물론 내가 앞으로 프로그래밍 시작해서
뭐 봉급 나쁘지 않았고
앞으로 한 3, 4년, 4, 5년, 최대 6년
그동안만 벌고
그 뒤에는 난 아무것도 안 할 거다
다른 거 할 거다
라고 하시는 분들은
그게 최적의 플랜일 수도 있어요
가장 재밌고 가장 인정받고
후딱후딱하고 괴로운 거 안 지내고
그리고 끝나면 넘어가는 거
그러면 최적의 플랜이죠
그리고 관두면 돼요
근데 내가 이걸로 롱런을 해야겠다
생각하시는 분들 중에
그런 대충주의로 하시는 분들이 있으면
특히 저희 같은 직종
재활용되는 제품을 계속 만드는 직종
거기서는 점점 어려워질 거예요
여기서 또 한 가지
사람들이 크게 강구하는 게 뭐냐면
자 인간은 두뇌가 퇴화를 해요
어느 시점에
티스현 평가emat에



fatless nigga 2첩 정도 되지rain 찍 ув진 이후 그 시계가ết당하고
그래서 20살때 기억력보다 30살 때 기억력이 좋은 사람은 별로 없어요 멀 3술 6대 기억력 이 버렸습니다 나쁜 사람은 백신 몇rél로에서피 это ley lot 4 before sa novaggak합니다 마은 살 때 기기가 � irritated to D Woche 잘 때보다 좋은 사람은 아예 없을 거고 제 생각에는 그러면 결과적으로 제가 경력을 쌓아 가면서 그만큼 대우받고 인정을 받아 가면서 저희 머리는 오히려 빠다가 되고 있는 거예요 박탱 안죠 니가 나빠지고 있는 거예요 i 그� 만든 머리가 나빠 지는 상황에서 거칠 수 있는 법 무얼 거에요 내가 정말 실수 안하는 방식이 Trung Меня 제가 정말 실수 안하는 방식이
지난 몇 년간 10년간 내 몸에 이거 있어야 되는 거야
그럼 그때는 내가 뭐가 잘못됐다고 말하는 이 규칙
아까 3년 동안이면 36개 나온다고 그랬죠 실수가
그게 확실히 고쳐있고 몸에 배어있어야
나이가 먹었을 때 더 실수를 안 하는 거예요
근데 그게 안 되어 있으면
어떻게 내가 그나마 똑똑해서
20개 실수 왔다 갔다 등장해도
남들이 지적하면 빨리빨리 고쳤어
나중에 나이가 먹으면요
그거조차 안 돼요
왜냐면 그 실수를 했어
그래서 실수 고치래
그 말귀를 못 알아들어요
그런 게 점점 등장하기 시작을 해요
그러면 옛날에 이거 이렇게 고치라고 했잖아
그랬나?
찾아보면 나오죠
어딘가 문서로 적혀있으면
그러나 이런 대충주의를 하시는 분들이
내가 다른 걸 다 포기하고
어떻게든 빨리빨리 끝내갖고
내가 잘한다고 인정받으려고 하는 그런 성향인 건데
그분들이 무슨 꼼꼼하게 문서를 검색하면서 하겠어요?
절대 안 해요
그래서 결과적으로는 나이에 대한 저주
우리가 멍청해지고
멍청해지는 그 저주와
내가 그 좀 더 머리가 빠릿빠릿하고
좀 더 훈련이 가능했을 때
머리가 굵어지기 전이죠 그게
그때 내 몸에 들이지 않았던 그 습관들
그것들이 점점 이렇게 뭉치다가
어느 순간에 빵 터지는 순간이 생겨요
저희 특히 프로그래밍 업계에서는
뭐 프로그래머 경력은 몇 년 뒤면 끝난다
몇 살이면 프로그래머 못한다라는
말을 하시는 분들이 있죠 사실은
그리고 그게 전 거짓이라고 생각하지는 않아요
단!
그거에 해당하는 분들이
제가 지금 말했던 이런 성향들
대충주의라던가 실수를 제대로 안 고치는 것들이
어느 정도 가지고 계신 분들이고
이거를 잘 고치고
그 문제가 다시 없도록 방지를 하고
이런 거를 잘 하시는 분들은
그분들이 말하는 것보다 수명이 길고요
오히려 다른 직종보다 몸 쓰는 직종보다 길 수도 있어요
그리고 이제 업계가 점점 오래됐죠 이제는
뭐 20년 전만 해도 신생업계 이렇게 얘기했지만
업계가 오래되면서 그렇게 나이 드신 분들도
아직 현역에 계신 적이 점점 있고
뭐 둘러보면 충분히 그러신 분들이 있어요
단 이런 대충주의로 사시는 분들이 더 다수이기 때문에
일반적으로 말할 때는 그분들의 말이 맞는 거죠
근데 그렇게 말하면은 그렇지 않은 직종이 몇 개나 있어요
그냥 이렇게 말씀드릴게요
내가 게임에서 현질을 좋아한다
남들은 현질을 안 하는데
나는 현질을 막 해갖고 빨리 하는 거 좋아한다
그러면 그 습성 자체가 내가 일하는 데 들어가 있진 않은지
내가 어떤 문제를 봤을 때
이 문제의 이유가 뭐고
그걸 이해하고 해결하는 게 아니라
남들한테 이거 해결하는 법을 알려주세요
라고 외치고 있는 사람은 아닌지
그리고 누군가 해법을 줬을 때
그 코드 넣어보고 어 되네?
그리고 다시 이해 안 하고
되니까 넘어가
이런 스타일은 아닌지
그 고민을 해보세요
제가 지금 말한 것 중에 본인이 속한다면은
이런 대충주의 성향으로 프로그래밍을 하실 가능성이 꽤 높아요
그것까지도 말씀을 드릴게요
감사합니다
좋은 얘기 하는 게 없는 거 같냐
아이고 포프였습니다
