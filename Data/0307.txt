오늘은 디렉트엑스12에 대해서 다시 한 번 또 얘기를 해볼게요
전에 예전부터 몇 번 방송을 했죠
영천님하고 라이브도 한 두 번 했고
아... 그리고 그때 디렉트엑스12 페이스북 그룹을 만들었다고 광고도 했어요
그리고 거기에 이제 뭐 아무도 알려주지 않는 디렉트엑스12 개발자가 알아야 될 사실들
넘버원, 넘버툴을 올렸던 걸로 기억하고
넘버3를 원래 올리려고 했는데
뭐 어차피 비디오도 만드는 사람이니까
비디오로도 얘기하고 그냥 링크를 벌면 되겠구나
그러면 나한테도 광고 수익이 돌아오겠지
이런 생각으로 만들고 있어요
그래서 오늘 할 얘기는 옵티마이제이션 중에 하나예요
왜냐면 디렉트엑스12가 이제 로우 레벨 그래픽스 APL을 그냥 우랜에 던져준 거예요
예전에는 디렉트엑스11까지는 드라이버가 많은 일을 해줬어요
엔비디오가 만든 그래픽 드라이버가 이 중간 과정에 있으면서
저희가 대중적으로
대중 함수를 호출해도
지네가 스레이드 다 돌리면서 최적화 다 해주고
뭐 한 프레임 딜레이 누면서 그림 그려주고 이랬거든요
근데 디렉트엑스12는 그걸 저희 보고 하라는 거예요
왜냐면 엔비디아가 다 해줘봤자 그거는 일반적인 방법이고
내 게임에 정확히 맞는 스페시픽한 방법
굉장히 특화된 방법을 저희가 만들면 최적화를 엄청나게 할 수 있다
그러나 이제 거기에 대한 단점은
저희가 엔비디아 엔지니어보다 굉장히 똑똑해야 된다는 단점이 있어요
아니면 비슷한 정도의 비슷하거나 약간 모자라도
우리 게임에 맞는 그런 최적화를 할 수 있으니까 나을 수도 있다
엔비디아 사람들도 이제 인텔에 있는 개발자만큼 괴물들이거든요
이제 괴물이 되기 위해서 노력을 하셔야 될 것 같은데
그 중에서 이제 나온 거 하나가 이제
파이프라인 스테이트 오브젝트라는 게 있어요
그래서 이게 뭐냐
예전에 이제 디렉트엑스9 정도나 뭐 11도 똑같고
그걸 하시는 분들은 보통 이런 함수 호출을 기억하실 거예요
setState 그리고 뭐 알파 블렌딩 on and off
뭐 enable, disable이었지만
그리고 무슨 setShader 그리고 vertexShader, pixelShader 이런 거 했었고
뭐 여러 가지 상태를 넣는 게 있었잖아요
왜냐면 디렉트엑스는 상태 저장이니까 상태 머신이니까
그럼 디렉트엑스에서는 이걸 뭐 하냐면은
스테이트를 바꿀 때마다 굉장히 좀 느린 연산이거든요
그럼 얘네들은 아 이 연산이 바뀌었으니까 이 스테이트를 다 모아서
딱 이렇게 무슨 바이너리 이렇게 블록으로
만든 다음에 그걸 그래픽 하드웨어 던져주는 거예요
그리고 draw 함수를 호출하면은 이제 그거에 맞게 그려주는 거죠
근데 뭐 알파 블렌딩을 끄냐 키냐 뭐 이런 하나하나가
그 내부적으로 동작하는 방법을 바꿔줘야 되는 거예요
뭐 흔히 그냥 하드웨어적으로 생각하면
그러니까 단순한 하드웨어
여러 가지 스위치가 있고 아 이 스위치를 올리고 저 스위치를 내리고
저 스위치를 올리고 이 스위치를 내린 다음에
시작 버튼 이렇게 누르는 개념이거든요
그래서 그 전환이 언제나 느렸어요
그래서 그거를 빨리 하기 위해서 만든 게 pso예요
그래서 파이프라인 스테이트 오브젝트
이게 뭐냐면 아까 말한 바이너리 블록 있잖아요
그거를 저희가 프로그래머가 미리 다 만들어 놓을 수 있게 하는 방법이긴 해요
그러니까 이거를 만들려면 어떻게 하냐면
그 안에 들어가는 정보가 굉장히 많아서 제가 좀 적어놨는데
일단 쉐이더에 들어가는 모든 그 컴파일된 바이트 코드가 거기 들어가고
그리고 vertex 포맷 그니까 이 모델에서 있는 vertex가 있잖아요
그럼 이게 어디서부터 어디까지가 포지션이고
어디서부터 어디까지가 텍스쳐 코어 디넷 uv고
이런 정보를 들어가고
이 들어온 이 정점들이 삼각형이냐 사각형이냐
트라이앵글 리스트냐 트라이앵글 뭐 팬이냐
이런 정보도 거기 들어가 있고
온갖 블렌드 스테이트 알파 블렌드 이런 것들
그리고 뭐 레스토라이저 스테이트
depth stencil 그거는 depth 테스트하고 마는 거 그런 것도 들어가 있고
뭐 렌더 타겟 포맷이라던가
depth stencil 퍼포멧이라던가
렌더 타겟 숫자
멀티 샘플링 할 때
뭐 멀티 샘플링 할 때 그 매개변수들
그리고 뭐 기타 등등
뭐 루트 시그네처라는 것도 좀 있는데
그것도 특별한 거긴 한데
이거는 그냥 맵핑 파일이에요
이 쉐이더에 쓰는 리소스와
실제 이 리소스가 어느 메모리에 있는지
그런 게 모두 pso에 들어가서
바이너리 블록을 만들게 돼요
그래서 실제 저희가 코딩을 할 때는 어떻게 해야 되냐면
pso 이제 pso 이제 개체를 만들고 거기다가
모든 거를 집어넣는 거예요
이 pso 개체는
블렌드가 on이고 뭐 depth가 off다
그리고 기타 타는 게 똑같으면
그럼 이제 하나를 만들어
그리고 두 번째 pso는
이제 여기는 블렌드가 off지만 뭐 depth는 on이다
그러면 또 두 번째가 나오고
이 하나하나의 매개변수가 바뀔 때마다
pso가 새로 생기는 거예요
원래는 드라이브에서 해줬던 거를 이제 저희가 하는 일이죠
그래서 예전에 영천님하고 라이브할 때
에스포넨셜 그로우스 된다고
그 있잖아요 폭발적인 성장
그 2 곱하기 2는 4지만
거기다가 여기다 또 믹스할 수 있는 이 두 개를 또 붙이면
8개가 되고 두 개면 16개가 되고
32개 64개 막 이렇게 올라가잖아요
그래서 이런 조합하는 매개변수가 하나씩 많을수록
엄청난 성장을 하거든요
근데 지금 제가 말씀드린 이 pso에 들어가는 모든 거에 대해서
미리 pso에 들어가는 모든 매개변수에 조합을 해서
permutation이라고 하는데
정확히 한국말로 뭔지 기억이 안 나요
그래서 permutation을 해서
이거를 다 뽑으면 가능한 수를 이게 막 수백
아니 몇 빌리언이 될 거예요 아마
엄청나게 많아요
그래서 이걸 만들어 놓으면 메모리가 막 몇 기간지
몇백 기간지 엄청나게 폭발이 되고
그건 불가능하기 때문에
게임 실행 중에 이렇게 만드는 경우가 있거든요
제가 저번에 냈던 그
디렉텍스12용 게임을 하나 냈잖아요
그 게임도 그런 식이었어요
근데 문제는
예를 들어서 만약에 이제 엔진을 돌리는 도중에
이 pso를 만든다
예를 들어서 게임 시작할 때가 아니라 엔진을 돌리는 도중에
갑자기 새로운 레벨을 읽었는데 거기에서
아 여기는 알파 블렌딩 스테이트가 특이한 게 나와
그럼 그거에 맞는 pso를 또 만들어야 되잖아요
그게 시간이 꽤 걸려요
시간이 진짜 많이 걸려요
옛날에는 드라이버가 이제 한 프레임 딜레이 주면서
이런 정보가 있으면
다른 스레드를 돌려서 여기서 처리하고
넣는 그런 딜레이가 충분히 있었는데
지금은 곧바로 그리는 그런 개념으로 가거든요 사실은
그렇기 때문에 그게 pso로 만드는 게
막 갑자기 한 프레임에 새로운 레벨이 확 올라와서
막 한 천 개의 pso로 만들어야 된다
그럼 이게 한 100ms 걸리는 경우도 봤어요
근데 게임 한 번에 16ms에 그려야 되거든
그러면 열 프레임이 스토리 딱 걸리는 거예요
딱 보이죠 딱 움직이다가 딱 걸린다
딱 움직이는 거
그래서 이제 저희가 이제 최적화를 하기 위해서
굉장히 많은 짓을 했고
그래서 이제 pso를 저희도 이제 다른 스레드를 올려갖고
pso가 올 때마다 pso 제네레이터라고 이제 잡을 만들고
딴 스레드에 던져주고 그 워커 스레드가 만든 다음에
이제 최종적으로 이제 서밋하기 전까지
그러니까 이 렌더링 큐를 서밋하기 전까지만 끝나면 상관이 없는 거니까
그렇게 했어요
그래서 이제 그거는 핵이었고
정말 핵이었고
이거를 올바르게 하려면
정말로 올바르게 하려면
음..예전에 우버 쉐이더 제가 강연했을 때도
똑같은 얘기를 했지만
누군가는 이런 거를 게이트 키피핑을 해야 돼요
아니면은
아니면은 이걸 이제 오프라인에서 미리
어떻게 해주던가
그래서 어떤 말이냐면은
첫 번째는
첫 번째 방법은 뭐냐면
이 우리 게임에 쓸 수 있는 블렌드 스테이트는 이거하고 이거
그러니까 이 쉐이더는 이런 이런 블렌드 스테이트가 있고
스테이스만 쓸 수 있고
뭐 E쉐이더는 이런 뎁스만 쓸 수 있고
그래서 그 가능한 조합을 미리 정해놓는 거예요
그니까 굉장히 리미티드한 세트로
그니까 제한적으로 걸어놓고
아트를 만드는 사람이나 게임 엔진에서 그 상태를 저장하는 것도
그 외에는 절대 안 되게
그리고 나중에 그게 필요하다면 직접 말해서 그거 하나를 올려줄 수 있게
그러면은 조합의 수가 줄어들고
실제 엔진이 딱 시작할 때 그런 PSO를 만들 수가 있어요 부팅 도중에
그러면 게임이 실행되는 도중에는 PSO로 새로 만들 게 없으니까
이미 있으니까 그냥 쓰면 되는 장점이 있죠
이게 그 영천님이 그때 디렉텍스트로 만들었던 게임에서 그런 식으로 할 거예요
왜냐면 이분은 혼자 개발하시는 분이고
자기가 어떤 스태틀을 쓸지 미리 다 결정해놓으신 분이기 때문에
그걸 확실하게 할 수 있어요
근데 이게 아니라 그냥 아티스트가 마음대로 다 하게 내버려두면
진짜 몇 천만 개 뽑아야 될 수도 있어요
왜냐면은 미리 그려놓으려면 근데 불가능하잖아
미리 PSO로 만들어놓는 게 몇 천만 개가 불가능하니까 그러면
저희처럼 이렇게 말로
말도 안 되는 핵을 해갖고
뭐 그런 식으로 이제 실행 중에 어떻게 멀티트레이딩에 올려갖고
버텨보기 이렇게 하는 수밖에 없는 거지
이건 첫 번째 방법이고
이건 좀 굉장히 제한적이고 굉장히 주먹구구한 방법인데
뭐랄까 게임을 여러 번 만들어 본 느낌으로는
주먹구구한 방식이 솔직히 그렇게 나쁜 건 아니에요
굉장히 제한적이지만 굉장히 훌륭한 방법이에요
아 그리고 뭐지 음
두 번째 방법은 뭐였냐면은
파이프라인에서 모든 걸 처리해주는 거예요
그래서 실제 레벨을 이렇게 저희가 막
뭐 레벨 에디터에서 만들거나 뭐 한 다음에
실제 게임에 넣으려고 이제 출력을 하잖아요
아 그니까 게임에 넣으려고 굽잖아요
그럼 굽는 과정에서 아니면 레벨 에디터에서 레벨 에디터 세이브하는 과정에서
여기서 쓴 액셋은 이거에 PSO 상태는 이렇다라는 걸
모두 다 저장을 해놓고 그거를 오프라인으로 만들 수 있으면 만들면 더 좋고
지금 제 기억으로는 이게 오프라인으로 만들면 더 좋고
오프라인으로 아마 만들 수가 없을 거예요
드라이브마다 바이너리를 주는 게 달라요 AMD, NVIDIA에 따라
근데 그 조합만 미리 알고 있으면 그 조합을 미리 저장해두고
아 그 조합으로 이제 뭐랄까 처음에
그 조합이 뭔지를 기록해둔 다음에 엔진을 처음 시작할 때
이 조합이 뭐가 뭐가 필요한지 아니까 이 레벨을 읽을 때
그때 굽는다거나 아니면 그 조합을 모두 다 모아서 글로벌로 한번 굽는다거나
엔진을 시작할 때
그래서 그런 방식으로 가는 게 더 맞아요
파이프라인 쪽으로 가서 그러면은 아티스트가 무슨 짓을 하던 그거를 꾸어놓을 수 있으니까
뭐 그래도 워낙 많은 걸 쓰는 건 문제겠지만
뭐 게임에서 쓰는 게 많아봐요 얼마나 많겠어
뭐든 가능한 퍼뮤테이션 만드는 것보다 그게 훨씬 낫겠죠
그래서 그런 방법이 있고
아 생각하다 보니까 저희가 최적화를 할 때는 그것뿐만이 아니라 이 방법도 썼어요
그러니까 그것도 너무 느렸어
1000개 아까 말할 때 막 160ms 막 걸리고 그랬다 그랬잖아요 레벨 하나로
그래서 저희가 한 일은 정말 극악무도했지만
뭘 했냐면은 코드를 하나 만들었어요 개발자만 볼 수 있는 코드 실행되는 코드를 만들어서
이 레벨에 들어가서 게임을 실행하는 게임을 진행하는 동안
여기서 쓰는 PS5의 컴비네이션
그러니까 어떤 스테이트가 하는지를 다 저장을 해서 다른 파일이나 파일을 만들어내고





파일로 저장을 했어요 pc 버전에서 그 다음에 이제 그 버전을 따로 하나
구워서 아까 말했던 파이프 원래는 제가 말했던 레벨 에디터에서 세이브
할 때 했어야 되는 일을 게임을 실행하면서 만든 다음에 구워서
실제 게임을 구워서 데이터로 만들고 그 다음에 게임을 실행할 때 미리
만들어 놓은 그 데이터를 보고 pso 를 만들어서 dx 드라이버에 만들어서
이제 그 다음에 썼던 거 다행히도 레벨 로딩하는 그 로딩 스크린 안에
포함이 되었었기 때문에 게임을 실행하는 도중에는 그런 멈춘 상황이
없었고 이 문제의 단점은 과연 저희가 모든 레벨의 구석구석을 가봤고 모든
캐릭터를 써봤고 모든 총을 써봤고 모든 이펙트를 실행을 해봤다는 보장이
없잖아요 그 pso를 그 데이터를 뽑으려고 했을 때 그렇기 때문에
실제 거기서 미싱한게 있을 수도 있어요 그래서 미싱한게 있다면 그거는
실시간으로 만들어요 근데 그래봐야 몇천 개 수준은 아니기 때문에 아무
문제가 없었다 그래서 이런 좀 이상한 짓들을 했어요 사실은 그래서
이제 pso에 맞게 dx12가 나왔고 그거에 대한 뭔가를 만든다면은 그거에 맞는
파이프라인이 필요하다는 생각을 하게 됐어요 그리고 그중에 특히 성능에 정말
많은 영향을 미치는게 둘 중에 하나가 pso 정말 많은 영향을 미쳐요 그래서
이거는 아무도 그렇게 열심히 말해 주지 않아요 pso라는게 있다 이걸 쓰면은
이제 하드웨어가
스펠 디테일이 bask의 잘못되고 스펠 디테일을 바꾸어 worlds로 사용하고
다른 부품에서와서 pelo 스위터를 소리 하나나 바꾼 것 그니까 굉장히
빠르다 라고 얘기하지만 피해 stripped'를 만드는게 엄청 느리기
때문에 이거를 정말 빨리 해야 된다라고 문서에는 약간은 써있어요
한번 뭐 이거 멀티 트렌딩으로 돌리거나 미리 만들어 놓고 해야 한다고
써있긴 한데 지나가듯이 말했고 중요하다고 얘기 안해서 아무도
말해주지 않는 dsx12 이야기인 것 같아요 이것도 그래서 오늘 이야기는
pso편으로 하고 음..
반복해야 될 것 같아 정리는 따로 안 하겠고 잘 이해가 안 되시는데
필요하신 분들은 다시 처음부터 돌려보시는 게 더 나을 것 같아요
오늘은 이 정도로 하고 포프였습니다
