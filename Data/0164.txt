안녕하세요 포프입니다
저번에 한번
그 퍼포스 헬릭스에 대해서
얘기를 해본적이 있어요 헬릭스 클라우드가 나온다 어쩌고 저쩌고
그 뒤에
제가 운이 좋게도
아니 운이 좋게는 아니고
제가 PM하고 그쪽한테 계속
계속 그랬죠
퍼포스바를 왜 안 넣어주냐고
퍼포스 헬릭스 베타에 들어갔어요
클라우드에
써본 결과
제가 생각했던 것보다 못해요
개선점을 좀
개선을 해주면 괜찮을 것 같은데
첫번째로
제가 가장 크게 가졌던 궁금증은
과연 퍼포스 헬릭스의
DBCS
Distributed Version Control System
거기에 기능이
과연 예전에 퍼포스에서 밀던
샌드박스라는 거랑 뭐가 크게 다른가
궁금했어요
제가 그 질문을 예전에 트위터에서 퍼포스 애들한테
던졌을 때
버전 컨트롤 시스템 변체가 아예 다르다고 얘기를 했어요
저는 그게 완벽히
새로운 개념이라고 생각을 했는데
제가 들어가서 본 바로는
클라이언트 쪽에서 느끼기에
저희가 사용할 때 느끼기에는 예전과 시스템은 똑같아요
샌드박스에서 하던 것처럼
스트림 메인 스트림 하나 만들고 자기 스트림 하나 만든 다음에
거기서 스트림 여러 개 만들면
그게 거의 브랜치 개념이 되는 거죠
그럼 그 브랜치를 만들고
거기서 일하고 자기 스트림에
둔 다음에 다시
리모트 그러니까 마스터
리모트 마스터를 푸쉬하는 그 워크플로우는
똑같아요
그래서 워크플로우에선 달라진 게 없고
제 생각에는 그 사람들이
DBCS 엔진을 새로 만들었다는 거는
내부적으로 처리하는 엔진을 새로 만들었다는 거 같아요
예전에
샌드박스 같은 경우는
컴플렉스 좀 많이 나고 여러 가지 문제가 있었거든요
그래서
그게 이제 첫 번째 발견한 거고
기시나 머큐리얼에 비해서는
솔직히
DBCS만 되는 거니까
한 가지 방법으로 간단하게 할 수 있는 것보다는
약간은
좀 더 사용이 복잡해요
기본적으로는 여전히 중앙 처리 방식이고
그냥 DBCS를 이제 로컬로 올린 건데
그렇게 약간은 복잡하고
또 하나 제가 발견했던 문제는 뭐냐면
Git 같은 경우는 제가 Git을 받으면
기본 자체가 DBCS고
싱크가 전부기 때문에
로컬에서 그냥 리포터리 만들고 별 짓을 다 할 수 있거든요
근데 퍼포스는
클라이언트에는
버전 컨트롤 시스템이 안 따라와요
오히려 제가 서버 컴포넌트를 따로 또
받아와서 설치를 해야 돼요
그래야만 제 로컬에서 DBCS가 돌아와요
뭐 당연한 얘기인데
또 하나 재밌는 거는 Git이나 이런 거는
로컬에서 알아서 돌기 때문에 파일 시스템 기반으로
포트넘버 이런 개념이 없는데
퍼포스는
각 제가 만드는 샌드박스 스트림마다
포트넘버를 새로 줘야 되는 것 같아요
예전에 그랬거든요
제가 정확히 완벽하게 사용해보진 않았는데
이번에도 설치하다 보니까 포트넘버 지정해주라 그래서
좀 짜증나서 제가 관뒀는데
그런 것 같아요
그래서 그거에 좀 개인적으로는 아쉬워요
개인 유저 입장에서는
포트넘버 신경 안 쓰고 그냥
이 파일은 이렇게 도는 거 끝이면 되거든요
사실은 그게 아니라
이거를 이제 인스턴스 하나씩 만들었고
포트를 대입해야 된다고 했으니까
저는 좀 마음에 안 들고
그리고
이제 세 번째는
이제 그 헬릭스라는 게
제가 볼 때는 브랜드 리네임 한 건데
사실은 예전에 퍼포먼스로 돌던 거를
좀 그래도 클라우드 만들면서
네이밍 한 건데
일단 클라우드 자체는 문제는 없어요
그냥 호스팅을 해주는 거예요 웹에서
현재 공짜인데
프리, 리포지토리, 프라이빗까지 되고요
공짜예요 물론 베타기 때문에 그럴 수도 있는데
프라이싱이 어떻게 될지 모르겠어요
나중에 제가 볼 때는 20명
뭐 이렇게 전부일 것 같은데
20명의 워크스페이스는 뭐 20개까지
이 정도
근데 이제 워크스페이스 20개도
그러니까
퍼포먼스의 워크스페이스 라는 개념이
뭐 이렇게 디렉토리 여러 개 있고
그걸 여러 개 맵핑한다는 개념은 좋은데
기처럼 간단하게 그냥 뭐
뭐라 그러지
이폴드하고 끝나는 그런 게 아니기 때문에
한 명이 워크스페이스 여러 개 쓸 경우가 있거든요
그러면 사용자 20명의 워크스페이스가
워크스페이스 20명이어도
컴퓨터 한 대마다 워크스페이스가 또 사로 나오니까
그것 따라 이제 또
실제 사용자 수는 20명이 안 되는 경우가
많아서 그것 좀 나중에 문제가 될 것 같고
이 퍼포스 헬릭스가
한 얘기가 이제 우리는 기술으로도
싱크해서 받을 수도 있고
퍼포스로 싱크해서 받을 수도 있다요
실제 해봤는데 돼요 둘 다 돼요
근데 이제 저는 이게 뭔가라고 속을 좀 까보고 에라 메세지 좀 보고 그랬는데
결과적으로는 얼마 전에
1~2년 전에
퍼포스에서
딥클라이언이라고 해서
내부는 퍼포스인데
앞에서 딥클라이언트를 해도 퍼포스가 받아가고 말아서 처리해주는
그런 기능을 만들었어요
그러니까 결과적으로 딥퓨전이에요
그 이상이 아니고 그 이하도 아니에요
그 다음에 또 하나 얘네가 약속을 했던 게
우리는 폴더가 여러 개 있으면
그러니까 예를 들어서
리포가 하나 크게 있고
그러면 그 서브폴더 하나만을
갖다가 싱크할 수도 있다라는 얘기였거든요
근데 그거는
제가 봤을 때
예전과 똑같아요
처음에 그랬고
퍼포스도 그랬듯이 그렇게 돼요
퍼포스로 그렇게 되고
제가 원했던 거는
솔직히 이거였거든요
제가 원했던 건 뭐냐면 퍼포스를
회사에 있는 모든 리포
모든 코드를 리포 하나에 박아요 딱 하나에
그리고 뭐 폴더가 있겠죠
무슨 A팀 B팀 무슨 게임 무슨 게임 이렇게
그러면 제가 기술로
그 서브폴더만 하나
기술로 뽑아내길 바랬어요
근데 그게 안 되는 거 같아요 지금
예 그거 안 돼요
그런 때는 전부 다 뽑아야 되는 거 같아요
아니면 또 하나 제가 원했던 건 뭐였냐면
이건
제가 좀 전에 한 말은 틀릴 수도 있어요
제가 지금 확인해 봐야 되는데
제가 정말 원했는데 안 된 게 뭐냐면
그런 거 있잖아요
제가 이미 Git 리포가 한 30개가 있어요
그러면 이 30개를 저는 퍼포스에다가
폴더 하나 만들고
각 폴더별로 30개를 받고 싶은 거예요
히스토리 다 보관되고
그러면 이제 이 Git에서는 계속 작업을 하잖아요
체크인하고 다른 리모트에도 갈 수 있고
다시 퍼포스 헬리스 리모트에도 갈 수 있고
그럼 들어가면은 들어가고
근데 다른 사람이 와서
내가 이 모든 걸 한 번에 체크아웃을 하겠다
한 번에 클론을 하겠다 그러면
루트에서 클론을 하면은
그 여태까지 했던 모든 체크 리스트
그니까 체인지 리스트가 있잖아요
그게 다 보였으면 하는 바람이었거든요
어 그게 저는 훨씬 낫다고 봐요
어떻게 보든 왜냐하면
그러면은 Git에서 하는 그
조그만 리포 해갖고
제가 할 수 있는 거만 바꾸는 것도 되고
아니면 클린 리포 다 가져가서 히스토리 다 볼 수 있는 것도 되거든요
어찌 보면은 굉장히 서브폴더는 갖다가
같은 개념으로 가는 건데
Git 자체에서는 안 돼요
왜냐면 모든 게 체인지 리스트 하나씩 들어오니까
근데
퍼포스는 어차피 Git 퓨전이기 때문에 내부는 퍼포스거든요
그러면
Git에서 체크아웃 클론할 때 이 리스트 주고
체인지 리스트라는 건 내부에서 다 어떻게 처리하고 저장을 해서
각 폴드별로 보일 수도 있는 거
각 파일별로 보일 수도 있는 거거든요
저는 그게 충분히 될 거라고 생각을 하는데
그게 안 됐어요
제가 원했던 건 그거였거든요 사실은
왜냐하면 저는 이미 긴 리포가 여러 개가 있고
한 열 몇 개가 있는 거 같아요
머큐럴 리포도 있고
그거를 가져다가 그냥 폴더 안에 쳐박고
나중에 필요할 때마다 하나씩 굴러다 쓰자
그러면 얼마나 관리하기 편해요
저는 그걸 바랬는데
그거는 안 되는 거 같아요
그리고 지금
Git을 갖고 와서 곧바로
퍼포스에 푸시했을 때 히스토리가 유지가 되는지도 모르겠어요
그게
예
그것도 해봐야 될 거 같아요
근데
그러니까
Git 퓨전으로 겉에 입힌 거니까 조금
아 되겠다
안 되면 말이 안 되죠
그건 될 거라고 생각을 하는데
Git 퓨전이라는 거 자체가 이미 Git으로 해놨다가
체크인하는 거가 되는 거니까
근데 뭐든 간에
가장 지금 걸리는 거는
Git이나 머큐럴 같은 경우는 말 그대로
Git이나 머큐럴 같은 경우는 말 그대로
딱 리포 잡아놓고
이거 하나 클론이라고 한다면
커밋 커밋 해서 체크인하고 푸시하는 것까지 편한데
이거는 좀 그거에 비해서는
조금 더 워크플로우가 좀 복잡하다는 거
조금 더 워크플로우가 좀 복잡하다는 거
그게 좀 단점이고
포트 넘버 지정해주는 것도 좀 싫고
서버 컴포넌트를 제가 따로 설치해서
돌려야 된다는 것도 되게 싫어요
그래서 아직은
워크플로우 개선이 있지 않는 한
Git이나 머큐럴을 넘겨받을 것 같지는 않은데
제가 이 피드백은 줄 거예요
피드백은 주고 어떻게 되는지 볼 건데
예전 방식에서 아직도
크게 변하지 못했다는 걸 보면은
변화하기가 쉽지 않지 않을까 생각이 들고
그러면 조금만
팀에서
공짜 리포를 어떻게
돌리는 게 맞냐라는 생각을 하면은
저는 아직까지도
비주얼 스튜디오 온라인이 가장 적합한 것 같아요
뭐 그 외에 이제 뭐
제가 옛날에 머큐럴 좋아해서
빗버켓 좋아하는 것도 아시고
킬링 같은 경우는 이제 무제한으로
2명인데 바이너리까지 들어가서 좋아하는 것도 아시겠지만
바이너리까지 들어가서 좋아하는 것도 아시겠지만
지금 현재 제가 개인적인 입장에서
한 5명 정도의 팀을 운영한다면
비주얼 스튜디오 온라인을 갈 것 같아요
무제한 리포고 Git 자체로 지원하고
Git이 안되면 TFS도 할 수 있고
제가 TFS를 딱히 좋아하지는 않지만
Git이 주는 그 장점을 되게 좋아요
Git이 주는 그 장점을 되게 좋아요
로컬에서 체크인 맘대로 하고
나중에 푸시만 하면 되는 거
Git이 좀
여태까지 써왔던 그런 버전 컨트롤 시스템
여태까지 써왔던 그런 버전 컨트롤 시스템
컨머셜 버전 컨트롤 시스템에 비해서 굉장히 약한데
머지 시스템도 약하고
그래도 5명 정도 팀에선 문제가 없을 것 같다고 생각하고
그래도 5명 정도 팀에선 문제가 없을 것 같다고 생각하고
Git은 제가 볼때는 이거
스케일이 커지기 시작했는데
Git이 시작하면 문제가 되는게 길어지더라고요
스케일이 정말 커지면
돈 주고라도 PURPOSE 쓰는게 맞는데
그때까지 PURPOSE, HELIX가 좀
DBCS도 이렇게
쉽게 인스토리어 쓸 수 있는 정도까지 됐으면 좋겠다는 생각이 들어요
쉽게 인스토리어 쓸 수 있는 정도까지 됐으면 좋겠다는 생각이 들어요
일단은
HELIC 팀한테 제가 피드백을 주고 어떻게 되는지 보겠지만
HELIC 팀한테 제가 피드백을 주고 어떻게 되는지 보겠지만
이게 진짜 완벽히 돌 정도가 되려면 한
이게 진짜 완벽히 돌 정도가 되려면 한
1~2년은 걸리지 않을까 생각이 들어요
PURPOSE의 파워풀한 그 기능을
PURPOSE의 파워풀한 그 기능을
기조들이 얼마나 제일 쉽게 쓸 수 있게 만들 수 있냐가
기조들이 얼마나 제일 쉽게 쓸 수 있게 만들 수 있냐가 제일 관건인 것 같아요
그리고 어찌보면 Git하고 곧바로 연동이 안되는게
그리고 어찌보면 Git하고 곧바로 연동이 안되는게 좀 단점일 수도 있죠
Git 클라이언트가 작동을 하긴 하는데
제가 아까 말했듯이 Git 리포에 이렇게 박아두고
제가 아까 말했듯이 Git 리포에 이렇게 박아두고
폴더에 넣은 다음에 체크하트도 문제가 없는 그런 정도의 워크플로우가 된다면
폴더에 넣은 다음에 체크하트도 문제가 없는 그런 정도의 워크플로우가 된다면
진짜 할 길이 없거든요
세상 모든 사람이 Git을 딱 하고 한 리포에 쳐박아놨다가
Git 클라이언트가 딱 하고 그 히스토리가 그대로 있으니까
다른 데 리모트로 푸쉬하면은
자기꺼 잃지 않고 계속 보관할 수가 있잖아요
저는 그게 되게 중요하다고 생각을 하거든요
저는 그게 되게 중요하다고 생각을 하거든요
그것도 좀 아쉬운 것 같아요
Git이 표준화가 되면서
Git이 표준화가 되면서
워크플로우도 그랬지만
장점 하나는 저는 그거라고 봐요
온갖 세상에서 Git을 지원하면서
Git을 중간에 변환을 해서 지원하든 뭐를 지원하든
Git을 중간에 변환을 해서 지원하든 뭐를 지원하든
내부적으로 지원을 해줘서
마이그레이션이 정말 쉬워졌다는 거
히스토리 잃지 않고 여기저기 푸쉬하고
옮겨다녀도 아무 문제 없다는 거
그거는 정말 Git이 잘한 짓이라고 보거든요
Git이 그만큼
왕창 떠서 된 거였겠지만
아니면
Git 자체가 DBCS이기 때문에
제 로컬에 히스토리가 남아있어도 가능한 거였기도 했고
그런 거 보면서 이제
그런 거 보면서 이제
제가 굉장히 기대했던
버전 컨트롤 시스템이고
하지만 예전보다 바뀐 게 많이 없는 것도 좀 아쉽고
하지만 예전보다 바뀐 게 많이 없는 것도 좀 아쉽고
서브 폴더하고 Git하고
이 플로어만 잘해주면은
가능할 거 같아요
그거를 잘할 수 있는지 봐야겠죠
근데 어차피 뭐 게임 회사에서는
바이너리 많고 이렇기 때문에
Git 못 쓰고 어차피 퍼봇 써야 될 거예요
퍼봇을 쓰는데
그거를 샌드박스 그니까 로컬
DBCS 기준으로 쓰냐 마냐에
그 차이는 있겠죠
DBCS 쓰려면 폴트 만들어야 되고 뭐하고
웬만한 아티스트가 그거 할까?
그래가지고 바이너리 박는 건 대부분이 아티스트인데
아티스트가 정말 쉽게 할 수 있게
버튼 클릭 하면
하나하나를 이렇게 할 수 있게 해준다면
그거만 한 게 없을 것 같긴 해요
근데 그게 아직은 조금 안 되어 있어요
누군가 세팅해 줘야 된다는 거
그 정도 업데이트고요
제가 헬리스에서 써보면서 발견하는 거 있으면
더 말을 하죠
포프였습니다
