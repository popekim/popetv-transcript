예 안녕하세요 포프입니다 어저께인가 그저께인가 제가 자려고
침대에 누웠다가 구글 나우 를 봤어요 구글 나우가 뭐냐면 안드로이드
폰을 가지고 있는 분들 저는 이제 래프폰이니까 그럼 구글 나우라는
기능이 있고 제가 웹을 검색하는 히스토리나 이런 거를 분석을 해서
제가 관심 있어 할 만한 이렇게 기사를 자동으로 제시해주는 그런
서비스가 있거든요 구글 안드로이드 자체에 그냥 포함된 기능이죠
거기 나온 기사 중에 이제 깃에 관련된 기사가 나왔어요 마이크로소프트가
깃을 다 쓴다 이제 윈도우스 팀이 근데 그 엄청난 윈도우스 데이터 양을
우리가 어떻게 깃을 쑤셔 받고 있냐 이런 얘기를 하고 관심있어서 읽어보다가
이제 깨달은 게 하나 있는 게 뭐냐면 제가 한동안 깃에 대해서 얘기를 많이
했던 적이 있어요 깃이
굉장히 좋은 건데 이게 어찌보면 약간은
엔터프라이즈에서 어떻게 사용해야 되는지 개념이 없이 시작을 해서
만들었고 그래서 엔터프라이즈가 점점 넘어가면서 깃의 기능을 추가하자
라고 했을 때 이제 깃에서는 아 그거는 깃을 쓰는 방법이 아니야 라는 이상은
약간 좀 정치스러운 말로 그냥 넘어 가는데 그에 비해 이제 꽤 많은 이제
소스 컨트롤을 제대로 만들어 왔던
그 기업 용어로 까지 회사들이 이제 깃을 조만간 바꿔줄 꺼다 그래서 이제
퍼포먼스 얘기를 했었고 그런데 이제 마소가 요번에 마이크로소프트가
요번에 좀 크게 그거를 제대로 고치고 있는 것 같애요
그래서 제 예전 비디오들을 보시면 중간 에 퍼포먼스 헬릭스를 소개한
적도 있었고 지금은 문을 닫았지만 헬릭스 클라우드였던 것 같아
요 그리고 그 다음에 라지파일 익스텐션을 한번 설명한 적이 있어요
그렇게 하면 큰 파일을 일단 해결할 수 있다
그러면서 killen인가 killen일 거야 killen이라는 것도 소개를 했었고
근데 중요한 거는 라지 파일을 따로 이렇게 지정을 해주고 저장해주고
뭐 이거를 하는 거 자체가 어찌 보면 약간의 핵이기도 했었고
리포가 커지면 뭐 이제 거기다 서브 모듈을 만들어왔고
서브 모듈을 따로 싱크하는 거 자체도 약간의 핵인 게 뭐냐면
서브 모듈도 손보고 메인 리포도 손보려면 커뮤니티 두 개가 들어가야 되거든요
그럼 좀 굉장히 골아픈 일이죠
사실 서브 모듈의 개념은 이미 존재하는 라이브러리를 가져다가
그냥 쓰는 개념이 맞는 거지
그렇게 이렇게 리포를 자르기 위해 서브 모듈을 만드는 것도 아니었던 거 같고
그리고 제가 설명을 안 했지만 무슨 뭐
뭐 Git 틀인지 뭐 서브 틀인지 뭐 이런 여러 가지가 또 있었어요
온갖 핵이었는데
사실 이 모든 문제야 결과적으로는 Git이 이제 모든 히스토리를 다운받기 때문에
그러면은 이제 파일 용량이 엄청 커진 걸 몇 개 집어넣으면은
Git 리포가 몇백 테라바이 정도 되는 거죠
Git 리포가 몇백 테라파이트가 될 수도 있다 이런 문제였거든요
그러면은 이제 어떤 사람들은 왜 바이너리를 왜 소스 컨트롤에 넣냐
바이너리 넣는 게 아니다 라는 식으로 얘기하는 사람도 있었지만
그거는 프로그래머만의 편협한 시각이고
실제 온갖 컨텐츠를 중요시하는 그런 뭐라 그럴까
분야 프로그램에서들은 오히려 컨텐츠도 버전 컨트롤 해야죠
왜냐하면은 내가 텍스처를 빨간색으로 그렸는데
다음날 파란색으로 바꿨어
그럼 빨간색으로 돌아가려면 어떡할 거야
히스토리가 있어야겠죠
그래서 뭐
텍스처 얘기도 그래서 나왔고
뭐 영화 쪽도 그럴 거고
이런 게임 쪽도 그럴 거고
모든 간에 아티스트랑 일하는 쪽에서는 다 그런 문제가 있었다고 봐요
그래서 Git은 그냥 우리는 그렇게 만든 게 아니야 라고 우기면서 어찌보면은
뭐라 그럴까
좀 더 훌륭한 프로그램 소프트웨어가 되는 거를 좀 이렇게 막고 있었다고 생각을 하는데
결국에는 마소가 이제 비주얼 스튜디오 온라인이라는 게 있고요
거기서 비주얼 스튜디오 온라인에서 이제 GitLab이나 GitTurb 같은 거에요
사실은 어느 정도까지는
거기서 이제 Git을 지원을 하기 시작을 했고
그리고 마소 내부에서도 Git을 많이 쓰기 시작을 해요
저도 지금 마소하고 일을 하고 있는 게 있는데
거기서도 Git을 써요
재밌는 건 뭐냐면
뭐 어떤 게임 프로젝트든 웹 프로젝트든 Git에 뭐 조그만 리포 하나 만들어 갖고 넣고
이런 거는 되게 쉬워요
근데 이게 엔터프라이즈 쪽으로 더 크게 크게 가니까요

이렇게 가기 시작을 하면은
회사 전체에 있는 그 모든 코드베이스를 리포 하나에 박는 경우가 상당히 많아요
왜냐하면은
그러지 않으면은 이제 코드를 찾기도 힘들고
어디서 리포를 하나하나 골라서 찾는 것도 되게 애매하고
그러니까 한마디로 그냥 뭐라고 그렇게 얘기해야 될까
회사에 막 만 명이 일을 하는데
프로젝트가 2,000개가 있어
그럼 리포가 2,000개가 있는 거예요
그 리포를 찾아야 되는 거야 어쩔 수 없이
그런데 모든 리포가 하나에 들어와 있으면
거기서 보기가 훨씬 편하고
편하거든요
그래서 굉장히 많은 회사들이
이제 특히 큰 회사들이 리포를 하나만 갖고 있고
페이스북도 그렇고 구글도 그렇고
뭐 마소는 완벽히는 아닌데
아직 리포를 옮겨가고 있는 중인 거 같아서
최근에 나왔던 거는
이제 윈도우스 코드베이스를 Git으로 옮겼다는 거예요
근데 윈도우스 코드베이스가 이미 한 20, 30년 정도 되었나요
그 정도 되어왔고
거기서 작업한 것만도 몇천 명이 되고
제가 정확히 숫자는 기억이 안 나는데
코드베이스만 해갖고 몇 테라바이트로 알고 있어요
제가 이게 350테라바이트인지 330테라바이트인지 3테라바이트인지 기억은 안 나는데
어쨌든 엄청나게 큰 용량이고
그거를 이제 다운받으려면 엄청나게 시간이 걸리는 거죠
그래서 뭐 잠시 아까 말했던 구글이나 페이스북 같은 경우로 돌아가면
페이스북은 머큐리얼을 쓰는 거를 굉장히 오랫동안 써왔어요
그래서 머큐리얼 같은 거에 느린 거를 막기 위해서
중간에 매물 캐시 받고 뭐하고 많이 바꿨고
구글은 자체 건 거 같은데
구글도 그런 시스템이 있고
마소는 이제 어찌 보면 마소가 되게 욕을 많이 먹잖아요
무슨 뭐 자기네들 이제 막 코드를 안 보여준다 이런 식으로
근데 마소가 역사적으로 오픈소스에 기여한 게 굉장히 많거든요
요번에도 그런 거 같아요
요번에 Git을 Git은 손대지 않겠다 이거예요
Git은 그대로 두고 그 밑에 Git 아래에 Virtual File System을 깔겠다
그래서 얘네가 지금 하는 게 Git은 모든 게 그대로고
그 밑에 어떤 GVFS라고 해요
Virtual File System을 만들어갖고
그 Virtual File System에서 어떤 파일을 받아야 하는지
어떤 파일을 다 받아야 되는지 등을 이제 알아서 뭐라 그럴까
알아서 처리해 주겠다 해요
그러니까 사용자 입장에서는 이 프로토콜이 이네이블된 Git 클라이언트를 받아서 쓰면
우리는 아무것도 모른 척 내부에서 쟤네가 알아서 빠르게 해 주겠다는 거거든요
예전에 마소가 이렇게 Virtual File System을 쓰는 거를 내부 프로젝트에서 한번 본 적이 있어요
그래서 개념이 뭐냐면
한마디로 소스 리포가 350TB가 뭐 이러면은 제가 숫자는 정확히 기억이 안 나지만
그걸 다 다운받아야 될 거 아니에요
그럼 처음 체크아웃하는데 몇 시간이 걸릴 거예요
아무리 인트라 내 망이 빨라도 몇 시간이 걸릴 거예요
그러면 그 다음에 그걸 받은 다음에 이제 모든 파일이 내 하드에 있는 거예요
한마디로 나는 350TB는 말이 안 돼
350TB 하드가 없을 거 같아
어쨌든 굉장히 한 3.5TB나 350TB가 아닐까 생각을 해요 정확히 기억이 안 나는데
예전에 제가 일했던 마소 프로젝트는
싱크를 다 할 경우에 하드에 안 들어갔어요
그 정도의 프로젝트도 있었어요
어쨌든 그래서 하드에 그만큼 뭐가 있으면
Git 같은 거에서 뭐 예를 들어서 Git 스테이터스 체크를 한다거나
아니면은 뭐 이런 여러 가지들 있잖아요
그 오퍼레이션 하나하나가 그 엄청난 파일을 다 뒤지고
그 엄청난 오브젝트를 다 뒤져야 하기 때문에 시간이 엄청 걸려요
그래서 얘네가 지금 한 거는 아 그러면은 우리가 다운받는 그
랩프라고 보통 하죠 Git에서
그런 각 스냅샷들이나 그런 것들을 다 뒤지고
각 체크인했던 것들 그거를 어떻게 줄일 거냐
그리고 내가 심지어는 Git 풀만 할 때도
보통은 서버에 내가 이런 걸 다 가지고 있어
서버 너는 뭐가 지구인지 알아 갖고 없는 걸 나한테 줘 이런 식이거든요
그럼 그 커뮤니케이션 하는 것도 엄청나게 시간이 걸린다는 거예요
그래서 뭐 Windows 정도 되는 프로젝트를 넣어봤으니까
얘네도 느낀 거지
그래서 그거를 엄청나게 빠르게 만들었고 이런 방법을 통해서
그리고 새로운 프로토콜을 만들어서 Git 리포에서
그러니까 Git Hub이나 이런 리포에서 이거를 지원을 하면은
제가 심지어는 뭐라 그럴까
풀라는 그 리포지토리에 있는 브랜치들이라던가
이런 거를 좀 스마트하게 자기가 알아서 판단을 해주고
그게 안 될 경우에 매뉴얼하게 그래 난 이 브랜치도 필요해 라고
말해줄 수 있는 그런 메카니즘을 만들었어요
그래서 이게 지금 얘네가 지금 그 Windows 팀에서 이걸 쓰고 있고
예전에 제가 말했듯이 개밥 먹는 프로그래머라는 얘기가 있었잖아요?
자기가 만든 제품은 자기가 써봐야 된다?
그래서 그거를 실제 쓰고 있고
걔네가 그래서 스탯을 뽑은 것도 있어요
몇 초가 걸리니 뭐가 걸리니
근데 엄청나게 빨라졌어요
옛날에 뭐 Git 스테이터스 같은 게 가장 느리다고 그랬거든요 얘네가
근데 그게 뭐 옛날에 몇 분 몇 시간 이랬다면은
지금 뭐 1분 이내에 끝날 정도로 굉장히 빠르게 최적화를 했고
그리고 현재 재밌는 거는 이게 오픈소스예요
그러니까 자기가 이거를 고치겠다고 하면서 이제 Git 위에 올리는 거니까
이제 다른 사람들도 다 알지만은
다 똑같이 이런 프로토콜을 만들어라
그러면은 누구나 이런 빠른 방법을 쓸 수 있다
한마디로 LFS처럼 누군가 이제 시작을 했던 거죠
이것도 시작을 한 거예요
그러면서 이 실제 Git for Windows 클라이언트 중에
이게 Enabled Client를 자체적으로 만들었고
Git for Windows에다가 자기가 좀 추가를 해서 만든 거겠죠
그래서 그게 실제 Git 허브 페이지에 올라가 있고
그리고 모든 소스 코드 얘네가 지금 한 거는
현재 오픈소스예요
그래서 아직 리눅스나 뭐 이쪽 구현은 없는데
그거는 뭐 현재 검토 중이래요
근데 어차피 오픈소스이기 때문에
이제 누구라도 만들어줄 수 있는 거죠 사실은
굳이 마소가 안 만들어도
근데 이제 참 재밌는 거는 마소가 뭔가 오픈소스를 하면은
사람들이 마소한테 자꾸만 리눅스나 뭐 이런 거 다 만들어 달라고 그러고
리눅스나 이쪽 사람들이 오픈소스 하면은
아무도 걔네들한테 가서 Windows용으로 만들어 달라는 얘기 별로 안 하는 거 같아요

오히려 마소가 만들어주는 것 같아
그래서 되게 좀 이상한 이코 시스템이고
그래서
아 근데 하나까지 단점은 윈도우스에서 돌려면 윈도우스 10이 있어야 된대요
아마 윈도우스 10에 새로 올라간 파일 시스템을 이용하는 뭔가가 아닌가 싶어요
그래서 윈도우스 10이 있고
기 클라이언트를 이제 아까 말한
기터브 웹페이지 가서 다운을 받고
음.. 그리고
이제
현재 제가 아까 잠깐 얘기했잖아요
기터비나 이런 거에서 이 프로토콜을 지원해야 된다고
현재 지원하는 프로토콜이 비주얼 스튜디오 온라인 밖에 없는 것 같아요
프로토콜이 아니라 서비스가
그래서 오픈 스펙이고 모든 게 다 오픈인데
현재 비주얼 스튜디오 온라인에서는 워낙 엔터프라이즈를 많이 상대해왔으니까
엔터프라이즈가 기술을 옮기면서
예를 들면 TFS 서버에 있던 거를 기술을 옮기면서 이런 속도 저하를 많이 받겠죠
그러니까 그런 거를 해주기 위해
아 이제 비주얼 스튜디오 온라인에 놓고
지금 비주얼 스튜디오 팀 서비스라고 불릴 수도 있어요
기 클라이언트 만들었고
그래서 이제 예전에 제가 비주얼 스튜디오 온라인을 쓰면서 언제나 이상했던 게
막 가면은 마이 브랜치라는 그런 게 있고
올 브랜치가 있고 페이보릭 브랜치가 있어요
그 웹데시보드에
난 이게 왜 있나 그랬는데
이게 제가 아까 말했던 내가 풀 받을 브랜치를 고를 수 있는 메커니즘 중에 하나더라고요
제가 이미 한 번이나 작업했던 브랜치는 마이 브랜치로 들어와서 계속 풀을 받고
아 올 브랜치로 가면
내가 전혀 모르는 브랜치도 있는데
그거를 이제 페이보릭으로 지정하면은
이제 그것까지 풀을 받아주는 거
아니면 그게 그냥 싫고 옛날 behavior를 원한다면은
url에서 리폴을 하고 슬래시하고 무슨 full인가
f u l l underscore full 어디 넣으면은
전부 다 브랜치를 받는 그런 url까지 만들어 줬어요
그래서 이 사람들이 이제
그 이거 만든 사람이 블로그 포스트를 4개인가를 지금 했어요
계속 만들고 있는데
내부적으로 어떻게 도는지 설명한 것도 있고
저도 그거 읽어보고 나서
아 이게 깃이 나아갈 올바른 방향이구나를 깨달은 거예요
그러니까 여태까지 사람들이 lfs 쓴다거나
서브모듈 쓰거나 이러면서 어떻게든 문제를 비껴 가려고 했다면
얘네들은 이제 아 이거는 솔직히 파일 시스템의 문제고
그 내부적으로 싱크를 얼마 정도 해야 되는지를 결정해야 되는 거지
모든 히스토리를 물론 내 로컬에 들고 있으려면 들고 있을 수는 있죠
근데 그게 보통 필요 없는 사람들이라면은 최근 몇 년 전에
몇 커밋만 있어도 아니면 최근 내가 신경 쓰는 브랜치만 있어도
작업하는데 상관이 없다는 거죠
아니면 정말 그게 필요하면은 그때 이제 더 다운받아도 되는 거고
그래서 그런 방식으로 이제 방향을 진행한 거 같고
그리고 저는 이 프로토콜이 표준이 될지
아니면 다른 누군가 또 비슷한 프로토콜을 만들어서 표준을 만들지는 모르겠는데
방향성은 이게 맞아요
이게 되면은 이제
아 깃을 쓰는 사람 입장에서는
깃이 내부가 뭐 이러면 깃이 잘 작동을 안 하고 저러면 작동하고
이런 고민을 할 필요가 없이 그냥 깃을 쓸 수가 있다는 얘기거든요
근데 지금 현재 깃을 배우기가 너무 어렵다라고 하는 얘기 자체가
기술적으로는 그 당시에 굉장히 혁신적인 기술이었어요
근데 유저의 사용성을 전혀 고려하지 않은
뭐 전혀까지는 아니지만 많이 고려하지 않은 그런 거고
아 니네가 못 써? 그럼 니네가 그냥 멍청한 거야
이건 깃은 그런 게 아니야 라는 그런 어찌 보면은 약간 좀
어찌 보면 약간의 부심인 거 같기도 하고
어찌 보면은 그냥 아 나는 잘났고 너는 멍청한 거야 라는 그런
그런 애티튜드 약간은 묻어있었다고 봐요
물론 모든 사람이 그런 게 아니지만
굉장히 만연해 있는 자세 중에 하나였어요
뭐 이거는 제가 예전에 오픈소스 쪽 마인드에 대해서 약간은 좀 문제가 있다
라는 얘기를 했던 것도 되게 비슷한 거고
그래서 매우 훌륭해졌어요
그래서 이게 갈 거 같고
저는 이제 물론 이제 제가 어느 회사 거 일을 하느냐에 따라
뭐 GitLab을 쓰기도 GitHub을 쓰기도 하지만
근데 개인적으로는 저는 다 Visual Studio Online을 써왔거든요
왜냐하면은 일단은 공짜고 무제한이고 5명까지는
아 그리고 LFS 확실히 지원해주고
아 그리고 서버 안전성 좋고
뭐 그리고 특히 단내 쪽이나 뭐 C++쪽 이런 거 할 때는
빌드 시스템 너무 잘 돼 있으니까 생각할 거 없이
아 근데 저는 이제 곧바로 그 혜택을 받을 거 같아요
그래서 저는 이제 LFS를 빼도 되지 않을까라는 생각을 하고 있어요
여기서 한 가지 얘기를 하자면
아 이 기사가 처음 올라갔을 때
이제 또 역시 외국에 이제 Reddit이라는 그런 블로우가 있어요
약간은 좀 한국의 어떤 웹사이트랑 비교해야 될지 모르겠는데
약간은 좀 까칠한 프로그래머들이 있는 거?
아 그딴 거 왜 해 뭐 마손은 악마야
이런 약간 좀 그런 분위기의 이제 약간의 웹보드인데
거기에 이 기사가 올라왔을 때 굉장히 많은 사람들이
야 LFS 쓰면 되잖아 왜 LFS 놔두고 왜 새로운 걸 만들어 너네
이런 식으로 얘기를 했는데
이거는 솔직히 LFS의 문제를 해결하는
LFS로 해결할 수 없는 문제들이에요
왜냐하면은 윈도우스 코드베이스 자체가 일단 뭐 파일 몇 개인지 보여주고
크기가 몇 개인지 보여주는데
실제 거의 텍스트 파일 정도의 사이즈가 나와요
그렇게 큰 바이너리 파일이 없는 거 같아요
그리고 실제 파일 하나 하나는 히스토리 다 포함해 봐야
한 뭐 640키로였나 그 정도밖에 안 된다고 제가 들은 거 같아요
그 정도 크기면은 20년 동안 쌓인 코드면 말이 되거든요
근데 이 파일이 너무 많은 거야
많기 때문에 그거를 다 더하면은 그런 엄청난 사이즈가 나와버렸다는 거죠
그러면 라지 파일 시스템이라는 것 자체는
큰 파일 하나에 히스토리를 저장하는 게 중요한 거잖아요
히스토리를 다 빼고 최종 스냅샷만 다운받게
그럼 이거는 작은 파일들이기 때문에
LFS에서 해결할 수가 없는 문제라는 거예요
그래서 그 Git에서 이제 여태까지 무슨 말이 와도
아 그거는 그냥 LFS 써 그럼 바이너리를 왜 넣어 이랬지만
그 문제가 아니라 바이너리가 아닌 파일도
몇십 년의 그런 히스토리가 쌓이고
그 파일 사이즈가 방대해져 버리고
파일 사이즈가 아니라 파일 숫자가 방대해져 버리면
이런 문제가 날 수 있다는 거를 이제 일부러 무시해 왔던 거죠
그건 리폴을 잘게 쪼개는 게 맞는 거다 이런 식으로
근데 뭐라 그럴까
예전에도 몇 번 얘기했는데 이거는 디버그 환경
디버그를 이제 로컬에서 다 할 수 있고
아니면 정말 개발 중에 디버그를 다 확실히 하고
모든 거를 다 이제 콜스택까지 볼 수 있으려면은
소스 코드가 있는 게 맞아요 내 컴퓨터에서
일할 수 있는 게 맞고
그렇기 때문에 오히려 엔터프라이즈 환경에서
그런 리폴을 갈라라 갈라라 라고 하는 거는
오히려 말이 안 되는 거 같고 제 생각에는
그거는 너무 뭐라 그럴까
제가 항상 경계하는 그냥 이상주의적인 이야기죠
그 리폴을 알아서 다 받아주고
다 분리되어 있는 거 알아서 받아주는 툴이 있고
막 이거를 다 만들어 갖고 누가 해준다면은 가능한 얘기인데
그게 아닌 상황에서는 어려운 일이고
정말 그게 필요했다면 저는 마소나 퍼포먼스,
그쪽에서 이런 걸 만들었을 거라고 생각을 해요 그런 툴을
근데 이제 그보다 좀 더 근본적으로 해결을 한 거죠
그래서 이 문제 자체는 그냥 방대한 리폴을 해결하는 거고
LFS 자체를 고치려는 시도는 아니지만
어차피 이게 마지막 스냅샷만 받을 수 있는 기능이라면
결과적으론 LFS를 빼도 상관이 없어지는 거예요 그 순간에
LFS를 그냥 빼버리고 모든 거 다 리폴을 끝내고
이제 거기서 이제 버추얼 파일 시스템에 의존해 갖고
필요한 건 받을 수 있게 가는 거죠
이런 개념까지도 버추얼 파일 시스템에서
내부적으로 그냥 알아서 처리해줄 수 있는 거라고 보고
그래서 사용자를 괴롭히지 않는 올바른 방법
내부적인 옵티마이제이션의 올바른 방법이라고 봐요
그리고 이제 마지막으로 한마디 더 첨언하자면
이제 예전에 윈도우 8인가 나왔을 때
그거를 엄청나게 깐 사람들이 많아요
그리고 윈도우 10은 좋다 이러는데
그리고 마소는 왜 이렇게 바보짓을 많이 하냐
비스타가 문제고 이런 얘기하는데
솔직한 얘기로 제가 예전에 UWP용 게임을 만들 때
굉장히 놀라운 기능이 들어온 게 있었어요
그 화면 리사이즈 하는 그런 부분에서
그게 사실은 윈도우 8 때 들어왔거든요
그리고 이제 윈도우 10에서 이제 그제서야 제가 본 거죠
그래서 마소가 언제나 어찌 보면 한 번씩 삽질을 하는 계기는
뭔가 이렇게 굉장히 큰 기능들을 집어 넣을 때인 것 같아요
그래서 윈도우 10도 이게 왜 필요해 이런 식으로 얘기하지만
윈도우 10에 어떤 기능이 들어오는지 제가 모르겠지만
그 윈도우 10에서만 이 Git 파일 시스템이 돌 수 있다는 거 자체만으로도
그냥 거기서 새로 들어온 기능 하나에 이걸 올려 쓰는 게 아닌가
그래서 실제 마케팅적으로는 저희가 듣고 있지 못하는
그런 많은 기능들이 내부적에서 일어나고 있고
그런 거를 제대로 쓰고 뭔가 나오는 거 자체가 시간이 좀 걸린다고 봐요
그래서 뭐 그래서 이제 저도 예전에 비스타 나올 때
왜 이런 걸 만들었을까라고 그런 좀 약간은 생각을 했었는데
이제 윈도우 8 나올 때 생각을 좀 바꿔먹었죠
그 다음부터 아 뭔가 이유가 있었겠구나
뭐 다행인 거는 윈도우 10은 이제부터는 꾸준히 업데이트되는 거 같고
더 이상 새로운 버전이 나올 것 같지 않으니까 뭐 이런 문제는 없겠지만
그냥 그런 많은 뒤에서 엄청난 리서치 파워를 놓고
엄청난 기능을 향상하는 거를 이제 개발자니까 나중에라도 보는 거 같아요
보면서 아 참 대단하다는 생각을 하고 있고
어쨌든 오늘의 주제는
이제 Git에 이제 제한점을 풀어주는 방향이 제대로 나온 거 같고
그게 이제 마소가 지금 주도하는 이 프로토콜을 기반으로 해서 표준화가 될 건지
아니면은 이제 또 다른 사람이 또 뭐 다른 표준을 만들어 갖고
그거로 밀고 갈 건지 모르겠지만
아 그거는 좀 더 지켜봐야 될 거 같아요
어쨌든 간에 음 제가 볼 때는 앞으로 한 2~3년 안에는
이게 확실히 정립이 돼서 더 이상 뭐 LFS니 뭐 이런
약간의 핵은 더 이상 없을 거 같고
서브 모듈도 어쩌면 더 이상 없어질 수도 있을 거 같아요
그리고 일단 이 Virtual File System이 작동을 한다면 이제 Git Working Tree라고 있잖아요
Git 중에서 여기만 가져다가 쓴다는 뭐 이런 개념
그런 이렇게 서브 트리만 복제해 갖고 쓰는 것도 충분히 이제 그 단에서 해결이 가능하지 않을까
그래서 아 Git에도 드디어 이제 엔터프라이즈에서도 Git을 크게 걱정 없이 쓸 수 있는 날이 온 거 같다는 생각을 했고요
그래서 여태까지 아 Git은 다 좋은데 이게 문제야 라고 했던 부분들 이제 드디어 해결이 돼가고 있는 거 같아요
음 오랜만에 뭐 테크 얘기를 좀 열심히 한 거 같군요
네 포프였습니다
