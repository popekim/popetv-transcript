네~ 안녕하세요. 포프입니다.

어.. 오늘은 그... 뭐라고 해야 되지, Pair Programming이라고 해야 되나. Pair Programming까지는 아닌데 그런 비슷한 거에 대해 얘기를 해볼게요.

제가 예전에 한번 비디오 만들면서, 코드 리뷰가 이래서 정작 코드 리뷰가 유포 효용이 있는 경우는 생각보다 그리 많지 않다는 얘기를 했었거든요. 근데 그럼에도 불구하고 코드리뷰에 장점은 분명히 있잖아요. 그것의 장점이라는 게 여러 사람이 코드를 알 수 있다, 는 게 또 하나의 장점인데.

사실 코드리뷰만 해서는 많은 사람들이 그 코드를 알 수 있다고 생각하지 않나요? 어차피 남들 대충 코드리뷰하는 거, 그 정도로 깊게 알 수도 없고. 분명히 자기 생각을 해보면서 짜봐야만, 그리고 짜면서 고민도 해보고 생각을 열심히 해봐야만, 그런 실제 들어가 있는 코드에 대한 의미도 알고 구조도 알고, 이게 어떻게 내가 나중에 뭘 더 추가하려면 알아야 하는지, 이런 것도 있다고 보거든요.

그러고, 그뿐만이 아니라 이제 예를 들어서 어떤 코드를 작성한 사람이 있었는데, 이제 그 사람이 회사를 떠났다. 다른 회사로 갔을 경우에 그 사람이 만든 코드는 과연 어떻게 할 거냐. 그걸 누가 또 배워서, 누가 또 열심히 그걸 넘겨받아서 추가하고 관리하고, 어.. maintain(메인테인) 유진인가요? 그거 하냐 문제도 있거든요.

그래서 제가 여러 군데 회사를 돌아다니면서 살펴보는 것도 있고, 저 혼자 생각한 것도 있고 그런데. 그걸 해장?? 해장?! 그것을 해결하는 가장 좋은 방법은 Pair Program은 아니에요.

이제 Pair Program은 말 그대로 코드 하나 짤 때 두 명을 집어넣어서, 한 명은 코드 짜고 한 명은 보고 있고 서로 상의해가며 코드를 짠다는 게 Pair Programming인데, 그것까진 아니더라도. 그거하고 조금 비슷한 방법으로... 아... 그런 Pair Programming의 장점과 코드리뷰에서 올 수 있는 장점, 퇴사자가 있을 경우 그 코드를 넘겨받는 인수인계 절차를 원활하게 하기 위한 장점. 그걸 할 수 있는 방법이 있더라고요.

그 제가 생각하는 방법 뭐냐면. 만약에 예를 들어서 어떤 기능이 있다고 해요, 파티클 기능. 파티클 시스템을 만들 때 사실은 아.. 파티클 시스템에 들어가는 여러 가지 작은 규모의 기능들이 있잖아요. 근데 대부분의 회사들에서는 보통 한 명에게 그 모든 일을 맡기는 경우가 일반적이에요.

이제 그 이유가 뭐냐면, 한 명이 이걸 전문적으로 담당하면은 그만큼 이 사람이 모든 걸 아니까, 어찌 보면 능률도 오르고, 누가 물어보면 빨리 새로운 기능을 추가할 수 있고 이런 장점이 있는데.

이런 것의 문제점은 이제 그 사람이 나갔을 경우, 다음 새로운 사람이 그걸 인수인계하는 데 걸리는 시간이 좀 오래 걸린다.

근데 이제 만약에 그런데 이런 거를 두 명에게 나눠주면은 일이 좀 더 쉬워져요. 재미있는 게. 예를 들어서 파티클 시스템이 있고, 그 안에 기능 a, b, c, d, e가 있다.

그러면은 a는 김씨에게 주고, b는 이씨에게 주고, 다시 c는 김씨에게 주고, d는 이씨에게 주고. 이런 식의 방법을 하다 보면은 그 둘은 결과적으로 계속 얘기를 해가면서 개발을 해야 돼요.

왜냐하면 만약에 내가 기능 b를 만들려고 하는데, 기능 b가 기능 a에 무엇을 추가하는 거였다. 그러면 이제 김씨, 그걸 만들었으니까 김씨한테 가서 물어보고, 그걸 또 얘기도 하고, 컨셉도 잡고. 서로 핑퐁! 탁구 치는 것처럼 서로 핑퐁하면서 기능을 추가하는 그런 장점이죠.

이렇게 하면은 처음에는 조금 느리게 보일 수 있어요. 근데 제가 겪어온 바로는, 어차피 모든 기능을 완벽하게 이해해야만 어떤 파티클 시스템이 나오는 것도 아니고, 한 80% 정도만 이해해도 양쪽이 서로 추가하는 데는 문제는 없다고 보거든요.

하지만 그렇게 추가함으로 인해서 80%는 알아야 되니까, 상대방이 한 거에 80%를 계속 알아오잖아요. 그러면은 그 어떤 기능에 대한 지식을 소유한 사람이 두 명이 되는 거예요.

그러면 나중에, 아까 말씀드렸듯이 어떤 한 명이 나가더라도, 그다음 사람 이씨가 그 사람 것을 이미 80% 알고 있으니까 떠맡고. 이 새로운 사람이 들어오면 이제 새로운 기능을 추가하고, 메인테인하고, 버그를 고칠 때마다 이제 그 사람을 핑퐁처럼 많이 연결하다 보면은, 어.. 사람이 정말, 말 그대로 한 달 안에 둘 다 나가지 않는 이상 충분히 그런 거에 대처할 경우가 되더라고요.

그래서 제가 하고 싶은 얘기는. 이건 어찌 보면 일반 개발자, 제일 밑에 있는 개발자보다는, 위에서 사람 관리하시는 분들, 프로젝트 일정 하시는 분들이 좀 생각하시면 좋을 것 같아요.

당연히 한 명에게 특정 기능을 맡기면 일이 빠르고, 당장은 빠른 것 같지만. 정말 만에 하나 무슨 일이 있었을 때 다른 사람에게 백업으로 쉽게 들어올 수 있다는 거. 전반적으로 봤을 때는 확실히... 아.. 뭐라 그러죠..? 오히려 시간을 아끼는 거였어요, 제가 여러 가지 프로젝트를 해본 결과.

그리고 또 어떤 의미에서는, 뭐라 그럴까요? 그게 한국에서 어떤 의미에서는 지식공유를 잘 안 하는 이유, 제가 볼 때는 그거의 일부분은 사람의 어떤 심리가 있는 것 같아요.

어떤 분들은 “나 혼자 갖고 있는 지식을 내가 계속 가지고 있어야 회사에서 나를 안 자르고 나를 계속 데리고 있는다.” 이런 생각으로 인해 지식공유보다는 나만이 할 수 있는 지식을 머릿속에 담아두고 있는 거죠. 그래서 자기 자리를 지키려고.

그런 분들에게는 이런 방법이 조금 단점이 될 수 있을지 모르겠어요.

그런데 정말 제가 여러 회사 다녀본 이상, 회사는 사람을 자르는 이유는 제가 볼 때는 그 사람 실력이 없었다는 게 대부분인 것 같고. 단지 이 사람이 실력이 없지만 지식을 가지고 있기 때문에 계속 둬야 된다라는 자세는 제가 본 적이 없어요.

아니면 제가 이쪽에 있어서 그런지 모르겠지만, 과연 그런 분들에게 이제 정말 단점인지 모르겠어요. 괜히 그런 걱정하시는 분들, “내가 이 지식을 내뿜으면 내 자리가 없어지는구나.” 기우가 아닌가 생각을 하거든요.

어떤 의미에서는. 아니면은 정말 그런 위치에 계시는 분이라면은... 글쎄요, 제가 딱히 뭐라 해드릴 말은 없네요. 제가 별로 좋아하지 않는 분들이라서.

그런 분들은, 저는 솔직히 그런 분들이 조금 없어졌으면 좋겠다고 생각하는 주의라서. 오히려 이래서 없어지면 저야 좋죠. 아, 이건 좀.. 막 나가는 건가..? 그런 생각을 하고요.

뭐 어쨌든 간에 제가 하려고 했던 얘기는, 뭐 어떤 분이 짤렸으면 좋겠다, 이게 아니라. 정말 프로젝트에서 일정 관리하고 계시는 분들 입장에서는, 말 그대로 이렇게 두 명 정도가 한 기능을 맡게 해주면 좋다는 거고요.

그리고 실제 기능을 담당하는 입장에서도, 자기 혼자 모든 걸 짊어졌다는 생각보다는 “자기 말고 다른 사람이 할 수 있다”라고 생각을 하면은. 뭐, 그 사람도 아플 때 집에서 쉴 수도 있고. “이 기능 내가 해야 되니까 반드시 회사 가야 돼” 이러면서 몸 축낼 필요도 없고.

저는 그래서 오히려 괜찮다고 생각을 해요.

그래서 혹시라도 이런 생각을 안 해보신 분들은 한번쯤은 생각을 해보시고요. 혹시라도 이런 부분 때문에 코드리뷰를 굉장히 강압적으로만 시키셨던 분들은, 코드리뷰를 정말 조금 줄이더라도 이런 부분을 통해 코드리뷰의 장점을 그대로 넘어오고, 코드리뷰의 단점은 없애는 식으로. 그런 식으로 생각해 보면 좋겠네요.

오늘도 주저리 주저리 말이 많았는데, 그게 전부예요. 포프였습니다.!!
