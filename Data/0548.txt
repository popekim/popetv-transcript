안녕하세요, 포프입니다. 이 비디오 제목을 보고 '무슨 얘기지?' 하고 오신 분들이 있을 것 같아요. 가끔 우리 프로그래밍 (업계) 쪽에 있다 보면 그런 말 하시는 분들이 있어요. "공학이 중요한 게 아니고, 코딩이 중요한 게 아니고, 인문학이 사실은 더 중요하다." 그걸 사실 볼 때마다, 저는 사실 인문학도였고 처음 나온 학교가 법대였으니까, 그리고 공학도 했죠. 양쪽을 다 해본 입장으로서는, 아 그거는 괜히 괜히 쓸데없이 분란을 일으키는 것 같고요. 제 기준에서 올바르게 설명할 수 있는 방법은요, 컴퓨터 분야나, 인문학 분야나 일을 잘하는 사람들의 사고방식은 과학적 사고방식 + 수학적 사고방식이 둘 다 들어가 있습니다. 수학 문제를 푸는 게 아니라 실제 수리적 사고방식이, 모든 일을 잘하는 사람들에게 속해 있어요. 그래서 그 제목이 나오는 건데 (이 비디오의 제목이). 개발자가 문서 정리하는 것만 봐도요, 이 개발자가 실제 괜찮은 프로그래머인지 아닌지를 볼 수가 있고요. 실제 대학생이 어떤 리포트라던가 그런 거에서 MS Word라던가, HWP(한글) 문서를 정리해왔을 때 그 문서를 어떻게 작성했느냐만을 보는 것만으로도 '이 사람이 프로그래머의 자질이 정도이냐?'의 어느 정도 판단이 가능합니다. 그래서 만약에 여기서 말한 것 중에 안 하고 계시는 게 있다면요, 한번 쭉 곰곰이 생각해보시고, 그냥 내가 '문서의 이런 기능 있는지도 몰라서 이런 거야!'라는 억울함이 있으시다면, 빨리 고치세요. 그게 뭐냐면은 문서를 정리할 때, MS Word, *.hwp 정리할 때, 평문(Plain Text)을 적는 게 아니라 보통 Heading들을 달고 이런 걸 합니다. Heading-1, Heading-2, Heading-3, Heading-4. 그렇게 폰트 크게 달라지고 뭐 Bold체 달라지고 이렇게 되죠. 그럼 문서가 잘 됐나 보려면요, 저는 클릭을 한번 해봐요. 그 위(텍스트)에 (마우스) 클릭을 해 보고(커서를 이동), 폰트 Heading-1이 실제 Word에서 지원하는 스타일 Heading-1으로 되어있는지, 아니면 그 문서 작성자가 그것(Text Blocks)만 선택해서 폰트를 바꾸고, 볼드체를 바꾸고, 폰트 크기들을 일일이 바꿔줬는지를 봅니다. 그거 하나 보는 것만으로 이 사람은 일 잘하는 사람, 못하는 사람이 그냥 나옵니다.

자, 만약에 내가 Heading-1이 내 문서에 5개가 있어요. 지금은 내가 Heading-1이 폰트 사이즈가 16pt이 되면 좋겠어요. 폰트 크기를 5개 모두 16pt으로 바꿔놓았어요. 나중에 내가 그걸 '아, 이거 좀 사이즈가 큰 것 같아. 14pt로 바꾸고 싶어. 그리고 폰트 자체(스타일)도 굴림체에서 궁서체로 바꾸고 싶어. (왜?) 어쨌든 그러고 싶어." 그럴 때 이것을 하나씩 가서 바꿔야 하죠. 하지만, 그러지 않고 Word에서 지원하는 스타일 중에 Heading-1으로 다 바꿔놓으면, 모든 Heading-1은 똑같은 스타일, 똑같은 폰트 사이즈, 똑같은 폰트를 사용하게 되어 있거든요. 그것들을 미리 제대로 적용해놨다면, 그 스타일로 바꾸는 것만으로 모든 게 다 바뀝니다. 이게 개발하고 무슨 상관이 있냐고요? 2가지, 3가지, 4가지까지도 가는데, 몇 가지 생각나는 걸 말씀드릴게요.

1. 첫 번째로는 코드 중복입니다. 어떤 스타일을 이 텍스트에 적용하는 건데, 그 스타일을 다 복붙(클립보드 복사 후 붙여넣기)해 놓은 거죠. 하나하나. 그리고 하나 바꿀 때마다 내가 따로따로 바꾸는 거예요. 그러다 가끔은 마우스(커서) 잘못 클릭하기도 하고, 숫자를 잘못 입력하기도 해요. 그러면 어느 순간, 어떤 Heading 하나는 15pt고, 어느 건 14pt가 돼버리는 거야. 그럼 버그가 생겼죠? 원래부터 스타일로 만들어 놓고 스타일 하나만을 바꿨었다면, 그런 버그 없이 다 고쳐지는 거죠.

2. 그리고 시간 낭비라는 부분도 있죠. 내가, Heading이 50개, 60개, 70개가 되면 스타일 하나 바꾸는 것만으로 모든 게 끝나지만, 그게 아닌 경우에는 Heading (스타일)로 (설정) 안 해놓고 하나씩 했다면, 그걸 모두 바꾸느라 시간이 더 걸리죠. 그래서 속도라는 부분도 있어요. 그 요거는 그런 코드 중복 관리 시간 이런 것이고.

3. 그 외에 또 하나의 여기서 사람들이 잘 생각 못하는 게 하나 있는 것 같은데, 이게 바로 indirection이라는 거예요. 포인터예요, Pointer. 사실은. 이게 뭐냐면은, 포인터라는 개념은요. 프로그래밍에서 메모리 어딘가에 데이터가 있어야 해요. 그 데이터가 있는 게 아니라, 메모리 어디에 가면 거기에 다른 쪽지가 있는 거야. (그 쪽지에 적힌 내용은) "야, 네 메모리 여기 없고, 저쪽에 있어. 다른 위치에 있어. 가서 봐." 한 마디로 곧바로 가는 게 아니라 한 번 우회해서 가죠. 그래서 indirection이라고 합니다. 이거와 똑같은 거에요. 스타일. 얘는 딱 볼 때, '폰트 크기 너무 작아. 16pt으로 곧바로 바꿔야지.' 굉장히 직관적이고 직접적이죠. 근데 '그게 아냐. 이 폰트 크기 바꾸고 싶어. 근데 이게 스타일 Heading-1이라고? 오케이 Heading-1(에 해당하는 스타일 세팅)으로 가서 폰트 크기 바꿔야지.' indirection 개념이에요. 포인터 개념이에요.

4. 자, 그럼 "포인터가 뭐가 중요하냐?" 이럴 수 있어요. 자, 이 똑같은 개념이 엄밀하게 말하면, 개체 지향(Object-Oriented)으로 들어가면 추상화(Abstraction), 일반화(Generalization)로 가는 겁니다. "추상화, 일반화가 왜 필요해요?" 물론 OOP(그중 어느 진영)의 이상한 사람들은, 이상한 개소리하는 엉뚱한 얘기 하지만, 결과적으로 '공통된 Logic, 공통된 Data를 하나로 묶어서 하나로 관리하자'는 겁니다. 그렇기 때문에 아까 말했던 코드 중복과 똑같은 얘기예요. 그걸 하고 있는 겁니다. 개체 지향 설계(OOD) 하면 무슨 이상한 디자인 패턴 배우고, 별별 이상한 짓 다 하시는데 결과적으로는, 이런 공통적인 무언가를 찾고 그것을 공통으로 뽑아서, 그것들을 하나로 합치고 이것을 공유하는 게 방법입니다, 사실은. 그게 가장 기초적인 OOP에요. 그거(포인터)랑 똑같은 거에요. 근데 문서에서 이미 그것(폰트 스타일 설정 일괄 적용)을 못 하는데 코딩에서 그걸 할 수 있다? 굉장히 의심스럽죠. 그래서 잘 안됩니다 (폰트 설정 못하는) 그러신 분들은.

5. 자, 그러면 이게 정말 개체 지향에서 끝나는 것일까요? 아닙니다. 지금 말하는 방식이 과학적 사고방식의 근간이기도 합니다. 그리고 지금 흔히 돌고 있는 머신러닝이 바로 과학적 사고방식을 굉장히 강하게 서포트하고 바뀌는 과정이고요. 인간의 사고방식 자체도 굉장히 과학적 사고방식에 가깝습니다. 그거를 어느 정도까지 할 수 있느냐? 남이 굉장히 단순한 수준에서 멈추느냐, (아니면) 좀 더 고차원적인 논리 추론까지 가느냐의 차이뿐이에요. 무슨 얘기를 하고 있냐면요, 사람은 일반화를 하는 동물입니다. '오늘도 해가 동쪽에서 떴네? 어제도 동쪽에 떴는데? 그저께도 동쪽에 있었는데? 해는 동쪽에서 뜨나 보다.' 이게 일반적인 사람의 추론 방식입니다. 나중에 그걸 과학에서 배우고, 천문학에서도 배우겠지만, 그게 없었을 때 내가 처음 보는 Data일 때, '처음 봤을 땐 그렇네? 두 번째 때는 저렇네? 세 번째 때도 저렇네? 어? 데이터 1, 2, 3번이 같은 것 같은데? 그럼 이건 이렇게 도는 게 아닐까? (앞으로도 같은 데이터가 나오지 않을까?)' 그렇게 가정을 세우죠. 그리고 그 가정이 틀리다고 증명이 될 때까지는 그냥 믿습니다. 사람들이 보통 이런 것도 있잖아요? 어떤 부류 사람들을 싫어하는 경우도 있잖아요? 사람들은 다 잘 지낼 수 없으니까요. 그럴 때 보통 보는 게 그거(추론)입니다. 내가 뭔가 문제가 있을 때 A라는 사람이 있어요. B라는 사람을 만났는데 A가 가지고 있던 (또는) 보였던 어떤 행동이나 말투 중에 비슷한 게 있어요. 뭔가 경계가 되지만, '사람은 선입견을 가지고 보면 안 돼.'라며 잘 지내다가 B에게 뒤통수를 맞았어요. C라는 사람을 만났는데 A와 B가 보여줬던 그 비슷한 패턴이 또 뭔가 있어. 그러면 그게 반복되다 보면 어느 순간, 요런 식으로 말하는 사람 그리고 요런 식으로 뭔가 표현한 사람을 그냥 일단 피하죠? 웬만해서는 잘 가까이 안 가죠? 뭐 아예 안 보는 사람도 있고요. 아니면 적당히 멀리서만 보는 사람도 있어요, 조심하면서. 그게 바로 그겁니다. '패턴을 통해서 어떤 일반적인 가설을 만들고, 그 가설이 정확히 어떻게 도는지는 몰라.' 그게 머신러닝이에요, 참고로 말하면. '일단 믿고 가다가 내가 틀리다고 증명될 때까지 이렇게 할게. 왜냐하면 나는 소중하니까(?). 나의 감정을 아껴야 하니까.' 이런 얘기입니다.

지금 말했던 이 문서 작업도 마찬가지예요. 물론 그런 기능이 없다고, 스타일 같은 기능이 없다고 생각할 수도 있어요. 문서 처음 작성할 때, MS Word 처음 작성할 때 저도 그런 거 몰랐어요. 그냥 '폰트 다 바꾸면 되지, 바꾸면 되지.' 이러고 있었어요. 그러다가 문서(길이)가 길어지니까 한번 스타일 바꿀 때마다 바꿀 게 엄청나게 많아지는 거예요. 그때 누군가 옆에 있던 어떤 사람이, "그거 이 스타일을 사용하면 한 번에 해결돼."라고 말해줘서 깨달았죠. 하지만 정말 똑똑한 사람들은, '아 뭔가 좋은 방법이 있지 않을까? 내가 이걸 왜 반복하고 있어야 하지?' 이런 생각을 하게 되는 거예요. 그 생각을 딱 하는 순간, 이제 그런 방법을 찾아보다가 '어 이런 기능이 있네?' 나오는 거고요. 내가 이 기능이 있는지 검사하거나, 누군가가 나를 가르쳐 주지 않으면 모르는 거죠. 아니면 이 기능을 처음 만든 사람도 있을 거 아닙니까? 그 사람은 우리가 보통 생각하는, 수학에서 무슨 이론을 만들고 가설을 만들고 검증해 나가는, 이런 훌륭한 대단한 사람 중에 한 명인 거죠. 하지만 프로그래머는 그렇게 천재 수학자는 아니어도, 어느 정도까지는 가설을 세우고, 검증하고 어느 정도까지는 일반화를 해서 공통 분모를 만들고, 코드 중복을 없애서 코드 유지보수가 가능하게 만들 수 있는 사람이어야 합니다. 그거는 Junior 때부터 어느 정도 성향으로 보여요. 그리고 Intermediate이 될 때쯤에는 이미 결정이 납니다. 이 사람은 평생 안 될 사람, 이 사람은 가능성 있는 사람, 이 사람은 이미 올바르게 가고 있는 사람. 3가지 정도. 그렇기 때문에 내가 Junior로서 작성하는 문서, 아니면 직장에 취업하기 위해 제출하는 문서의 문서 Format들. 그것들 하나하나가 본인한테 안 좋아 보일 수 있는 부분들이 (사실은) 있어요. 그래서 혹시라도 아직 직장에 안 들어갔거나, Junior이신데 이런 스타일링이라던가 공통되는 그런(템플릿, 양식) 기능을 잘 안 쓰시는 분들은, 남들은 나한테 (내가) 일을 안 하고 있어도 이미 누군가는 나한테 이미 안 좋게 보고 있을 수 있습니다. 그 생각을 잘하세요. 그런 게 중요한 겁니다. 그래서 지금 아주 간단하게 MS Word나 이런 걸로 설명해 드리면서 프로그래머와는 어떻게 연결되는지를 얘기했을 뿐이에요. 사고방식. 결과적으로는 우리가 말하는 수학적인 사고방식, 과학적인 사고방식, 일반화 능력, 그리고 indirection, 포인터와 다 관련이 있는 얘기다.

6. 여기서 한 가지 더 나아가면은, 유용성의 부분도 (사실은) 나옵니다. 문서를 어떤 Heading들로 박아두면요, 거기서 목차를 바로 뽑을 수 있습니다. 스타일 원, 스타일 투. 아니 Heading-1, Heading-2 가져다가 목차를 예쁘게 꾸미면 돼요. 그러면 그 Data가 이미 존재하니까, 그거를 따로 처리해서 목차를 만드는 기능은 굉장히 간편합니다. 하지만 그러지 않았다면, 목차를 한 땀 한 땀 손수로 만들겠죠. 여기서 말하는 건 뭐냐면은, '문서에서 폰트 크기가 크다고 그게 무조건 Heading-1이다'라고 판단할 순 없어요. 왜냐하면 그냥 다른 거(사실 Default Text인데) 폰트만 클 수도 있으니까요. 내가 머릿속에서 원했던 건 Heading-1, Heading-2, Heading-3인데, 실제 내가 하는 작업은 그거에 특화된 작업을 하는 게 아니라, 일반화된 작업을 하는 겁니다. 그래서 얘는 특정적(제한적)이지 않고, (상태가) A가 될 수도 있고 B가 될 수도 있어요. 하지만 일 잘하시는 분들은 기본적으로 모든 것이 특정적(제한적)인 걸 좋아합니다. 왜냐하면, 그래야 커뮤니케이션에도 문제가 없어요. 똑같은 그 Trait(특징)이라고 하죠. 똑같이 보이는 현상. 비슷한 습관, 그런 건가 보다. 이런 것들이 있어요. 하지만 뭔가를 특정적으로 얘기하지 않는 사람은, 일단 프로그래밍하면 굉장히 힘들기도 하고, (컴퓨터는 특정되는 걸 좋아하니까요!) 그리고 협업할 때는 특정적으로 얘기해야만 miscommunication(잘못된 의사소통)이 없으니까 그 습관들이 있다 보면 '이거는 Heading, 그럼 Heading으로 곧바로 해야 해.' 이런 식으로 개념을 갑니다.

그리고 언어 습관이라던가 아니면 변수명을 지을 때, (그것도 언어 습관이죠) 함수명을 지을 때, 아니면 코드 Logic을 짤 때도 특정적으로 짜느냐, 아니면 오만가지를 의미하는 뭔가를 짜느냐도 여기서 결정이 되는 거죠. 특정적으로 이렇게 짜는 버릇하면 (코드를) 보는 순간, 이것은 (명확하게) 그거 하는 거 한 번에 나옵니다. 그래서 함수 이름 읽는 순간, 변수 이름 읽는 순간 이게 뭐 하는지 알게 되는데요. 그게 아니라 함수 이름 지을 때 doSomething(), 뭔가를 해라 이런 식으로 적거나(함수가 하는 일이 모호함), 아니면 어떤 동사를 썼는데, 그 동사가 한 대여섯 가지를 의미할 수 있는 동사예요. 그런 경우에는 되게 애매해지는 거죠. 그걸 읽는 사람도, 코드 만든 사람도. 그런 식으로 특정적이지 않아서 문제가 생기는 경우도 있습니다. 여러 가지 이유가 있겠지만 그런 언어적인 습관, 프로그래밍 습관을 지지시는 분들은 대부분 자기 실력이 없고요. 그 실력이 없다는 것을 숨기고 싶어서, 특정적인 용어를 피하는 경우들을 많이 봤습니다. 왜냐하면, 상대방이 헷갈리면 내가 뭘 잘못했는지 모르거든요. 그냥 '얘가 좀 글을 잘못 썼겠지.' 이러는 거지, 내가 잘못하고 있다는 것은 모르거든요. 그런 것들이 있습니다.

그래서 그런 것들 몇 가지 말씀을 드렸고요. 얘기가 너무 산으로 가는 것 같으니까, 그냥 이쯤 끊을게요. 결과적으로 하고 싶었던 얘기는, 그 문서를 잘 작성하는 것. 그때 가장 쉽게 보는 것은 Heading 같은 것들. 그런 Heading이나 스타일 사용을 못 하면, 내 프로그래밍 실력이 안 좋다는 증거가 될 수 있고요. 그리고 진짜 내가 프로그래밍 실력이 좋은데 그것만 안 하는 거라면, 하세요. 괜히 (남들한테) 억울하게 (실제) 내 실력보다 못 보일 이유는 없잖아요. 근데 대학교를 졸업했고, 그 상황에서 이 문서(작성)를 못 하는 사람이라면, 이미 굉장히 뒤처져 있는 겁니다. 사실은. (스타일링 제대로 못 하고 이런 사람은). 스타일 못 고르는 사람. Heading-1, 2, 3. 그리고 업계에 이미 (들어와) 있어서 한 1년 정도가 지났는데 이걸 못하고 있다면, 본인이 못하고 있는 겁니다. 실력이 없는 겁니다. 그리고 실력을 높이려면 자세를 뜯어고쳐야 할 겁니다. 그때까지 이걸 안 고치고 있다는 것 자체가, (일을 어영부영) 뭉개는 스타일이라는 얘기예요. 그럼 그거를 빼놓고 본인이 책 몇 권 읽는다고 뛰어나진다? 그러지는 않을 겁니다. 그냥 내가 실제 문서작업은 단순 작업이잖아요, 어떻게 보면? 그런 단순 작업에서도 조차 보이는 자세가 있습니다. 그거를 못 하는데 복잡한 작업에서 뭔가를 잘할 수 있다? 슈퍼 천재가 아닌 이상 불가능하고요. 본인이 천재일 확률은, 슈퍼 천재일 확률은 0.1% 미만이기 때문에, 그것에 목숨을 걸지 마십시오. 그렇게 말씀드릴게요. 포프였습니다.